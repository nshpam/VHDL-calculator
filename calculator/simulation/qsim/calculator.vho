-- Copyright (C) 2020  Intel Corporation. All rights reserved.
-- Your use of Intel Corporation's design tools, logic functions 
-- and other software and tools, and any partner logic 
-- functions, and any output files from any of the foregoing 
-- (including device programming or simulation files), and any 
-- associated documentation or information are expressly subject 
-- to the terms and conditions of the Intel Program License 
-- Subscription Agreement, the Intel Quartus Prime License Agreement,
-- the Intel FPGA IP License Agreement, or other applicable license
-- agreement, including, without limitation, that your use is for
-- the sole purpose of programming logic devices manufactured by
-- Intel and sold by Intel or its authorized distributors.  Please
-- refer to the applicable agreement for further details, at
-- https://fpgasoftware.intel.com/eula.

-- VENDOR "Altera"
-- PROGRAM "Quartus Prime"
-- VERSION "Version 20.1.1 Build 720 11/11/2020 SJ Lite Edition"

-- DATE "11/16/2022 00:51:48"

-- 
-- Device: Altera 5CEBA4F23C7 Package FBGA484
-- 

-- 
-- This VHDL file should be used for ModelSim-Altera (VHDL) only
-- 

LIBRARY ALTERA;
LIBRARY ALTERA_LNSIM;
LIBRARY CYCLONEV;
LIBRARY IEEE;
USE ALTERA.ALTERA_PRIMITIVES_COMPONENTS.ALL;
USE ALTERA_LNSIM.ALTERA_LNSIM_COMPONENTS.ALL;
USE CYCLONEV.CYCLONEV_COMPONENTS.ALL;
USE IEEE.STD_LOGIC_1164.ALL;

ENTITY 	calculator IS
    PORT (
	CLK_main : IN std_logic;
	RST_main : IN std_logic;
	START_main : IN std_logic;
	input_A : IN std_logic_vector(4 DOWNTO 0);
	input_B : IN std_logic_vector(4 DOWNTO 0);
	Operation : IN std_logic_vector(1 DOWNTO 0);
	Result : OUT std_logic_vector(9 DOWNTO 0);
	Remainder : OUT std_logic_vector(9 DOWNTO 0);
	sevenseg_digit_0 : OUT std_logic_vector(6 DOWNTO 0);
	sevenseg_digit_1 : OUT std_logic_vector(6 DOWNTO 0);
	sevenseg_digit_2 : OUT std_logic_vector(6 DOWNTO 0);
	sevenseg_digit_3 : OUT std_logic_vector(6 DOWNTO 0);
	sevenseg_digit_4 : OUT std_logic_vector(6 DOWNTO 0);
	sevenseg_digit_5 : OUT std_logic_vector(6 DOWNTO 0);
	COUT : OUT std_logic;
	DONE_main : OUT std_logic
	);
END calculator;

ARCHITECTURE structure OF calculator IS
SIGNAL gnd : std_logic := '0';
SIGNAL vcc : std_logic := '1';
SIGNAL unknown : std_logic := 'X';
SIGNAL devoe : std_logic := '1';
SIGNAL devclrn : std_logic := '1';
SIGNAL devpor : std_logic := '1';
SIGNAL ww_devoe : std_logic;
SIGNAL ww_devclrn : std_logic;
SIGNAL ww_devpor : std_logic;
SIGNAL ww_CLK_main : std_logic;
SIGNAL ww_RST_main : std_logic;
SIGNAL ww_START_main : std_logic;
SIGNAL ww_input_A : std_logic_vector(4 DOWNTO 0);
SIGNAL ww_input_B : std_logic_vector(4 DOWNTO 0);
SIGNAL ww_Operation : std_logic_vector(1 DOWNTO 0);
SIGNAL ww_Result : std_logic_vector(9 DOWNTO 0);
SIGNAL ww_Remainder : std_logic_vector(9 DOWNTO 0);
SIGNAL ww_sevenseg_digit_0 : std_logic_vector(6 DOWNTO 0);
SIGNAL ww_sevenseg_digit_1 : std_logic_vector(6 DOWNTO 0);
SIGNAL ww_sevenseg_digit_2 : std_logic_vector(6 DOWNTO 0);
SIGNAL ww_sevenseg_digit_3 : std_logic_vector(6 DOWNTO 0);
SIGNAL ww_sevenseg_digit_4 : std_logic_vector(6 DOWNTO 0);
SIGNAL ww_sevenseg_digit_5 : std_logic_vector(6 DOWNTO 0);
SIGNAL ww_COUT : std_logic;
SIGNAL ww_DONE_main : std_logic;
SIGNAL \Result[0]~output_o\ : std_logic;
SIGNAL \Result[1]~output_o\ : std_logic;
SIGNAL \Result[2]~output_o\ : std_logic;
SIGNAL \Result[3]~output_o\ : std_logic;
SIGNAL \Result[4]~output_o\ : std_logic;
SIGNAL \Result[5]~output_o\ : std_logic;
SIGNAL \Result[6]~output_o\ : std_logic;
SIGNAL \Result[7]~output_o\ : std_logic;
SIGNAL \Result[8]~output_o\ : std_logic;
SIGNAL \Result[9]~output_o\ : std_logic;
SIGNAL \Remainder[0]~output_o\ : std_logic;
SIGNAL \Remainder[1]~output_o\ : std_logic;
SIGNAL \Remainder[2]~output_o\ : std_logic;
SIGNAL \Remainder[3]~output_o\ : std_logic;
SIGNAL \Remainder[4]~output_o\ : std_logic;
SIGNAL \Remainder[5]~output_o\ : std_logic;
SIGNAL \Remainder[6]~output_o\ : std_logic;
SIGNAL \Remainder[7]~output_o\ : std_logic;
SIGNAL \Remainder[8]~output_o\ : std_logic;
SIGNAL \Remainder[9]~output_o\ : std_logic;
SIGNAL \sevenseg_digit_0[0]~output_o\ : std_logic;
SIGNAL \sevenseg_digit_0[1]~output_o\ : std_logic;
SIGNAL \sevenseg_digit_0[2]~output_o\ : std_logic;
SIGNAL \sevenseg_digit_0[3]~output_o\ : std_logic;
SIGNAL \sevenseg_digit_0[4]~output_o\ : std_logic;
SIGNAL \sevenseg_digit_0[5]~output_o\ : std_logic;
SIGNAL \sevenseg_digit_0[6]~output_o\ : std_logic;
SIGNAL \sevenseg_digit_1[0]~output_o\ : std_logic;
SIGNAL \sevenseg_digit_1[1]~output_o\ : std_logic;
SIGNAL \sevenseg_digit_1[2]~output_o\ : std_logic;
SIGNAL \sevenseg_digit_1[3]~output_o\ : std_logic;
SIGNAL \sevenseg_digit_1[4]~output_o\ : std_logic;
SIGNAL \sevenseg_digit_1[5]~output_o\ : std_logic;
SIGNAL \sevenseg_digit_1[6]~output_o\ : std_logic;
SIGNAL \sevenseg_digit_2[0]~output_o\ : std_logic;
SIGNAL \sevenseg_digit_2[1]~output_o\ : std_logic;
SIGNAL \sevenseg_digit_2[2]~output_o\ : std_logic;
SIGNAL \sevenseg_digit_2[3]~output_o\ : std_logic;
SIGNAL \sevenseg_digit_2[4]~output_o\ : std_logic;
SIGNAL \sevenseg_digit_2[5]~output_o\ : std_logic;
SIGNAL \sevenseg_digit_2[6]~output_o\ : std_logic;
SIGNAL \sevenseg_digit_3[0]~output_o\ : std_logic;
SIGNAL \sevenseg_digit_3[1]~output_o\ : std_logic;
SIGNAL \sevenseg_digit_3[2]~output_o\ : std_logic;
SIGNAL \sevenseg_digit_3[3]~output_o\ : std_logic;
SIGNAL \sevenseg_digit_3[4]~output_o\ : std_logic;
SIGNAL \sevenseg_digit_3[5]~output_o\ : std_logic;
SIGNAL \sevenseg_digit_3[6]~output_o\ : std_logic;
SIGNAL \sevenseg_digit_4[0]~output_o\ : std_logic;
SIGNAL \sevenseg_digit_4[1]~output_o\ : std_logic;
SIGNAL \sevenseg_digit_4[2]~output_o\ : std_logic;
SIGNAL \sevenseg_digit_4[3]~output_o\ : std_logic;
SIGNAL \sevenseg_digit_4[4]~output_o\ : std_logic;
SIGNAL \sevenseg_digit_4[5]~output_o\ : std_logic;
SIGNAL \sevenseg_digit_4[6]~output_o\ : std_logic;
SIGNAL \sevenseg_digit_5[0]~output_o\ : std_logic;
SIGNAL \sevenseg_digit_5[1]~output_o\ : std_logic;
SIGNAL \sevenseg_digit_5[2]~output_o\ : std_logic;
SIGNAL \sevenseg_digit_5[3]~output_o\ : std_logic;
SIGNAL \sevenseg_digit_5[4]~output_o\ : std_logic;
SIGNAL \sevenseg_digit_5[5]~output_o\ : std_logic;
SIGNAL \sevenseg_digit_5[6]~output_o\ : std_logic;
SIGNAL \COUT~output_o\ : std_logic;
SIGNAL \DONE_main~output_o\ : std_logic;
SIGNAL \CLK_main~input_o\ : std_logic;
SIGNAL \input_B[4]~input_o\ : std_logic;
SIGNAL \RST_main~input_o\ : std_logic;
SIGNAL \Operation[0]~input_o\ : std_logic;
SIGNAL \Operation[1]~input_o\ : std_logic;
SIGNAL \START_main~input_o\ : std_logic;
SIGNAL \Start_division~0_combout\ : std_logic;
SIGNAL \Start_division~q\ : std_logic;
SIGNAL \division_function|Add2~125_sumout\ : std_logic;
SIGNAL \division_function|Selector16~0_combout\ : std_logic;
SIGNAL \division_function|state.s0~q\ : std_logic;
SIGNAL \division_function|Selector11~0_combout\ : std_logic;
SIGNAL \division_function|state.s1~q\ : std_logic;
SIGNAL \division_function|bit_counter[16]~2_combout\ : std_logic;
SIGNAL \division_function|state.s2~q\ : std_logic;
SIGNAL \division_function|bit_counter[1]~1_combout\ : std_logic;
SIGNAL \division_function|Add2~126\ : std_logic;
SIGNAL \division_function|Add2~77_sumout\ : std_logic;
SIGNAL \division_function|Add2~78\ : std_logic;
SIGNAL \division_function|Add2~81_sumout\ : std_logic;
SIGNAL \division_function|Add2~82\ : std_logic;
SIGNAL \division_function|Add2~121_sumout\ : std_logic;
SIGNAL \division_function|Add2~122\ : std_logic;
SIGNAL \division_function|Add2~53_sumout\ : std_logic;
SIGNAL \division_function|Add2~54\ : std_logic;
SIGNAL \division_function|Add2~57_sumout\ : std_logic;
SIGNAL \division_function|Add2~58\ : std_logic;
SIGNAL \division_function|Add2~105_sumout\ : std_logic;
SIGNAL \division_function|Add2~106\ : std_logic;
SIGNAL \division_function|Add2~65_sumout\ : std_logic;
SIGNAL \division_function|Add2~66\ : std_logic;
SIGNAL \division_function|Add2~69_sumout\ : std_logic;
SIGNAL \division_function|Add2~70\ : std_logic;
SIGNAL \division_function|Add2~73_sumout\ : std_logic;
SIGNAL \division_function|Add2~74\ : std_logic;
SIGNAL \division_function|Add2~45_sumout\ : std_logic;
SIGNAL \division_function|Add2~46\ : std_logic;
SIGNAL \division_function|Add2~29_sumout\ : std_logic;
SIGNAL \division_function|Add2~30\ : std_logic;
SIGNAL \division_function|Add2~33_sumout\ : std_logic;
SIGNAL \division_function|Add2~34\ : std_logic;
SIGNAL \division_function|Add2~37_sumout\ : std_logic;
SIGNAL \division_function|Add2~38\ : std_logic;
SIGNAL \division_function|Add2~41_sumout\ : std_logic;
SIGNAL \division_function|Add2~42\ : std_logic;
SIGNAL \division_function|Add2~13_sumout\ : std_logic;
SIGNAL \division_function|Add2~14\ : std_logic;
SIGNAL \division_function|Add2~85_sumout\ : std_logic;
SIGNAL \division_function|Add2~86\ : std_logic;
SIGNAL \division_function|Add2~89_sumout\ : std_logic;
SIGNAL \division_function|Add2~90\ : std_logic;
SIGNAL \division_function|Add2~93_sumout\ : std_logic;
SIGNAL \division_function|Add2~94\ : std_logic;
SIGNAL \division_function|Add2~97_sumout\ : std_logic;
SIGNAL \division_function|Add2~98\ : std_logic;
SIGNAL \division_function|Add2~101_sumout\ : std_logic;
SIGNAL \division_function|Add2~102\ : std_logic;
SIGNAL \division_function|Add2~113_sumout\ : std_logic;
SIGNAL \division_function|Add2~114\ : std_logic;
SIGNAL \division_function|Add2~117_sumout\ : std_logic;
SIGNAL \division_function|Add2~118\ : std_logic;
SIGNAL \division_function|Add2~61_sumout\ : std_logic;
SIGNAL \division_function|Add2~62\ : std_logic;
SIGNAL \division_function|Add2~109_sumout\ : std_logic;
SIGNAL \division_function|Add2~110\ : std_logic;
SIGNAL \division_function|Add2~9_sumout\ : std_logic;
SIGNAL \division_function|Add2~10\ : std_logic;
SIGNAL \division_function|Add2~5_sumout\ : std_logic;
SIGNAL \division_function|Add2~6\ : std_logic;
SIGNAL \division_function|Add2~49_sumout\ : std_logic;
SIGNAL \division_function|Add2~50\ : std_logic;
SIGNAL \division_function|Add2~17_sumout\ : std_logic;
SIGNAL \division_function|Add2~18\ : std_logic;
SIGNAL \division_function|Add2~21_sumout\ : std_logic;
SIGNAL \division_function|Add2~22\ : std_logic;
SIGNAL \division_function|Add2~25_sumout\ : std_logic;
SIGNAL \division_function|Add2~26\ : std_logic;
SIGNAL \division_function|Add2~1_sumout\ : std_logic;
SIGNAL \division_function|LessThan0~0_combout\ : std_logic;
SIGNAL \division_function|LessThan0~1_combout\ : std_logic;
SIGNAL \division_function|LessThan0~2_combout\ : std_logic;
SIGNAL \division_function|LessThan0~3_combout\ : std_logic;
SIGNAL \division_function|LessThan0~4_combout\ : std_logic;
SIGNAL \division_function|LessThan0~5_combout\ : std_logic;
SIGNAL \division_function|DONE~0_combout\ : std_logic;
SIGNAL \division_function|DONE~q\ : std_logic;
SIGNAL \multiplication_function|Add1~125_sumout\ : std_logic;
SIGNAL \multiplication_function|bit_counter[5]~0_combout\ : std_logic;
SIGNAL \multiplication_function|Add1~126\ : std_logic;
SIGNAL \multiplication_function|Add1~81_sumout\ : std_logic;
SIGNAL \multiplication_function|Add1~82\ : std_logic;
SIGNAL \multiplication_function|Add1~77_sumout\ : std_logic;
SIGNAL \multiplication_function|Add1~78\ : std_logic;
SIGNAL \multiplication_function|Add1~121_sumout\ : std_logic;
SIGNAL \multiplication_function|Add1~122\ : std_logic;
SIGNAL \multiplication_function|Add1~53_sumout\ : std_logic;
SIGNAL \multiplication_function|Add1~54\ : std_logic;
SIGNAL \multiplication_function|Add1~57_sumout\ : std_logic;
SIGNAL \multiplication_function|Add1~58\ : std_logic;
SIGNAL \multiplication_function|Add1~61_sumout\ : std_logic;
SIGNAL \multiplication_function|Add1~62\ : std_logic;
SIGNAL \multiplication_function|Add1~65_sumout\ : std_logic;
SIGNAL \multiplication_function|Add1~66\ : std_logic;
SIGNAL \multiplication_function|Add1~69_sumout\ : std_logic;
SIGNAL \multiplication_function|Add1~70\ : std_logic;
SIGNAL \multiplication_function|Add1~73_sumout\ : std_logic;
SIGNAL \multiplication_function|Add1~74\ : std_logic;
SIGNAL \multiplication_function|Add1~29_sumout\ : std_logic;
SIGNAL \multiplication_function|Add1~30\ : std_logic;
SIGNAL \multiplication_function|Add1~101_sumout\ : std_logic;
SIGNAL \multiplication_function|Add1~102\ : std_logic;
SIGNAL \multiplication_function|Add1~49_sumout\ : std_logic;
SIGNAL \multiplication_function|Add1~50\ : std_logic;
SIGNAL \multiplication_function|Add1~45_sumout\ : std_logic;
SIGNAL \multiplication_function|Add1~46\ : std_logic;
SIGNAL \multiplication_function|Add1~41_sumout\ : std_logic;
SIGNAL \multiplication_function|Add1~42\ : std_logic;
SIGNAL \multiplication_function|Add1~37_sumout\ : std_logic;
SIGNAL \multiplication_function|Add1~38\ : std_logic;
SIGNAL \multiplication_function|Add1~33_sumout\ : std_logic;
SIGNAL \multiplication_function|Add1~34\ : std_logic;
SIGNAL \multiplication_function|Add1~105_sumout\ : std_logic;
SIGNAL \multiplication_function|Add1~106\ : std_logic;
SIGNAL \multiplication_function|Add1~85_sumout\ : std_logic;
SIGNAL \multiplication_function|Add1~86\ : std_logic;
SIGNAL \multiplication_function|Add1~97_sumout\ : std_logic;
SIGNAL \multiplication_function|Add1~98\ : std_logic;
SIGNAL \multiplication_function|Add1~93_sumout\ : std_logic;
SIGNAL \multiplication_function|Add1~94\ : std_logic;
SIGNAL \multiplication_function|Add1~117_sumout\ : std_logic;
SIGNAL \multiplication_function|Add1~118\ : std_logic;
SIGNAL \multiplication_function|Add1~89_sumout\ : std_logic;
SIGNAL \multiplication_function|Add1~90\ : std_logic;
SIGNAL \multiplication_function|Add1~5_sumout\ : std_logic;
SIGNAL \multiplication_function|Add1~6\ : std_logic;
SIGNAL \multiplication_function|Add1~9_sumout\ : std_logic;
SIGNAL \multiplication_function|Add1~10\ : std_logic;
SIGNAL \multiplication_function|Add1~13_sumout\ : std_logic;
SIGNAL \multiplication_function|Add1~14\ : std_logic;
SIGNAL \multiplication_function|Add1~17_sumout\ : std_logic;
SIGNAL \multiplication_function|Add1~18\ : std_logic;
SIGNAL \multiplication_function|Add1~21_sumout\ : std_logic;
SIGNAL \multiplication_function|Add1~22\ : std_logic;
SIGNAL \multiplication_function|Add1~25_sumout\ : std_logic;
SIGNAL \multiplication_function|Add1~26\ : std_logic;
SIGNAL \multiplication_function|Add1~109_sumout\ : std_logic;
SIGNAL \multiplication_function|Add1~110\ : std_logic;
SIGNAL \multiplication_function|Add1~113_sumout\ : std_logic;
SIGNAL \multiplication_function|Add1~114\ : std_logic;
SIGNAL \multiplication_function|Add1~1_sumout\ : std_logic;
SIGNAL \multiplication_function|LessThan0~0_combout\ : std_logic;
SIGNAL \multiplication_function|LessThan0~1_combout\ : std_logic;
SIGNAL \multiplication_function|LessThan0~2_combout\ : std_logic;
SIGNAL \multiplication_function|LessThan0~3_combout\ : std_logic;
SIGNAL \multiplication_function|LessThan0~4_combout\ : std_logic;
SIGNAL \multiplication_function|LessThan0~5_combout\ : std_logic;
SIGNAL \multiplication_function|state~0_combout\ : std_logic;
SIGNAL \multiplication_function|state~q\ : std_logic;
SIGNAL \multiplication_function|DONE~0_combout\ : std_logic;
SIGNAL \multiplication_function|DONE~q\ : std_logic;
SIGNAL \state~0_combout\ : std_logic;
SIGNAL \START_main~_wirecell_combout\ : std_logic;
SIGNAL \state~q\ : std_logic;
SIGNAL \Op[1]~0_combout\ : std_logic;
SIGNAL \division_function|Selector11~1_combout\ : std_logic;
SIGNAL \division_function|Selector11~2_combout\ : std_logic;
SIGNAL \input_B[3]~input_o\ : std_logic;
SIGNAL \input_B[2]~input_o\ : std_logic;
SIGNAL \input_B[1]~input_o\ : std_logic;
SIGNAL \input_B[0]~input_o\ : std_logic;
SIGNAL \division_function|Add1~1_sumout\ : std_logic;
SIGNAL \input_A[0]~input_o\ : std_logic;
SIGNAL \division_function|Add0~1_sumout\ : std_logic;
SIGNAL \division_function|Selector10~0_combout\ : std_logic;
SIGNAL \division_function|Selector18~0_combout\ : std_logic;
SIGNAL \division_function|Add1~2\ : std_logic;
SIGNAL \division_function|Add1~5_sumout\ : std_logic;
SIGNAL \input_A[1]~input_o\ : std_logic;
SIGNAL \division_function|Add0~2\ : std_logic;
SIGNAL \division_function|Add0~3\ : std_logic;
SIGNAL \division_function|Add0~5_sumout\ : std_logic;
SIGNAL \division_function|Selector9~0_combout\ : std_logic;
SIGNAL \division_function|Add1~6\ : std_logic;
SIGNAL \division_function|Add1~9_sumout\ : std_logic;
SIGNAL \input_A[2]~input_o\ : std_logic;
SIGNAL \division_function|Add0~6\ : std_logic;
SIGNAL \division_function|Add0~7\ : std_logic;
SIGNAL \division_function|Add0~9_sumout\ : std_logic;
SIGNAL \division_function|Selector8~0_combout\ : std_logic;
SIGNAL \division_function|Add1~10\ : std_logic;
SIGNAL \division_function|Add1~13_sumout\ : std_logic;
SIGNAL \input_A[3]~input_o\ : std_logic;
SIGNAL \division_function|Add0~10\ : std_logic;
SIGNAL \division_function|Add0~11\ : std_logic;
SIGNAL \division_function|Add0~13_sumout\ : std_logic;
SIGNAL \division_function|Selector7~0_combout\ : std_logic;
SIGNAL \division_function|Add1~14\ : std_logic;
SIGNAL \division_function|Add1~17_sumout\ : std_logic;
SIGNAL \input_A[4]~input_o\ : std_logic;
SIGNAL \division_function|Add0~14\ : std_logic;
SIGNAL \division_function|Add0~15\ : std_logic;
SIGNAL \division_function|Add0~17_sumout\ : std_logic;
SIGNAL \division_function|Selector6~0_combout\ : std_logic;
SIGNAL \division_function|Add1~18\ : std_logic;
SIGNAL \division_function|Add1~21_sumout\ : std_logic;
SIGNAL \division_function|Add0~18\ : std_logic;
SIGNAL \division_function|Add0~19\ : std_logic;
SIGNAL \division_function|Add0~21_sumout\ : std_logic;
SIGNAL \division_function|Remainder[6]~0_combout\ : std_logic;
SIGNAL \division_function|Add1~22\ : std_logic;
SIGNAL \division_function|Add1~25_sumout\ : std_logic;
SIGNAL \division_function|Add0~22\ : std_logic;
SIGNAL \division_function|Add0~23\ : std_logic;
SIGNAL \division_function|Add0~25_sumout\ : std_logic;
SIGNAL \division_function|Add1~26\ : std_logic;
SIGNAL \division_function|Add1~29_sumout\ : std_logic;
SIGNAL \division_function|Add0~26\ : std_logic;
SIGNAL \division_function|Add0~27\ : std_logic;
SIGNAL \division_function|Add0~29_sumout\ : std_logic;
SIGNAL \division_function|Add1~30\ : std_logic;
SIGNAL \division_function|Add1~33_sumout\ : std_logic;
SIGNAL \division_function|Add0~30\ : std_logic;
SIGNAL \division_function|Add0~31\ : std_logic;
SIGNAL \division_function|Add0~33_sumout\ : std_logic;
SIGNAL \division_function|Add1~34\ : std_logic;
SIGNAL \division_function|Add1~37_sumout\ : std_logic;
SIGNAL \division_function|Add0~34\ : std_logic;
SIGNAL \division_function|Add0~35\ : std_logic;
SIGNAL \division_function|Add0~37_sumout\ : std_logic;
SIGNAL \division_function|Add1~38\ : std_logic;
SIGNAL \division_function|Add1~41_sumout\ : std_logic;
SIGNAL \division_function|Remainder~1_combout\ : std_logic;
SIGNAL \division_function|Add0~38\ : std_logic;
SIGNAL \division_function|Add0~39\ : std_logic;
SIGNAL \division_function|Add0~41_sumout\ : std_logic;
SIGNAL \division_function|Selector0~0_combout\ : std_logic;
SIGNAL \division_function|Quotient[0]~0_combout\ : std_logic;
SIGNAL \division_function|bit_counter[16]~0_combout\ : std_logic;
SIGNAL \Result[2]~0_combout\ : std_logic;
SIGNAL \Result[2]~1_combout\ : std_logic;
SIGNAL \multiplication_function|Data_A~0_combout\ : std_logic;
SIGNAL \multiplication_function|Add0~1_sumout\ : std_logic;
SIGNAL \multiplication_function|Data_B~0_combout\ : std_logic;
SIGNAL \multiplication_function|Data_B~1_combout\ : std_logic;
SIGNAL \multiplication_function|Data_B~2_combout\ : std_logic;
SIGNAL \multiplication_function|Data_B~3_combout\ : std_logic;
SIGNAL \multiplication_function|Data_B~4_combout\ : std_logic;
SIGNAL \multiplication_function|Data_B~5_combout\ : std_logic;
SIGNAL \multiplication_function|Mux0~0_combout\ : std_logic;
SIGNAL \multiplication_function|Data_Product[0]~0_combout\ : std_logic;
SIGNAL \multiplication_function|R[9]~0_combout\ : std_logic;
SIGNAL \Result~2_combout\ : std_logic;
SIGNAL \Result[2]~3_combout\ : std_logic;
SIGNAL \Result[0]~reg0_q\ : std_logic;
SIGNAL \Mode~0_combout\ : std_logic;
SIGNAL \Mode~q\ : std_logic;
SIGNAL \addandsub_function|eq_compar:1:sum|sum~combout\ : std_logic;
SIGNAL \multiplication_function|Data_A~1_combout\ : std_logic;
SIGNAL \multiplication_function|Data_A[4]~2_combout\ : std_logic;
SIGNAL \multiplication_function|Add0~2\ : std_logic;
SIGNAL \multiplication_function|Add0~5_sumout\ : std_logic;
SIGNAL \Result~4_combout\ : std_logic;
SIGNAL \Result[1]~reg0_q\ : std_logic;
SIGNAL \addandsub_function|eq_compar:1:sum|C_out~combout\ : std_logic;
SIGNAL \addandsub_function|eq_compar:2:sum|sum~combout\ : std_logic;
SIGNAL \multiplication_function|Data_A~3_combout\ : std_logic;
SIGNAL \multiplication_function|Add0~6\ : std_logic;
SIGNAL \multiplication_function|Add0~9_sumout\ : std_logic;
SIGNAL \Result~5_combout\ : std_logic;
SIGNAL \Result[2]~reg0_q\ : std_logic;
SIGNAL \addandsub_function|eq_compar:2:sum|C_out~combout\ : std_logic;
SIGNAL \addandsub_function|eq_compar:3:sum|sum~combout\ : std_logic;
SIGNAL \multiplication_function|Data_A~4_combout\ : std_logic;
SIGNAL \multiplication_function|Add0~10\ : std_logic;
SIGNAL \multiplication_function|Add0~13_sumout\ : std_logic;
SIGNAL \Result~6_combout\ : std_logic;
SIGNAL \Result[3]~reg0_q\ : std_logic;
SIGNAL \addandsub_function|eq_compar:3:sum|C_out~combout\ : std_logic;
SIGNAL \addandsub_function|eq_compar:4:sum|sum~combout\ : std_logic;
SIGNAL \multiplication_function|Data_A~5_combout\ : std_logic;
SIGNAL \multiplication_function|Add0~14\ : std_logic;
SIGNAL \multiplication_function|Add0~17_sumout\ : std_logic;
SIGNAL \Result~7_combout\ : std_logic;
SIGNAL \Result[4]~reg0_q\ : std_logic;
SIGNAL \addandsub_function|eq_compar:4:sum|C_out~combout\ : std_logic;
SIGNAL \Result~8_combout\ : std_logic;
SIGNAL \Result~9_combout\ : std_logic;
SIGNAL \Result~10_combout\ : std_logic;
SIGNAL \multiplication_function|Add0~18\ : std_logic;
SIGNAL \multiplication_function|Add0~21_sumout\ : std_logic;
SIGNAL \Result~11_combout\ : std_logic;
SIGNAL \Result~12_combout\ : std_logic;
SIGNAL \Result[5]~reg0_q\ : std_logic;
SIGNAL \multiplication_function|Add0~22\ : std_logic;
SIGNAL \multiplication_function|Add0~25_sumout\ : std_logic;
SIGNAL \Result~13_combout\ : std_logic;
SIGNAL \Result~14_combout\ : std_logic;
SIGNAL \Result[6]~reg0_q\ : std_logic;
SIGNAL \multiplication_function|Add0~26\ : std_logic;
SIGNAL \multiplication_function|Add0~29_sumout\ : std_logic;
SIGNAL \Result~15_combout\ : std_logic;
SIGNAL \Result[7]~reg0_q\ : std_logic;
SIGNAL \multiplication_function|Add0~30\ : std_logic;
SIGNAL \multiplication_function|Add0~33_sumout\ : std_logic;
SIGNAL \Result~16_combout\ : std_logic;
SIGNAL \Result[8]~reg0_q\ : std_logic;
SIGNAL \multiplication_function|Add0~34\ : std_logic;
SIGNAL \multiplication_function|Add0~37_sumout\ : std_logic;
SIGNAL \Result~17_combout\ : std_logic;
SIGNAL \Result[9]~reg0_q\ : std_logic;
SIGNAL \Remainder~0_combout\ : std_logic;
SIGNAL \Remainder[0]~reg0_q\ : std_logic;
SIGNAL \Remainder[1]~reg0_q\ : std_logic;
SIGNAL \Remainder[2]~reg0_q\ : std_logic;
SIGNAL \Remainder[3]~reg0_q\ : std_logic;
SIGNAL \Remainder[4]~reg0_q\ : std_logic;
SIGNAL \Remainder[5]~reg0_q\ : std_logic;
SIGNAL \Remainder[6]~reg0_q\ : std_logic;
SIGNAL \Remainder[7]~reg0_q\ : std_logic;
SIGNAL \Remainder[8]~reg0_q\ : std_logic;
SIGNAL \Remainder[9]~reg0_q\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[0]~18\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[0]~19\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[1]~14\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[1]~15\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[2]~10\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[2]~11\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[3]~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[3]~2\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[3]~3\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[4]~5_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|StageOut[33]~9_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|StageOut[33]~10_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[2]~9_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[1]~13_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|StageOut[31]~30_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|StageOut[31]~31_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[0]~17_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_5~26_cout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_5~22\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_5~18\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_5~14\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_5~10\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_5~6\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_5~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_5~5_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|StageOut[32]~17_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_5~9_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|StageOut[32]~18_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|StageOut[31]~25_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_5~13_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|StageOut[30]~34_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_5~17_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_5~21_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_6~30_cout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_6~26\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_6~22\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_6~18\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_6~14\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_6~10\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_6~6\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_6~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|StageOut[44]~8_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_6~5_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|StageOut[44]~11_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|StageOut[43]~19_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_6~9_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|StageOut[42]~24_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_6~13_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|StageOut[42]~26_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|StageOut[41]~35_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_6~17_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|StageOut[40]~40_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_6~21_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_6~25_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_7~14_cout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_7~6\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_7~34\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_7~30\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_7~26\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_7~22\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_7~18\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_7~10\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_7~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|StageOut[55]~7_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_7~9_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|StageOut[55]~12_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|StageOut[54]~16_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_7~17_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|StageOut[54]~20_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|StageOut[53]~27_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_7~21_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|StageOut[52]~33_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_7~25_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|StageOut[52]~36_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|StageOut[51]~41_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_7~29_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|StageOut[50]~45_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_7~33_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_7~5_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_8~18_cout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_8~6\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_8~10\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_8~38\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_8~34\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_8~30\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_8~26\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_8~22\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_8~14\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_8~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|StageOut[66]~6_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_8~13_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|StageOut[66]~13_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|StageOut[65]~21_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_8~21_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|StageOut[64]~23_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_8~25_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|StageOut[64]~28_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|StageOut[63]~37_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_8~29_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|StageOut[62]~39_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_8~33_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|StageOut[62]~42_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|StageOut[61]~46_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_8~37_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|StageOut[60]~3_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_8~9_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_8~5_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_9~22_cout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_9~6\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_9~10\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_9~14\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_9~42\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_9~38\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_9~34\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_9~30\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_9~26\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_9~18\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_9~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|StageOut[77]~5_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_9~17_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|StageOut[77]~14_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|StageOut[76]~15_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_9~25_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|StageOut[76]~22_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|StageOut[75]~29_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_9~29_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|StageOut[74]~32_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_9~33_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|StageOut[74]~38_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|StageOut[73]~43_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_9~37_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|StageOut[72]~44_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_9~41_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|StageOut[72]~47_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|StageOut[71]~4_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_9~13_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|StageOut[70]~1_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_9~9_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_9~5_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_10~26_cout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_10~6\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_10~10\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_10~14\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_10~18\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_10~46_cout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_10~42_cout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_10~38_cout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_10~34_cout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_10~30_cout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_10~22_cout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_10~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_10~5_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|StageOut[90]~0_combout\ : std_logic;
SIGNAL \COUT~0_combout\ : std_logic;
SIGNAL \COUT~reg0_q\ : std_logic;
SIGNAL \Op[1]~1_combout\ : std_logic;
SIGNAL \check_zero_divisor~0_combout\ : std_logic;
SIGNAL \check_zero_divisor~1_combout\ : std_logic;
SIGNAL \check_zero_divisor~2_combout\ : std_logic;
SIGNAL \check_zero_divisor~q\ : std_logic;
SIGNAL \convert_binary|int_r_2[2]~0_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_10~9_sumout\ : std_logic;
SIGNAL \convert_binary|int_data_1~0_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_10~13_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|StageOut[92]~2_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|op_10~17_sumout\ : std_logic;
SIGNAL \convert_binary|int_data_1~1_combout\ : std_logic;
SIGNAL \seven_seg_display_1|Mux6~0_combout\ : std_logic;
SIGNAL \seven_seg_display_1|Mux5~0_combout\ : std_logic;
SIGNAL \seven_seg_display_1|Mux4~0_combout\ : std_logic;
SIGNAL \seven_seg_display_1|Mux3~0_combout\ : std_logic;
SIGNAL \seven_seg_display_1|Mux2~0_combout\ : std_logic;
SIGNAL \seven_seg_display_1|Mux1~0_combout\ : std_logic;
SIGNAL \seven_seg_display_1|Mux0~0_combout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[0]~6\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[0]~7\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[1]~10\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[1]~11\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[2]~18\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[2]~19\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[3]~14\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[3]~15\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[3]~13_sumout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|StageOut[18]~22_combout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|StageOut[18]~23_combout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[2]~17_sumout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[1]~9_sumout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|StageOut[16]~17_combout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|StageOut[16]~18_combout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[0]~5_sumout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|op_5~22_cout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|op_5~6\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|op_5~10\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|op_5~14\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|op_5~26\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|op_5~18_cout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|op_5~1_sumout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|StageOut[17]~19_combout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|op_5~25_sumout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|StageOut[17]~20_combout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|StageOut[16]~13_combout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|op_5~13_sumout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|StageOut[15]~9_combout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|op_5~9_sumout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|op_5~5_sumout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|op_6~26_cout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|op_6~6\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|op_6~10\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|op_6~14\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|op_6~18\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|op_6~22_cout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|op_6~1_sumout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|StageOut[22]~12_combout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|op_6~17_sumout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|StageOut[22]~14_combout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|StageOut[21]~10_combout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|op_6~13_sumout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|StageOut[20]~5_combout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|op_6~9_sumout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|op_6~5_sumout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|op_7~26_cout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|op_7~22\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|op_7~10\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|op_7~14\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|op_7~18\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|op_7~6_cout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|op_7~1_sumout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|StageOut[27]~8_combout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|op_7~17_sumout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|StageOut[27]~11_combout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|StageOut[26]~6_combout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|op_7~13_sumout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|StageOut[25]~1_combout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|op_7~9_sumout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|op_7~21_sumout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|op_8~26_cout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|op_8~22\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|op_8~18\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|op_8~10\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|op_8~14\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|op_8~6_cout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|op_8~1_sumout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|StageOut[32]~4_combout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|op_8~13_sumout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|StageOut[32]~7_combout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|StageOut[31]~2_combout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|op_8~9_sumout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|StageOut[30]~15_combout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|op_8~17_sumout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|op_8~21_sumout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|op_9~26_cout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|op_9~22\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|op_9~18\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|op_9~14\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|op_9~10\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|op_9~6_cout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|op_9~1_sumout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|StageOut[37]~0_combout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|op_9~9_sumout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|StageOut[37]~3_combout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|StageOut[36]~16_combout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|op_9~13_sumout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|StageOut[35]~21_combout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|op_9~17_sumout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|op_9~21_sumout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|op_10~26_cout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|op_10~22_cout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|op_10~18_cout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|op_10~14_cout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|op_10~10_cout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|op_10~6_cout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|op_10~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[0]~22\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[0]~23\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[1]~18\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[1]~19\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[2]~14\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[2]~15\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[3]~10\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[3]~11\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[4]~6\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[4]~7\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[4]~5_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[3]~9_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[2]~13_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[1]~17_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[0]~21_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_6~30_cout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_6~26\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_6~22\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_6~18\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_6~14\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_6~10\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_6~6\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_6~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_6~5_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_6~9_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_6~13_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|StageOut[41]~22_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_6~17_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|StageOut[40]~27_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_6~21_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_6~25_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_7~14_cout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_7~6\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_7~34\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_7~30\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_7~26\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_7~22\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_7~18\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_7~10\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_7~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|StageOut[55]~7_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_7~9_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|StageOut[55]~8_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|StageOut[54]~12_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_7~17_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|StageOut[54]~13_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|StageOut[53]~17_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_7~21_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|StageOut[52]~21_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_7~25_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|StageOut[52]~23_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|StageOut[51]~28_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_7~29_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|StageOut[50]~32_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_7~33_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_7~5_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_8~18_cout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_8~6\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_8~10\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_8~38\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_8~34\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_8~30\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_8~26\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_8~22\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_8~14\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_8~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|StageOut[66]~6_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_8~13_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|StageOut[66]~9_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|StageOut[65]~14_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_8~21_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|StageOut[64]~16_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_8~25_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|StageOut[64]~18_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|StageOut[63]~24_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_8~29_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|StageOut[62]~26_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_8~33_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|StageOut[62]~29_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|StageOut[61]~33_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_8~37_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|StageOut[60]~3_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_8~9_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_8~5_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_9~22_cout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_9~6\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_9~10\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_9~14\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_9~42\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_9~38\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_9~34\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_9~30\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_9~26\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_9~18\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_9~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|StageOut[77]~5_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_9~17_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|StageOut[77]~10_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|StageOut[76]~11_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_9~25_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|StageOut[76]~15_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|StageOut[75]~19_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_9~29_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|StageOut[74]~20_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_9~33_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|StageOut[74]~25_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|StageOut[73]~30_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_9~37_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|StageOut[72]~31_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_9~41_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|StageOut[72]~34_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|StageOut[71]~4_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_9~13_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|StageOut[70]~1_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_9~9_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_9~5_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_10~26_cout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_10~6\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_10~10\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_10~14\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_10~18\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_10~46_cout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_10~42_cout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_10~38_cout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_10~34_cout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_10~30_cout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_10~22_cout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_10~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_10~5_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|StageOut[90]~0_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_10~9_sumout\ : std_logic;
SIGNAL \convert_binary|int_data_2~0_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_10~13_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|StageOut[92]~2_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|op_10~17_sumout\ : std_logic;
SIGNAL \convert_binary|int_data_2~1_combout\ : std_logic;
SIGNAL \seven_seg_display_2|Mux6~0_combout\ : std_logic;
SIGNAL \seven_seg_display_2|Mux5~0_combout\ : std_logic;
SIGNAL \seven_seg_display_2|Mux4~0_combout\ : std_logic;
SIGNAL \seven_seg_display_2|Mux3~0_combout\ : std_logic;
SIGNAL \seven_seg_display_2|Mux2~0_combout\ : std_logic;
SIGNAL \seven_seg_display_2|Mux1~0_combout\ : std_logic;
SIGNAL \seven_seg_display_2|Mux0~0_combout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[0]~30\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[0]~31\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[1]~26\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[1]~27\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[2]~22\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[2]~23\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[3]~18\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[3]~19\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[4]~10\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[4]~11\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[5]~14\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[5]~15\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[6]~6\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[6]~7\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[6]~5_sumout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[5]~13_sumout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|StageOut[53]~5_combout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|StageOut[53]~4_combout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[4]~9_sumout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[3]~17_sumout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|StageOut[51]~7_combout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|StageOut[51]~8_combout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[2]~21_sumout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[1]~25_sumout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|StageOut[49]~15_combout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|StageOut[49]~16_combout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[0]~29_sumout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|op_8~38_cout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|op_8~34\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|op_8~30\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|op_8~26\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|op_8~22\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|op_8~18\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|op_8~10\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|op_8~14\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|op_8~6_cout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|op_8~1_sumout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|op_8~13_sumout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|StageOut[52]~1_combout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|op_8~9_sumout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|StageOut[52]~2_combout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|StageOut[51]~9_combout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|op_8~17_sumout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|StageOut[50]~11_combout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|op_8~21_sumout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|StageOut[50]~12_combout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|StageOut[49]~17_combout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|op_8~25_sumout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|StageOut[48]~19_combout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|op_8~29_sumout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|op_8~33_sumout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|op_9~38_cout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|op_9~34\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|op_9~30\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|op_9~26\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|op_9~22\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|op_9~18\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|op_9~14\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|op_9~10\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|op_9~6_cout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|op_9~1_sumout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|StageOut[61]~0_combout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|op_9~9_sumout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|StageOut[61]~3_combout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|StageOut[60]~6_combout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|op_9~13_sumout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|StageOut[60]~10_combout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|StageOut[59]~13_combout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|op_9~17_sumout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|StageOut[58]~14_combout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|op_9~21_sumout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|StageOut[58]~18_combout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|StageOut[57]~20_combout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|op_9~25_sumout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|StageOut[56]~21_combout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|op_9~29_sumout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|op_9~33_sumout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|op_10~38_cout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|op_10~34_cout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|op_10~30_cout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|op_10~26_cout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|op_10~22_cout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|op_10~18_cout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|op_10~14_cout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|op_10~10_cout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|op_10~6_cout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|op_10~1_sumout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|op_10~1_wirecell_combout\ : std_logic;
SIGNAL \convert_binary|int_data_3~0_combout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|op_8~1_wirecell_combout\ : std_logic;
SIGNAL \convert_binary|int_data_3~1_combout\ : std_logic;
SIGNAL \seven_seg_display_3|Mux6~0_combout\ : std_logic;
SIGNAL \seven_seg_display_3|Mux5~0_combout\ : std_logic;
SIGNAL \seven_seg_display_3|Mux4~0_combout\ : std_logic;
SIGNAL \seven_seg_display_3|Mux3~0_combout\ : std_logic;
SIGNAL \seven_seg_display_3|Mux2~0_combout\ : std_logic;
SIGNAL \seven_seg_display_3|Mux1~0_combout\ : std_logic;
SIGNAL \seven_seg_display_3|Mux0~0_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[0]~18\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[0]~19\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[1]~14\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[1]~15\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[2]~10\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[2]~11\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[3]~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[3]~2\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[3]~3\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[4]~5_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|StageOut[33]~9_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|StageOut[33]~10_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[2]~9_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[1]~13_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|StageOut[31]~30_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|StageOut[31]~31_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[0]~17_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_5~26_cout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_5~22\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_5~18\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_5~14\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_5~10\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_5~6\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_5~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_5~5_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|StageOut[32]~17_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_5~9_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|StageOut[32]~18_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|StageOut[31]~25_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_5~13_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|StageOut[30]~34_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_5~17_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_5~21_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_6~30_cout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_6~26\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_6~22\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_6~18\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_6~14\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_6~10\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_6~6\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_6~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|StageOut[44]~8_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_6~5_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|StageOut[44]~11_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|StageOut[43]~19_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_6~9_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|StageOut[42]~24_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_6~13_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|StageOut[42]~26_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|StageOut[41]~35_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_6~17_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|StageOut[40]~40_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_6~21_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_6~25_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_7~14_cout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_7~6\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_7~34\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_7~30\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_7~26\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_7~22\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_7~18\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_7~10\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_7~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|StageOut[55]~7_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_7~9_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|StageOut[55]~12_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|StageOut[54]~16_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_7~17_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|StageOut[54]~20_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|StageOut[53]~27_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_7~21_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|StageOut[52]~33_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_7~25_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|StageOut[52]~36_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|StageOut[51]~41_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_7~29_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|StageOut[50]~45_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_7~33_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_7~5_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_8~18_cout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_8~6\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_8~10\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_8~38\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_8~34\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_8~30\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_8~26\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_8~22\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_8~14\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_8~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|StageOut[66]~6_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_8~13_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|StageOut[66]~13_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|StageOut[65]~21_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_8~21_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|StageOut[64]~23_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_8~25_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|StageOut[64]~28_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|StageOut[63]~37_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_8~29_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|StageOut[62]~39_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_8~33_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|StageOut[62]~42_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|StageOut[61]~46_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_8~37_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|StageOut[60]~3_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_8~9_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_8~5_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_9~22_cout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_9~6\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_9~10\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_9~14\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_9~42\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_9~38\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_9~34\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_9~30\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_9~26\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_9~18\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_9~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|StageOut[77]~5_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_9~17_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|StageOut[77]~14_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|StageOut[76]~15_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_9~25_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|StageOut[76]~22_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|StageOut[75]~29_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_9~29_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|StageOut[74]~32_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_9~33_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|StageOut[74]~38_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|StageOut[73]~43_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_9~37_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|StageOut[72]~44_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_9~41_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|StageOut[72]~47_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|StageOut[71]~4_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_9~13_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|StageOut[70]~1_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_9~9_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_9~5_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_10~26_cout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_10~6\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_10~10\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_10~14\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_10~18\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_10~46_cout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_10~42_cout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_10~38_cout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_10~34_cout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_10~30_cout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_10~22_cout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_10~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_10~5_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|StageOut[90]~0_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_10~9_sumout\ : std_logic;
SIGNAL \convert_binary|int_r_1~0_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_10~13_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|StageOut[92]~2_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|op_10~17_sumout\ : std_logic;
SIGNAL \convert_binary|int_r_1~1_combout\ : std_logic;
SIGNAL \seven_seg_display_4|Mux6~0_combout\ : std_logic;
SIGNAL \seven_seg_display_4|Mux5~0_combout\ : std_logic;
SIGNAL \seven_seg_display_4|Mux4~0_combout\ : std_logic;
SIGNAL \seven_seg_display_4|Mux3~0_combout\ : std_logic;
SIGNAL \seven_seg_display_4|Mux2~0_combout\ : std_logic;
SIGNAL \seven_seg_display_4|Mux1~0_combout\ : std_logic;
SIGNAL \seven_seg_display_4|Mux0~0_combout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[0]~6\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[0]~7\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[1]~10\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[1]~11\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[2]~18\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[2]~19\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[3]~14\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[3]~15\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[3]~13_sumout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|StageOut[18]~22_combout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|StageOut[18]~23_combout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[2]~17_sumout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[1]~9_sumout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|StageOut[16]~17_combout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|StageOut[16]~18_combout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[0]~5_sumout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|op_5~22_cout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|op_5~6\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|op_5~10\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|op_5~14\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|op_5~26\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|op_5~18_cout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|op_5~1_sumout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|StageOut[17]~19_combout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|op_5~25_sumout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|StageOut[17]~20_combout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|StageOut[16]~13_combout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|op_5~13_sumout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|StageOut[15]~9_combout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|op_5~9_sumout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|op_5~5_sumout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|op_6~26_cout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|op_6~6\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|op_6~10\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|op_6~14\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|op_6~18\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|op_6~22_cout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|op_6~1_sumout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|StageOut[22]~12_combout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|op_6~17_sumout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|StageOut[22]~14_combout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|StageOut[21]~10_combout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|op_6~13_sumout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|StageOut[20]~5_combout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|op_6~9_sumout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|op_6~5_sumout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|op_7~26_cout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|op_7~22\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|op_7~10\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|op_7~14\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|op_7~18\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|op_7~6_cout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|op_7~1_sumout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|StageOut[27]~8_combout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|op_7~17_sumout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|StageOut[27]~11_combout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|StageOut[26]~6_combout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|op_7~13_sumout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|StageOut[25]~1_combout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|op_7~9_sumout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|op_7~21_sumout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|op_8~26_cout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|op_8~22\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|op_8~18\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|op_8~10\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|op_8~14\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|op_8~6_cout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|op_8~1_sumout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|StageOut[32]~4_combout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|op_8~13_sumout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|StageOut[32]~7_combout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|StageOut[31]~2_combout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|op_8~9_sumout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|StageOut[30]~15_combout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|op_8~17_sumout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|op_8~21_sumout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|op_9~26_cout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|op_9~22\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|op_9~18\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|op_9~14\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|op_9~10\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|op_9~6_cout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|op_9~1_sumout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|StageOut[37]~0_combout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|op_9~9_sumout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|StageOut[37]~3_combout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|StageOut[36]~16_combout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|op_9~13_sumout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|StageOut[35]~21_combout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|op_9~17_sumout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|op_9~21_sumout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|op_10~26_cout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|op_10~22_cout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|op_10~18_cout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|op_10~14_cout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|op_10~10_cout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|op_10~6_cout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|op_10~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[0]~22\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[0]~23\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[1]~18\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[1]~19\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[2]~14\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[2]~15\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[3]~10\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[3]~11\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[4]~6\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[4]~7\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[4]~5_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[3]~9_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[2]~13_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[1]~17_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[0]~21_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_6~30_cout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_6~26\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_6~22\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_6~18\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_6~14\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_6~10\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_6~6\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_6~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_6~5_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_6~9_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_6~13_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|StageOut[41]~22_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_6~17_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|StageOut[40]~27_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_6~21_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_6~25_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_7~14_cout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_7~6\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_7~34\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_7~30\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_7~26\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_7~22\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_7~18\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_7~10\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_7~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|StageOut[55]~7_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_7~9_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|StageOut[55]~8_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|StageOut[54]~12_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_7~17_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|StageOut[54]~13_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|StageOut[53]~17_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_7~21_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|StageOut[52]~21_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_7~25_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|StageOut[52]~23_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|StageOut[51]~28_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_7~29_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|StageOut[50]~32_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_7~33_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_7~5_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_8~18_cout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_8~6\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_8~10\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_8~38\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_8~34\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_8~30\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_8~26\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_8~22\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_8~14\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_8~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|StageOut[66]~6_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_8~13_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|StageOut[66]~9_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|StageOut[65]~14_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_8~21_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|StageOut[64]~16_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_8~25_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|StageOut[64]~18_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|StageOut[63]~24_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_8~29_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|StageOut[62]~26_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_8~33_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|StageOut[62]~29_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|StageOut[61]~33_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_8~37_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|StageOut[60]~3_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_8~9_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_8~5_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_9~22_cout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_9~6\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_9~10\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_9~14\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_9~42\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_9~38\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_9~34\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_9~30\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_9~26\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_9~18\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_9~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|StageOut[77]~5_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_9~17_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|StageOut[77]~10_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|StageOut[76]~11_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_9~25_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|StageOut[76]~15_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|StageOut[75]~19_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_9~29_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|StageOut[74]~20_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_9~33_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|StageOut[74]~25_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|StageOut[73]~30_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_9~37_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|StageOut[72]~31_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_9~41_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|StageOut[72]~34_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|StageOut[71]~4_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_9~13_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|StageOut[70]~1_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_9~9_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_9~5_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_10~26_cout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_10~6\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_10~10\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_10~14\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_10~18\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_10~46_cout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_10~42_cout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_10~38_cout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_10~34_cout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_10~30_cout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_10~22_cout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_10~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_10~5_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|StageOut[90]~0_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_10~9_sumout\ : std_logic;
SIGNAL \convert_binary|int_r_2~1_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_10~13_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|StageOut[92]~2_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|op_10~17_sumout\ : std_logic;
SIGNAL \convert_binary|int_r_2~2_combout\ : std_logic;
SIGNAL \seven_seg_display_5|Mux6~0_combout\ : std_logic;
SIGNAL \seven_seg_display_5|Mux5~0_combout\ : std_logic;
SIGNAL \seven_seg_display_5|Mux4~0_combout\ : std_logic;
SIGNAL \seven_seg_display_5|Mux3~0_combout\ : std_logic;
SIGNAL \seven_seg_display_5|Mux2~0_combout\ : std_logic;
SIGNAL \seven_seg_display_5|Mux1~0_combout\ : std_logic;
SIGNAL \seven_seg_display_5|Mux0~0_combout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[0]~30\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[0]~31\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[1]~26\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[1]~27\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[2]~22\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[2]~23\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[3]~18\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[3]~19\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[4]~10\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[4]~11\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[5]~14\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[5]~15\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[6]~6\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[6]~7\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[6]~5_sumout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[5]~13_sumout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|StageOut[53]~5_combout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|StageOut[53]~4_combout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[4]~9_sumout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[3]~17_sumout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|StageOut[51]~7_combout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|StageOut[51]~8_combout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[2]~21_sumout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[1]~25_sumout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|StageOut[49]~15_combout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|StageOut[49]~16_combout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[0]~29_sumout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|op_8~38_cout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|op_8~34\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|op_8~30\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|op_8~26\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|op_8~22\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|op_8~18\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|op_8~10\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|op_8~14\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|op_8~6_cout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|op_8~1_sumout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|op_8~13_sumout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|StageOut[52]~1_combout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|op_8~9_sumout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|StageOut[52]~2_combout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|StageOut[51]~9_combout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|op_8~17_sumout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|StageOut[50]~11_combout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|op_8~21_sumout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|StageOut[50]~12_combout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|StageOut[49]~17_combout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|op_8~25_sumout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|StageOut[48]~19_combout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|op_8~29_sumout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|op_8~33_sumout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|op_9~38_cout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|op_9~34\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|op_9~30\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|op_9~26\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|op_9~22\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|op_9~18\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|op_9~14\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|op_9~10\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|op_9~6_cout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|op_9~1_sumout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|StageOut[61]~0_combout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|op_9~9_sumout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|StageOut[61]~3_combout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|StageOut[60]~6_combout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|op_9~13_sumout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|StageOut[60]~10_combout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|StageOut[59]~13_combout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|op_9~17_sumout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|StageOut[58]~14_combout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|op_9~21_sumout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|StageOut[58]~18_combout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|StageOut[57]~20_combout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|op_9~25_sumout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|StageOut[56]~21_combout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|op_9~29_sumout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|op_9~33_sumout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|op_10~38_cout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|op_10~34_cout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|op_10~30_cout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|op_10~26_cout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|op_10~22_cout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|op_10~18_cout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|op_10~14_cout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|op_10~10_cout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|op_10~6_cout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|op_10~1_sumout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|op_10~1_wirecell_combout\ : std_logic;
SIGNAL \convert_binary|int_r_3~0_combout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|op_8~1_wirecell_combout\ : std_logic;
SIGNAL \convert_binary|int_r_3~1_combout\ : std_logic;
SIGNAL \seven_seg_display_6|Mux6~0_combout\ : std_logic;
SIGNAL \seven_seg_display_6|Mux5~0_combout\ : std_logic;
SIGNAL \seven_seg_display_6|Mux4~0_combout\ : std_logic;
SIGNAL \seven_seg_display_6|Mux3~0_combout\ : std_logic;
SIGNAL \seven_seg_display_6|Mux2~0_combout\ : std_logic;
SIGNAL \seven_seg_display_6|Mux1~0_combout\ : std_logic;
SIGNAL \seven_seg_display_6|Mux0~0_combout\ : std_logic;
SIGNAL \DONE_main~0_combout\ : std_logic;
SIGNAL \DONE_main~reg0_q\ : std_logic;
SIGNAL \multiplication_function|Data_B\ : std_logic_vector(4 DOWNTO 0);
SIGNAL \convert_binary|int_data_1\ : std_logic_vector(31 DOWNTO 0);
SIGNAL \convert_binary|int_data_2\ : std_logic_vector(31 DOWNTO 0);
SIGNAL \multiplication_function|Data_Product\ : std_logic_vector(9 DOWNTO 0);
SIGNAL \multiplication_function|R\ : std_logic_vector(9 DOWNTO 0);
SIGNAL \convert_binary|int_data_3\ : std_logic_vector(31 DOWNTO 0);
SIGNAL \convert_binary|int_r_1\ : std_logic_vector(31 DOWNTO 0);
SIGNAL \multiplication_function|bit_counter\ : std_logic_vector(31 DOWNTO 0);
SIGNAL \division_function|bit_counter\ : std_logic_vector(31 DOWNTO 0);
SIGNAL \seven_seg_display_2|seven_seg\ : std_logic_vector(6 DOWNTO 0);
SIGNAL \convert_binary|int_r_2\ : std_logic_vector(31 DOWNTO 0);
SIGNAL \convert_binary|int_r_3\ : std_logic_vector(31 DOWNTO 0);
SIGNAL \division_function|Remainder\ : std_logic_vector(10 DOWNTO 0);
SIGNAL \multiplication_function|Data_A\ : std_logic_vector(9 DOWNTO 0);
SIGNAL \division_function|Divisor\ : std_logic_vector(10 DOWNTO 0);
SIGNAL \seven_seg_display_1|seven_seg\ : std_logic_vector(6 DOWNTO 0);
SIGNAL \seven_seg_display_3|seven_seg\ : std_logic_vector(6 DOWNTO 0);
SIGNAL \seven_seg_display_4|seven_seg\ : std_logic_vector(6 DOWNTO 0);
SIGNAL \seven_seg_display_5|seven_seg\ : std_logic_vector(6 DOWNTO 0);
SIGNAL \seven_seg_display_6|seven_seg\ : std_logic_vector(6 DOWNTO 0);
SIGNAL \division_function|Q\ : std_logic_vector(4 DOWNTO 0);
SIGNAL Data_A_aas : std_logic_vector(4 DOWNTO 0);
SIGNAL Data_B_aas : std_logic_vector(4 DOWNTO 0);
SIGNAL \division_function|R\ : std_logic_vector(10 DOWNTO 0);
SIGNAL \division_function|Quotient\ : std_logic_vector(4 DOWNTO 0);
SIGNAL Op : std_logic_vector(1 DOWNTO 0);
SIGNAL Remainder_input : std_logic_vector(9 DOWNTO 0);
SIGNAL \ALT_INV_Result[9]~reg0_q\ : std_logic;
SIGNAL \ALT_INV_Result[8]~reg0_q\ : std_logic;
SIGNAL \ALT_INV_Result[7]~reg0_q\ : std_logic;
SIGNAL \ALT_INV_Result[6]~reg0_q\ : std_logic;
SIGNAL \ALT_INV_Result[5]~reg0_q\ : std_logic;
SIGNAL \ALT_INV_Result[4]~reg0_q\ : std_logic;
SIGNAL \ALT_INV_Result[3]~reg0_q\ : std_logic;
SIGNAL \ALT_INV_Result[2]~reg0_q\ : std_logic;
SIGNAL \ALT_INV_Result[1]~reg0_q\ : std_logic;
SIGNAL \ALT_INV_Result[0]~reg0_q\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_9~33_sumout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_9~33_sumout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_9~29_sumout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_8~33_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_6~25_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_6~25_sumout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_9~29_sumout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_8~33_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_6~25_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_6~25_sumout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[0]~29_sumout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_9~25_sumout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_8~29_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_7~33_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_8~37_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_9~41_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[0]~21_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_6~21_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_7~33_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_8~37_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_9~41_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_5~21_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_6~21_sumout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[0]~29_sumout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_9~25_sumout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_8~29_sumout\ : std_logic;
SIGNAL \multiplication_function|ALT_INV_Data_Product\ : std_logic_vector(9 DOWNTO 0);
SIGNAL \division_function|ALT_INV_state.s1~q\ : std_logic;
SIGNAL \division_function|ALT_INV_bit_counter\ : std_logic_vector(31 DOWNTO 0);
SIGNAL \convert_binary|ALT_INV_int_r_3\ : std_logic_vector(3 DOWNTO 0);
SIGNAL \convert_binary|ALT_INV_int_r_2\ : std_logic_vector(3 DOWNTO 0);
SIGNAL \convert_binary|ALT_INV_int_r_1\ : std_logic_vector(3 DOWNTO 0);
SIGNAL \convert_binary|ALT_INV_int_data_3\ : std_logic_vector(3 DOWNTO 0);
SIGNAL \convert_binary|ALT_INV_int_data_2\ : std_logic_vector(3 DOWNTO 0);
SIGNAL \convert_binary|ALT_INV_int_data_1\ : std_logic_vector(3 DOWNTO 0);
SIGNAL \ALT_INV_state~q\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_7~5_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_10~13_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_9~9_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_8~5_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_10~9_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_9~5_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_10~5_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_10~1_sumout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[7]~1_sumout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_10~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_10~17_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_9~13_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_8~9_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_7~5_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_10~13_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_9~9_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_8~5_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_10~9_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_9~5_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_10~5_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_10~1_sumout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_10~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_10~17_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_9~13_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_8~9_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_7~5_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_10~13_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_9~9_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_8~5_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_10~9_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_9~5_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_10~5_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_10~1_sumout\ : std_logic;
SIGNAL \division_function|ALT_INV_Remainder\ : std_logic_vector(10 DOWNTO 0);
SIGNAL \multiplication_function|ALT_INV_bit_counter\ : std_logic_vector(31 DOWNTO 0);
SIGNAL \ALT_INV_Start_division~q\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[7]~1_sumout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_10~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_10~17_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_9~13_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_8~9_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_7~5_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_10~13_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_9~9_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_8~5_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_10~9_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_9~5_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_10~5_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_10~1_sumout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_10~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_10~17_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_9~13_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_8~9_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_8~13_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_9~17_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_7~9_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_8~13_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_9~17_sumout\ : std_logic;
SIGNAL \division_function|ALT_INV_Add0~17_sumout\ : std_logic;
SIGNAL \division_function|ALT_INV_Add0~13_sumout\ : std_logic;
SIGNAL \division_function|ALT_INV_Add0~9_sumout\ : std_logic;
SIGNAL \division_function|ALT_INV_Add0~5_sumout\ : std_logic;
SIGNAL \division_function|ALT_INV_Add0~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_7~17_sumout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[1]~9_sumout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_6~17_sumout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_5~13_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_8~21_sumout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_5~9_sumout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[0]~5_sumout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~1_sumout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_7~17_sumout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_6~13_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_9~25_sumout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_6~9_sumout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_5~5_sumout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_8~13_sumout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_7~13_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[4]~5_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[5]~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_6~5_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_7~9_sumout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_6~5_sumout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_9~9_sumout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_8~9_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_7~17_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_8~21_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_9~25_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~5_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[3]~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_5~5_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_6~5_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\ : std_logic;
SIGNAL \division_function|ALT_INV_Divisor\ : std_logic_vector(9 DOWNTO 0);
SIGNAL \multiplication_function|ALT_INV_Data_A\ : std_logic_vector(9 DOWNTO 0);
SIGNAL \division_function|ALT_INV_Add0~41_sumout\ : std_logic;
SIGNAL \division_function|ALT_INV_Add1~41_sumout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[6]~5_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_7~9_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_8~13_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_9~17_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_7~9_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_8~13_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_9~17_sumout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[6]~5_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_7~9_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_9~29_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[3]~9_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_6~9_sumout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_7~21_sumout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_9~13_sumout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_8~17_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_7~21_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_8~25_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_9~29_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[2]~9_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_5~9_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_6~9_sumout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_8~13_sumout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[5]~13_sumout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[4]~9_sumout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_9~9_sumout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_8~9_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_7~17_sumout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[1]~9_sumout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_6~17_sumout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_5~13_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_8~21_sumout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_5~9_sumout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[0]~5_sumout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~1_sumout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_7~17_sumout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_6~13_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_9~25_sumout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_6~9_sumout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_5~5_sumout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_8~13_sumout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_7~13_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[4]~5_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[5]~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_6~5_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_7~9_sumout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_6~5_sumout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_9~9_sumout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_8~9_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_7~17_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_8~21_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_9~25_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~5_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[3]~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_5~5_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_6~5_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_8~13_sumout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[5]~13_sumout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[4]~9_sumout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_9~9_sumout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_8~9_sumout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[2]~17_sumout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_9~17_sumout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_8~21_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_7~25_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_8~29_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_9~33_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[1]~13_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_5~13_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_6~13_sumout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[2]~21_sumout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_9~17_sumout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_8~21_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_7~25_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_8~29_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_9~33_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[2]~13_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_6~13_sumout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_5~25_sumout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[2]~17_sumout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_9~17_sumout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_8~21_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_7~25_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_8~29_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_9~33_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[1]~13_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_5~13_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_6~13_sumout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[3]~17_sumout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_9~13_sumout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_8~17_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_7~21_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_8~25_sumout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[3]~13_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_9~29_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[3]~9_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_6~9_sumout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_7~21_sumout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_9~13_sumout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_8~17_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_7~21_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_8~25_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_9~29_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[2]~9_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_5~9_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_6~9_sumout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[3]~17_sumout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_9~13_sumout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_8~17_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_7~21_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_8~25_sumout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[3]~13_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_7~33_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_8~37_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_9~41_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[0]~21_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_6~21_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_7~33_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_8~37_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_9~41_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_5~21_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_6~21_sumout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[1]~25_sumout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_9~21_sumout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_8~25_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_7~29_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_8~33_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_9~37_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[1]~17_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_6~17_sumout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_9~21_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_7~29_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_8~33_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_9~37_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[0]~17_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_5~17_sumout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_6~17_sumout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[1]~25_sumout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_9~21_sumout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_8~25_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_7~29_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_8~33_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_9~37_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[1]~17_sumout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_6~17_sumout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_9~21_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_7~29_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_8~33_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_9~37_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[0]~17_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_5~17_sumout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_6~17_sumout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[2]~21_sumout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_9~17_sumout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_8~21_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_7~25_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_8~29_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_9~33_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[2]~13_sumout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_6~13_sumout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_5~25_sumout\ : std_logic;
SIGNAL \multiplication_function|ALT_INV_R\ : std_logic_vector(9 DOWNTO 0);
SIGNAL \ALT_INV_Result~11_combout\ : std_logic;
SIGNAL \ALT_INV_Result~10_combout\ : std_logic;
SIGNAL \ALT_INV_Result~9_combout\ : std_logic;
SIGNAL \ALT_INV_Result~8_combout\ : std_logic;
SIGNAL \addandsub_function|eq_compar:4:sum|ALT_INV_C_out~combout\ : std_logic;
SIGNAL \addandsub_function|eq_compar:4:sum|ALT_INV_sum~combout\ : std_logic;
SIGNAL ALT_INV_Data_B_aas : std_logic_vector(4 DOWNTO 0);
SIGNAL ALT_INV_Data_A_aas : std_logic_vector(4 DOWNTO 0);
SIGNAL \addandsub_function|eq_compar:3:sum|ALT_INV_C_out~combout\ : std_logic;
SIGNAL \division_function|ALT_INV_Q\ : std_logic_vector(4 DOWNTO 0);
SIGNAL \addandsub_function|eq_compar:3:sum|ALT_INV_sum~combout\ : std_logic;
SIGNAL \addandsub_function|eq_compar:2:sum|ALT_INV_C_out~combout\ : std_logic;
SIGNAL \addandsub_function|eq_compar:2:sum|ALT_INV_sum~combout\ : std_logic;
SIGNAL \addandsub_function|eq_compar:1:sum|ALT_INV_C_out~combout\ : std_logic;
SIGNAL \addandsub_function|eq_compar:1:sum|ALT_INV_sum~combout\ : std_logic;
SIGNAL \ALT_INV_Mode~q\ : std_logic;
SIGNAL \ALT_INV_Result[2]~1_combout\ : std_logic;
SIGNAL \ALT_INV_Result[2]~0_combout\ : std_logic;
SIGNAL \ALT_INV_DONE_main~reg0_q\ : std_logic;
SIGNAL \ALT_INV_COUT~reg0_q\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[44]~8_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[55]~7_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[66]~6_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[77]~5_combout\ : std_logic;
SIGNAL \ALT_INV_check_zero_divisor~1_combout\ : std_logic;
SIGNAL \ALT_INV_check_zero_divisor~0_combout\ : std_logic;
SIGNAL \multiplication_function|ALT_INV_Mux0~0_combout\ : std_logic;
SIGNAL \multiplication_function|ALT_INV_Data_B\ : std_logic_vector(4 DOWNTO 0);
SIGNAL \division_function|ALT_INV_Selector11~0_combout\ : std_logic;
SIGNAL \division_function|ALT_INV_state.s2~q\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[71]~4_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[60]~3_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[70]~1_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[71]~4_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[60]~3_combout\ : std_logic;
SIGNAL ALT_INV_Remainder_input : std_logic_vector(9 DOWNTO 0);
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[70]~1_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[71]~4_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[60]~3_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[70]~1_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[71]~4_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[60]~3_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[70]~1_combout\ : std_logic;
SIGNAL \convert_binary|ALT_INV_int_r_2[2]~0_combout\ : std_logic;
SIGNAL \ALT_INV_check_zero_divisor~q\ : std_logic;
SIGNAL ALT_INV_Op : std_logic_vector(1 DOWNTO 0);
SIGNAL \multiplication_function|ALT_INV_LessThan0~5_combout\ : std_logic;
SIGNAL \multiplication_function|ALT_INV_LessThan0~4_combout\ : std_logic;
SIGNAL \multiplication_function|ALT_INV_LessThan0~3_combout\ : std_logic;
SIGNAL \multiplication_function|ALT_INV_LessThan0~2_combout\ : std_logic;
SIGNAL \multiplication_function|ALT_INV_LessThan0~1_combout\ : std_logic;
SIGNAL \multiplication_function|ALT_INV_LessThan0~0_combout\ : std_logic;
SIGNAL \multiplication_function|ALT_INV_state~q\ : std_logic;
SIGNAL \division_function|ALT_INV_LessThan0~5_combout\ : std_logic;
SIGNAL \division_function|ALT_INV_LessThan0~4_combout\ : std_logic;
SIGNAL \division_function|ALT_INV_LessThan0~3_combout\ : std_logic;
SIGNAL \division_function|ALT_INV_LessThan0~2_combout\ : std_logic;
SIGNAL \division_function|ALT_INV_LessThan0~1_combout\ : std_logic;
SIGNAL \division_function|ALT_INV_LessThan0~0_combout\ : std_logic;
SIGNAL \division_function|ALT_INV_state.s0~q\ : std_logic;
SIGNAL \multiplication_function|ALT_INV_DONE~q\ : std_logic;
SIGNAL \division_function|ALT_INV_DONE~q\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[51]~9_combout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[51]~8_combout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[51]~7_combout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[60]~6_combout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[16]~18_combout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[16]~17_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[76]~15_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[65]~14_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[54]~13_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[54]~12_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[76]~11_combout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[36]~16_combout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[30]~15_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[76]~22_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[65]~21_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[54]~20_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[43]~19_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[32]~18_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[32]~17_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[54]~16_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[76]~15_combout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[60]~10_combout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[51]~9_combout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[51]~8_combout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[51]~7_combout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[60]~6_combout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[16]~18_combout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[16]~17_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[76]~15_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[65]~14_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[54]~13_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[54]~12_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[76]~11_combout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[36]~16_combout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[30]~15_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[76]~22_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[65]~21_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[54]~20_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[43]~19_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[32]~18_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[32]~17_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[54]~16_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[76]~15_combout\ : std_logic;
SIGNAL \division_function|ALT_INV_Selector11~1_combout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[53]~5_combout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[53]~4_combout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[61]~3_combout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[52]~2_combout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[52]~1_combout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[61]~0_combout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[22]~14_combout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[16]~13_combout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[22]~12_combout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[27]~11_combout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[21]~10_combout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[15]~9_combout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[27]~8_combout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[32]~7_combout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[26]~6_combout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[20]~5_combout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[32]~4_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[77]~10_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[66]~9_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[55]~8_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[55]~7_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[66]~6_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[77]~5_combout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[37]~3_combout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[31]~2_combout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[25]~1_combout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[37]~0_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[77]~14_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[66]~13_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[55]~12_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[44]~11_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[33]~10_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[33]~9_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[44]~8_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[55]~7_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[66]~6_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[77]~5_combout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[53]~5_combout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[53]~4_combout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[61]~3_combout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[52]~2_combout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[52]~1_combout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[61]~0_combout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[22]~14_combout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[16]~13_combout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[22]~12_combout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[27]~11_combout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[21]~10_combout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[15]~9_combout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[27]~8_combout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[32]~7_combout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[26]~6_combout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[20]~5_combout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[32]~4_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[77]~10_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[66]~9_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[55]~8_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[55]~7_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[66]~6_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[77]~5_combout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[37]~3_combout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[31]~2_combout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[25]~1_combout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[37]~0_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[77]~14_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[66]~13_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[55]~12_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[44]~11_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[33]~10_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[33]~9_combout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[56]~21_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[72]~34_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[61]~33_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[50]~32_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[72]~31_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[72]~47_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[61]~46_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[50]~45_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[72]~44_combout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[56]~21_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[72]~34_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[61]~33_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[50]~32_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[72]~31_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[72]~47_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[61]~46_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[50]~45_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[72]~44_combout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[57]~20_combout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[48]~19_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[73]~30_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[62]~29_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[51]~28_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[40]~27_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[62]~26_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[73]~43_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[62]~42_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[51]~41_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[40]~40_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[62]~39_combout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[57]~20_combout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[48]~19_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[73]~30_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[62]~29_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[51]~28_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[40]~27_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[62]~26_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[73]~43_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[62]~42_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[51]~41_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[40]~40_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[62]~39_combout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[58]~18_combout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[49]~17_combout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[49]~16_combout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[49]~15_combout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[58]~14_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[74]~25_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[63]~24_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[52]~23_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[41]~22_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[52]~21_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[74]~20_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[74]~38_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[63]~37_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[52]~36_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[41]~35_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[30]~34_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[52]~33_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[74]~32_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[31]~31_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[31]~30_combout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[58]~18_combout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[49]~17_combout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[49]~16_combout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[49]~15_combout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[58]~14_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[74]~25_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[63]~24_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[52]~23_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[41]~22_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[52]~21_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[74]~20_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[74]~38_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[63]~37_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[52]~36_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[41]~35_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[30]~34_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[52]~33_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[74]~32_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[31]~31_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[31]~30_combout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[59]~13_combout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[50]~12_combout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[50]~11_combout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[18]~23_combout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[18]~22_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[75]~19_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[64]~18_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[53]~17_combout\ : std_logic;
SIGNAL \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[64]~16_combout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[35]~21_combout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[17]~20_combout\ : std_logic;
SIGNAL \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[17]~19_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[75]~29_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[64]~28_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[53]~27_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[42]~26_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[31]~25_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[42]~24_combout\ : std_logic;
SIGNAL \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[64]~23_combout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[59]~13_combout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[50]~12_combout\ : std_logic;
SIGNAL \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[50]~11_combout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[18]~23_combout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[18]~22_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[75]~19_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[64]~18_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[53]~17_combout\ : std_logic;
SIGNAL \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[64]~16_combout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[35]~21_combout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[17]~20_combout\ : std_logic;
SIGNAL \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[17]~19_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[75]~29_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[64]~28_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[53]~27_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[42]~26_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[31]~25_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[42]~24_combout\ : std_logic;
SIGNAL \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[64]~23_combout\ : std_logic;
SIGNAL \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[60]~10_combout\ : std_logic;
SIGNAL \ALT_INV_input_B[0]~input_o\ : std_logic;
SIGNAL \ALT_INV_input_A[0]~input_o\ : std_logic;
SIGNAL \ALT_INV_input_B[1]~input_o\ : std_logic;
SIGNAL \ALT_INV_input_A[1]~input_o\ : std_logic;
SIGNAL \ALT_INV_input_B[2]~input_o\ : std_logic;
SIGNAL \ALT_INV_input_A[2]~input_o\ : std_logic;
SIGNAL \ALT_INV_input_B[3]~input_o\ : std_logic;
SIGNAL \ALT_INV_input_A[3]~input_o\ : std_logic;
SIGNAL \ALT_INV_input_B[4]~input_o\ : std_logic;
SIGNAL \ALT_INV_input_A[4]~input_o\ : std_logic;
SIGNAL \ALT_INV_START_main~input_o\ : std_logic;
SIGNAL \ALT_INV_RST_main~input_o\ : std_logic;
SIGNAL \ALT_INV_Operation[1]~input_o\ : std_logic;
SIGNAL \ALT_INV_Operation[0]~input_o\ : std_logic;

BEGIN

ww_CLK_main <= CLK_main;
ww_RST_main <= RST_main;
ww_START_main <= START_main;
ww_input_A <= input_A;
ww_input_B <= input_B;
ww_Operation <= Operation;
Result <= ww_Result;
Remainder <= ww_Remainder;
sevenseg_digit_0 <= ww_sevenseg_digit_0;
sevenseg_digit_1 <= ww_sevenseg_digit_1;
sevenseg_digit_2 <= ww_sevenseg_digit_2;
sevenseg_digit_3 <= ww_sevenseg_digit_3;
sevenseg_digit_4 <= ww_sevenseg_digit_4;
sevenseg_digit_5 <= ww_sevenseg_digit_5;
COUT <= ww_COUT;
DONE_main <= ww_DONE_main;
ww_devoe <= devoe;
ww_devclrn <= devclrn;
ww_devpor <= devpor;
\ALT_INV_Result[9]~reg0_q\ <= NOT \Result[9]~reg0_q\;
\ALT_INV_Result[8]~reg0_q\ <= NOT \Result[8]~reg0_q\;
\ALT_INV_Result[7]~reg0_q\ <= NOT \Result[7]~reg0_q\;
\ALT_INV_Result[6]~reg0_q\ <= NOT \Result[6]~reg0_q\;
\ALT_INV_Result[5]~reg0_q\ <= NOT \Result[5]~reg0_q\;
\ALT_INV_Result[4]~reg0_q\ <= NOT \Result[4]~reg0_q\;
\ALT_INV_Result[3]~reg0_q\ <= NOT \Result[3]~reg0_q\;
\ALT_INV_Result[2]~reg0_q\ <= NOT \Result[2]~reg0_q\;
\ALT_INV_Result[1]~reg0_q\ <= NOT \Result[1]~reg0_q\;
\ALT_INV_Result[0]~reg0_q\ <= NOT \Result[0]~reg0_q\;
\convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_9~33_sumout\ <= NOT \convert_binary|Div3|auto_generated|divider|divider|op_9~33_sumout\;
\convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_9~33_sumout\ <= NOT \convert_binary|Div1|auto_generated|divider|divider|op_9~33_sumout\;
\convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_9~29_sumout\ <= NOT \convert_binary|Div3|auto_generated|divider|divider|op_9~29_sumout\;
\convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_8~33_sumout\ <= NOT \convert_binary|Div3|auto_generated|divider|divider|op_8~33_sumout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_6~25_sumout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|op_6~25_sumout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_6~25_sumout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|op_6~25_sumout\;
\convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_9~29_sumout\ <= NOT \convert_binary|Div1|auto_generated|divider|divider|op_9~29_sumout\;
\convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_8~33_sumout\ <= NOT \convert_binary|Div1|auto_generated|divider|divider|op_8~33_sumout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_6~25_sumout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|op_6~25_sumout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_6~25_sumout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|op_6~25_sumout\;
\convert_binary|Div3|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[0]~29_sumout\ <= NOT \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[0]~29_sumout\;
\convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_9~25_sumout\ <= NOT \convert_binary|Div3|auto_generated|divider|divider|op_9~25_sumout\;
\convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_8~29_sumout\ <= NOT \convert_binary|Div3|auto_generated|divider|divider|op_8~29_sumout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_7~33_sumout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|op_7~33_sumout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_8~37_sumout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|op_8~37_sumout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_9~41_sumout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|op_9~41_sumout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[0]~21_sumout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[0]~21_sumout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_6~21_sumout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|op_6~21_sumout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_7~33_sumout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|op_7~33_sumout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_8~37_sumout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|op_8~37_sumout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_9~41_sumout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|op_9~41_sumout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_5~21_sumout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|op_5~21_sumout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_6~21_sumout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|op_6~21_sumout\;
\convert_binary|Div1|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[0]~29_sumout\ <= NOT \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[0]~29_sumout\;
\convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_9~25_sumout\ <= NOT \convert_binary|Div1|auto_generated|divider|divider|op_9~25_sumout\;
\convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_8~29_sumout\ <= NOT \convert_binary|Div1|auto_generated|divider|divider|op_8~29_sumout\;
\multiplication_function|ALT_INV_Data_Product\(0) <= NOT \multiplication_function|Data_Product\(0);
\division_function|ALT_INV_state.s1~q\ <= NOT \division_function|state.s1~q\;
\division_function|ALT_INV_bit_counter\(3) <= NOT \division_function|bit_counter\(3);
\division_function|ALT_INV_bit_counter\(22) <= NOT \division_function|bit_counter\(22);
\division_function|ALT_INV_bit_counter\(21) <= NOT \division_function|bit_counter\(21);
\division_function|ALT_INV_bit_counter\(24) <= NOT \division_function|bit_counter\(24);
\division_function|ALT_INV_bit_counter\(6) <= NOT \division_function|bit_counter\(6);
\division_function|ALT_INV_bit_counter\(20) <= NOT \division_function|bit_counter\(20);
\division_function|ALT_INV_bit_counter\(19) <= NOT \division_function|bit_counter\(19);
\division_function|ALT_INV_bit_counter\(18) <= NOT \division_function|bit_counter\(18);
\division_function|ALT_INV_bit_counter\(17) <= NOT \division_function|bit_counter\(17);
\division_function|ALT_INV_bit_counter\(16) <= NOT \division_function|bit_counter\(16);
\division_function|ALT_INV_bit_counter\(2) <= NOT \division_function|bit_counter\(2);
\division_function|ALT_INV_bit_counter\(1) <= NOT \division_function|bit_counter\(1);
\division_function|ALT_INV_bit_counter\(9) <= NOT \division_function|bit_counter\(9);
\division_function|ALT_INV_bit_counter\(8) <= NOT \division_function|bit_counter\(8);
\division_function|ALT_INV_bit_counter\(7) <= NOT \division_function|bit_counter\(7);
\division_function|ALT_INV_bit_counter\(23) <= NOT \division_function|bit_counter\(23);
\division_function|ALT_INV_bit_counter\(5) <= NOT \division_function|bit_counter\(5);
\division_function|ALT_INV_bit_counter\(4) <= NOT \division_function|bit_counter\(4);
\division_function|ALT_INV_bit_counter\(27) <= NOT \division_function|bit_counter\(27);
\division_function|ALT_INV_bit_counter\(10) <= NOT \division_function|bit_counter\(10);
\division_function|ALT_INV_bit_counter\(14) <= NOT \division_function|bit_counter\(14);
\division_function|ALT_INV_bit_counter\(13) <= NOT \division_function|bit_counter\(13);
\division_function|ALT_INV_bit_counter\(12) <= NOT \division_function|bit_counter\(12);
\division_function|ALT_INV_bit_counter\(11) <= NOT \division_function|bit_counter\(11);
\division_function|ALT_INV_bit_counter\(30) <= NOT \division_function|bit_counter\(30);
\division_function|ALT_INV_bit_counter\(29) <= NOT \division_function|bit_counter\(29);
\division_function|ALT_INV_bit_counter\(28) <= NOT \division_function|bit_counter\(28);
\division_function|ALT_INV_bit_counter\(15) <= NOT \division_function|bit_counter\(15);
\division_function|ALT_INV_bit_counter\(25) <= NOT \division_function|bit_counter\(25);
\division_function|ALT_INV_bit_counter\(26) <= NOT \division_function|bit_counter\(26);
\division_function|ALT_INV_bit_counter\(31) <= NOT \division_function|bit_counter\(31);
\convert_binary|ALT_INV_int_r_3\(2) <= NOT \convert_binary|int_r_3\(2);
\convert_binary|ALT_INV_int_r_3\(0) <= NOT \convert_binary|int_r_3\(0);
\convert_binary|ALT_INV_int_r_2\(2) <= NOT \convert_binary|int_r_2\(2);
\convert_binary|ALT_INV_int_r_2\(0) <= NOT \convert_binary|int_r_2\(0);
\convert_binary|ALT_INV_int_r_1\(2) <= NOT \convert_binary|int_r_1\(2);
\convert_binary|ALT_INV_int_r_1\(0) <= NOT \convert_binary|int_r_1\(0);
\convert_binary|ALT_INV_int_data_3\(2) <= NOT \convert_binary|int_data_3\(2);
\convert_binary|ALT_INV_int_data_3\(0) <= NOT \convert_binary|int_data_3\(0);
\convert_binary|ALT_INV_int_data_2\(2) <= NOT \convert_binary|int_data_2\(2);
\convert_binary|ALT_INV_int_data_2\(0) <= NOT \convert_binary|int_data_2\(0);
\convert_binary|ALT_INV_int_data_1\(2) <= NOT \convert_binary|int_data_1\(2);
\convert_binary|ALT_INV_int_data_1\(0) <= NOT \convert_binary|int_data_1\(0);
\ALT_INV_state~q\ <= NOT \state~q\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_7~5_sumout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|op_7~5_sumout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|op_7~1_sumout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_10~13_sumout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|op_10~13_sumout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_9~9_sumout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|op_9~9_sumout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_8~5_sumout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|op_8~5_sumout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|op_8~1_sumout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_10~9_sumout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|op_10~9_sumout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_9~5_sumout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|op_9~5_sumout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|op_9~1_sumout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_10~5_sumout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|op_10~5_sumout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_10~1_sumout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|op_10~1_sumout\;
\convert_binary|Div1|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[7]~1_sumout\ <= NOT \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\;
\convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\ <= NOT \convert_binary|Div1|auto_generated|divider|divider|op_8~1_sumout\;
\convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\ <= NOT \convert_binary|Div1|auto_generated|divider|divider|op_9~1_sumout\;
\convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_10~1_sumout\ <= NOT \convert_binary|Div1|auto_generated|divider|divider|op_10~1_sumout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_10~17_sumout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|op_10~17_sumout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_9~13_sumout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|op_9~13_sumout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_8~9_sumout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|op_8~9_sumout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_7~5_sumout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|op_7~5_sumout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|op_7~1_sumout\;
\convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\ <= NOT \convert_binary|Div0|auto_generated|divider|divider|op_7~1_sumout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_10~13_sumout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|op_10~13_sumout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_9~9_sumout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|op_9~9_sumout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_8~5_sumout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|op_8~5_sumout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|op_8~1_sumout\;
\convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\ <= NOT \convert_binary|Div0|auto_generated|divider|divider|op_8~1_sumout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_10~9_sumout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|op_10~9_sumout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_9~5_sumout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|op_9~5_sumout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|op_9~1_sumout\;
\convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\ <= NOT \convert_binary|Div0|auto_generated|divider|divider|op_9~1_sumout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_10~5_sumout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|op_10~5_sumout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_10~1_sumout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|op_10~1_sumout\;
\convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_10~1_sumout\ <= NOT \convert_binary|Div0|auto_generated|divider|divider|op_10~1_sumout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_10~17_sumout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|op_10~17_sumout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_9~13_sumout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|op_9~13_sumout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_8~9_sumout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|op_8~9_sumout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_7~5_sumout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|op_7~5_sumout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|op_7~1_sumout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_10~13_sumout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|op_10~13_sumout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_9~9_sumout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|op_9~9_sumout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_8~5_sumout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|op_8~5_sumout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|op_8~1_sumout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_10~9_sumout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|op_10~9_sumout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_9~5_sumout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|op_9~5_sumout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|op_9~1_sumout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_10~5_sumout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|op_10~5_sumout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_10~1_sumout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|op_10~1_sumout\;
\division_function|ALT_INV_Remainder\(9) <= NOT \division_function|Remainder\(9);
\division_function|ALT_INV_Remainder\(8) <= NOT \division_function|Remainder\(8);
\division_function|ALT_INV_Remainder\(7) <= NOT \division_function|Remainder\(7);
\division_function|ALT_INV_Remainder\(6) <= NOT \division_function|Remainder\(6);
\division_function|ALT_INV_Remainder\(5) <= NOT \division_function|Remainder\(5);
\division_function|ALT_INV_Remainder\(4) <= NOT \division_function|Remainder\(4);
\division_function|ALT_INV_Remainder\(3) <= NOT \division_function|Remainder\(3);
\division_function|ALT_INV_Remainder\(2) <= NOT \division_function|Remainder\(2);
\division_function|ALT_INV_Remainder\(1) <= NOT \division_function|Remainder\(1);
\division_function|ALT_INV_Remainder\(0) <= NOT \division_function|Remainder\(0);
\multiplication_function|ALT_INV_Data_Product\(9) <= NOT \multiplication_function|Data_Product\(9);
\multiplication_function|ALT_INV_Data_Product\(8) <= NOT \multiplication_function|Data_Product\(8);
\multiplication_function|ALT_INV_Data_Product\(7) <= NOT \multiplication_function|Data_Product\(7);
\multiplication_function|ALT_INV_Data_Product\(6) <= NOT \multiplication_function|Data_Product\(6);
\multiplication_function|ALT_INV_Data_Product\(5) <= NOT \multiplication_function|Data_Product\(5);
\multiplication_function|ALT_INV_Data_Product\(4) <= NOT \multiplication_function|Data_Product\(4);
\multiplication_function|ALT_INV_Data_Product\(3) <= NOT \multiplication_function|Data_Product\(3);
\multiplication_function|ALT_INV_Data_Product\(2) <= NOT \multiplication_function|Data_Product\(2);
\multiplication_function|ALT_INV_Data_Product\(1) <= NOT \multiplication_function|Data_Product\(1);
\multiplication_function|ALT_INV_bit_counter\(3) <= NOT \multiplication_function|bit_counter\(3);
\multiplication_function|ALT_INV_bit_counter\(21) <= NOT \multiplication_function|bit_counter\(21);
\multiplication_function|ALT_INV_bit_counter\(30) <= NOT \multiplication_function|bit_counter\(30);
\multiplication_function|ALT_INV_bit_counter\(29) <= NOT \multiplication_function|bit_counter\(29);
\multiplication_function|ALT_INV_bit_counter\(17) <= NOT \multiplication_function|bit_counter\(17);
\multiplication_function|ALT_INV_bit_counter\(11) <= NOT \multiplication_function|bit_counter\(11);
\multiplication_function|ALT_INV_bit_counter\(19) <= NOT \multiplication_function|bit_counter\(19);
\multiplication_function|ALT_INV_bit_counter\(20) <= NOT \multiplication_function|bit_counter\(20);
\multiplication_function|ALT_INV_bit_counter\(22) <= NOT \multiplication_function|bit_counter\(22);
\multiplication_function|ALT_INV_bit_counter\(18) <= NOT \multiplication_function|bit_counter\(18);
\multiplication_function|ALT_INV_bit_counter\(1) <= NOT \multiplication_function|bit_counter\(1);
\multiplication_function|ALT_INV_bit_counter\(2) <= NOT \multiplication_function|bit_counter\(2);
\multiplication_function|ALT_INV_bit_counter\(9) <= NOT \multiplication_function|bit_counter\(9);
\multiplication_function|ALT_INV_bit_counter\(8) <= NOT \multiplication_function|bit_counter\(8);
\multiplication_function|ALT_INV_bit_counter\(7) <= NOT \multiplication_function|bit_counter\(7);
\multiplication_function|ALT_INV_bit_counter\(6) <= NOT \multiplication_function|bit_counter\(6);
\multiplication_function|ALT_INV_bit_counter\(5) <= NOT \multiplication_function|bit_counter\(5);
\multiplication_function|ALT_INV_bit_counter\(4) <= NOT \multiplication_function|bit_counter\(4);
\multiplication_function|ALT_INV_bit_counter\(12) <= NOT \multiplication_function|bit_counter\(12);
\multiplication_function|ALT_INV_bit_counter\(13) <= NOT \multiplication_function|bit_counter\(13);
\multiplication_function|ALT_INV_bit_counter\(14) <= NOT \multiplication_function|bit_counter\(14);
\multiplication_function|ALT_INV_bit_counter\(15) <= NOT \multiplication_function|bit_counter\(15);
\multiplication_function|ALT_INV_bit_counter\(16) <= NOT \multiplication_function|bit_counter\(16);
\multiplication_function|ALT_INV_bit_counter\(10) <= NOT \multiplication_function|bit_counter\(10);
\multiplication_function|ALT_INV_bit_counter\(28) <= NOT \multiplication_function|bit_counter\(28);
\multiplication_function|ALT_INV_bit_counter\(27) <= NOT \multiplication_function|bit_counter\(27);
\multiplication_function|ALT_INV_bit_counter\(26) <= NOT \multiplication_function|bit_counter\(26);
\multiplication_function|ALT_INV_bit_counter\(25) <= NOT \multiplication_function|bit_counter\(25);
\multiplication_function|ALT_INV_bit_counter\(24) <= NOT \multiplication_function|bit_counter\(24);
\multiplication_function|ALT_INV_bit_counter\(23) <= NOT \multiplication_function|bit_counter\(23);
\multiplication_function|ALT_INV_bit_counter\(31) <= NOT \multiplication_function|bit_counter\(31);
\multiplication_function|ALT_INV_bit_counter\(0) <= NOT \multiplication_function|bit_counter\(0);
\ALT_INV_Start_division~q\ <= NOT \Start_division~q\;
\division_function|ALT_INV_Remainder\(10) <= NOT \division_function|Remainder\(10);
\convert_binary|Div3|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[7]~1_sumout\ <= NOT \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\;
\convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\ <= NOT \convert_binary|Div3|auto_generated|divider|divider|op_8~1_sumout\;
\convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\ <= NOT \convert_binary|Div3|auto_generated|divider|divider|op_9~1_sumout\;
\convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_10~1_sumout\ <= NOT \convert_binary|Div3|auto_generated|divider|divider|op_10~1_sumout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_10~17_sumout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|op_10~17_sumout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_9~13_sumout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|op_9~13_sumout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_8~9_sumout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|op_8~9_sumout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_7~5_sumout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|op_7~5_sumout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|op_7~1_sumout\;
\convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\ <= NOT \convert_binary|Div2|auto_generated|divider|divider|op_7~1_sumout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_10~13_sumout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|op_10~13_sumout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_9~9_sumout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|op_9~9_sumout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_8~5_sumout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|op_8~5_sumout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|op_8~1_sumout\;
\convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\ <= NOT \convert_binary|Div2|auto_generated|divider|divider|op_8~1_sumout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_10~9_sumout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|op_10~9_sumout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_9~5_sumout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|op_9~5_sumout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|op_9~1_sumout\;
\convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\ <= NOT \convert_binary|Div2|auto_generated|divider|divider|op_9~1_sumout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_10~5_sumout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|op_10~5_sumout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_10~1_sumout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|op_10~1_sumout\;
\convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_10~1_sumout\ <= NOT \convert_binary|Div2|auto_generated|divider|divider|op_10~1_sumout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_10~17_sumout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|op_10~17_sumout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_9~13_sumout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|op_9~13_sumout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_8~9_sumout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|op_8~9_sumout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_8~13_sumout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|op_8~13_sumout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_9~17_sumout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|op_9~17_sumout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_7~9_sumout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|op_7~9_sumout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_8~13_sumout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|op_8~13_sumout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_9~17_sumout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|op_9~17_sumout\;
\division_function|ALT_INV_Add0~17_sumout\ <= NOT \division_function|Add0~17_sumout\;
\division_function|ALT_INV_Add0~13_sumout\ <= NOT \division_function|Add0~13_sumout\;
\division_function|ALT_INV_Add0~9_sumout\ <= NOT \division_function|Add0~9_sumout\;
\division_function|ALT_INV_Add0~5_sumout\ <= NOT \division_function|Add0~5_sumout\;
\division_function|ALT_INV_Add0~1_sumout\ <= NOT \division_function|Add0~1_sumout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_7~17_sumout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|op_7~17_sumout\;
\convert_binary|Div0|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[1]~9_sumout\ <= NOT \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[1]~9_sumout\;
\convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_6~17_sumout\ <= NOT \convert_binary|Div0|auto_generated|divider|divider|op_6~17_sumout\;
\convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_5~13_sumout\ <= NOT \convert_binary|Div0|auto_generated|divider|divider|op_5~13_sumout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_8~21_sumout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|op_8~21_sumout\;
\convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_5~9_sumout\ <= NOT \convert_binary|Div0|auto_generated|divider|divider|op_5~9_sumout\;
\convert_binary|Div0|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[0]~5_sumout\ <= NOT \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[0]~5_sumout\;
\convert_binary|Div0|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~1_sumout\ <= NOT \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\;
\convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_7~17_sumout\ <= NOT \convert_binary|Div0|auto_generated|divider|divider|op_7~17_sumout\;
\convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_6~13_sumout\ <= NOT \convert_binary|Div0|auto_generated|divider|divider|op_6~13_sumout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_9~25_sumout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|op_9~25_sumout\;
\convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_6~9_sumout\ <= NOT \convert_binary|Div0|auto_generated|divider|divider|op_6~9_sumout\;
\convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_5~5_sumout\ <= NOT \convert_binary|Div0|auto_generated|divider|divider|op_5~5_sumout\;
\convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\ <= NOT \convert_binary|Div0|auto_generated|divider|divider|op_5~1_sumout\;
\convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_8~13_sumout\ <= NOT \convert_binary|Div0|auto_generated|divider|divider|op_8~13_sumout\;
\convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_7~13_sumout\ <= NOT \convert_binary|Div0|auto_generated|divider|divider|op_7~13_sumout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[4]~5_sumout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[4]~5_sumout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[5]~1_sumout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_6~5_sumout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|op_6~5_sumout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|op_6~1_sumout\;
\convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_7~9_sumout\ <= NOT \convert_binary|Div0|auto_generated|divider|divider|op_7~9_sumout\;
\convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_6~5_sumout\ <= NOT \convert_binary|Div0|auto_generated|divider|divider|op_6~5_sumout\;
\convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\ <= NOT \convert_binary|Div0|auto_generated|divider|divider|op_6~1_sumout\;
\convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_9~9_sumout\ <= NOT \convert_binary|Div0|auto_generated|divider|divider|op_9~9_sumout\;
\convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_8~9_sumout\ <= NOT \convert_binary|Div0|auto_generated|divider|divider|op_8~9_sumout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_7~17_sumout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|op_7~17_sumout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_8~21_sumout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|op_8~21_sumout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_9~25_sumout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|op_9~25_sumout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~5_sumout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[4]~5_sumout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[3]~1_sumout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[3]~1_sumout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_5~5_sumout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|op_5~5_sumout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|op_5~1_sumout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_6~5_sumout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|op_6~5_sumout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|op_6~1_sumout\;
\division_function|ALT_INV_Divisor\(8) <= NOT \division_function|Divisor\(8);
\division_function|ALT_INV_Divisor\(7) <= NOT \division_function|Divisor\(7);
\division_function|ALT_INV_Divisor\(6) <= NOT \division_function|Divisor\(6);
\division_function|ALT_INV_Divisor\(5) <= NOT \division_function|Divisor\(5);
\multiplication_function|ALT_INV_Data_A\(9) <= NOT \multiplication_function|Data_A\(9);
\multiplication_function|ALT_INV_Data_A\(8) <= NOT \multiplication_function|Data_A\(8);
\multiplication_function|ALT_INV_Data_A\(7) <= NOT \multiplication_function|Data_A\(7);
\multiplication_function|ALT_INV_Data_A\(6) <= NOT \multiplication_function|Data_A\(6);
\multiplication_function|ALT_INV_Data_A\(5) <= NOT \multiplication_function|Data_A\(5);
\multiplication_function|ALT_INV_Data_A\(0) <= NOT \multiplication_function|Data_A\(0);
\division_function|ALT_INV_Add0~41_sumout\ <= NOT \division_function|Add0~41_sumout\;
\division_function|ALT_INV_Add1~41_sumout\ <= NOT \division_function|Add1~41_sumout\;
\convert_binary|Div3|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[6]~5_sumout\ <= NOT \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[6]~5_sumout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_7~9_sumout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|op_7~9_sumout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_8~13_sumout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|op_8~13_sumout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_9~17_sumout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|op_9~17_sumout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_7~9_sumout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|op_7~9_sumout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_8~13_sumout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|op_8~13_sumout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_9~17_sumout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|op_9~17_sumout\;
\convert_binary|Div1|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[6]~5_sumout\ <= NOT \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[6]~5_sumout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_7~9_sumout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|op_7~9_sumout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_9~29_sumout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|op_9~29_sumout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[3]~9_sumout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[3]~9_sumout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_6~9_sumout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|op_6~9_sumout\;
\convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_7~21_sumout\ <= NOT \convert_binary|Div0|auto_generated|divider|divider|op_7~21_sumout\;
\convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_9~13_sumout\ <= NOT \convert_binary|Div0|auto_generated|divider|divider|op_9~13_sumout\;
\convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_8~17_sumout\ <= NOT \convert_binary|Div0|auto_generated|divider|divider|op_8~17_sumout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_7~21_sumout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|op_7~21_sumout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_8~25_sumout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|op_8~25_sumout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_9~29_sumout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|op_9~29_sumout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[2]~9_sumout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[2]~9_sumout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_5~9_sumout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|op_5~9_sumout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_6~9_sumout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|op_6~9_sumout\;
\division_function|ALT_INV_bit_counter\(0) <= NOT \division_function|bit_counter\(0);
\convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_8~13_sumout\ <= NOT \convert_binary|Div3|auto_generated|divider|divider|op_8~13_sumout\;
\convert_binary|Div3|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[5]~13_sumout\ <= NOT \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[5]~13_sumout\;
\convert_binary|Div3|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[4]~9_sumout\ <= NOT \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[4]~9_sumout\;
\convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_9~9_sumout\ <= NOT \convert_binary|Div3|auto_generated|divider|divider|op_9~9_sumout\;
\convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_8~9_sumout\ <= NOT \convert_binary|Div3|auto_generated|divider|divider|op_8~9_sumout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_7~17_sumout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|op_7~17_sumout\;
\convert_binary|Div2|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[1]~9_sumout\ <= NOT \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[1]~9_sumout\;
\convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_6~17_sumout\ <= NOT \convert_binary|Div2|auto_generated|divider|divider|op_6~17_sumout\;
\convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_5~13_sumout\ <= NOT \convert_binary|Div2|auto_generated|divider|divider|op_5~13_sumout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_8~21_sumout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|op_8~21_sumout\;
\convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_5~9_sumout\ <= NOT \convert_binary|Div2|auto_generated|divider|divider|op_5~9_sumout\;
\convert_binary|Div2|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[0]~5_sumout\ <= NOT \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[0]~5_sumout\;
\convert_binary|Div2|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~1_sumout\ <= NOT \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\;
\convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_7~17_sumout\ <= NOT \convert_binary|Div2|auto_generated|divider|divider|op_7~17_sumout\;
\convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_6~13_sumout\ <= NOT \convert_binary|Div2|auto_generated|divider|divider|op_6~13_sumout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_9~25_sumout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|op_9~25_sumout\;
\convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_6~9_sumout\ <= NOT \convert_binary|Div2|auto_generated|divider|divider|op_6~9_sumout\;
\convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_5~5_sumout\ <= NOT \convert_binary|Div2|auto_generated|divider|divider|op_5~5_sumout\;
\convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\ <= NOT \convert_binary|Div2|auto_generated|divider|divider|op_5~1_sumout\;
\convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_8~13_sumout\ <= NOT \convert_binary|Div2|auto_generated|divider|divider|op_8~13_sumout\;
\convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_7~13_sumout\ <= NOT \convert_binary|Div2|auto_generated|divider|divider|op_7~13_sumout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[4]~5_sumout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[4]~5_sumout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[5]~1_sumout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_6~5_sumout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|op_6~5_sumout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|op_6~1_sumout\;
\convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_7~9_sumout\ <= NOT \convert_binary|Div2|auto_generated|divider|divider|op_7~9_sumout\;
\convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_6~5_sumout\ <= NOT \convert_binary|Div2|auto_generated|divider|divider|op_6~5_sumout\;
\convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\ <= NOT \convert_binary|Div2|auto_generated|divider|divider|op_6~1_sumout\;
\convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_9~9_sumout\ <= NOT \convert_binary|Div2|auto_generated|divider|divider|op_9~9_sumout\;
\convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_8~9_sumout\ <= NOT \convert_binary|Div2|auto_generated|divider|divider|op_8~9_sumout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_7~17_sumout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|op_7~17_sumout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_8~21_sumout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|op_8~21_sumout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_9~25_sumout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|op_9~25_sumout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~5_sumout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[4]~5_sumout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[3]~1_sumout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[3]~1_sumout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_5~5_sumout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|op_5~5_sumout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|op_5~1_sumout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_6~5_sumout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|op_6~5_sumout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|op_6~1_sumout\;
\convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_8~13_sumout\ <= NOT \convert_binary|Div1|auto_generated|divider|divider|op_8~13_sumout\;
\convert_binary|Div1|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[5]~13_sumout\ <= NOT \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[5]~13_sumout\;
\convert_binary|Div1|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[4]~9_sumout\ <= NOT \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[4]~9_sumout\;
\convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_9~9_sumout\ <= NOT \convert_binary|Div1|auto_generated|divider|divider|op_9~9_sumout\;
\convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_8~9_sumout\ <= NOT \convert_binary|Div1|auto_generated|divider|divider|op_8~9_sumout\;
\convert_binary|Div2|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[2]~17_sumout\ <= NOT \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[2]~17_sumout\;
\convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_9~17_sumout\ <= NOT \convert_binary|Div2|auto_generated|divider|divider|op_9~17_sumout\;
\convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_8~21_sumout\ <= NOT \convert_binary|Div2|auto_generated|divider|divider|op_8~21_sumout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_7~25_sumout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|op_7~25_sumout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_8~29_sumout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|op_8~29_sumout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_9~33_sumout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|op_9~33_sumout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[1]~13_sumout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[1]~13_sumout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_5~13_sumout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|op_5~13_sumout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_6~13_sumout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|op_6~13_sumout\;
\convert_binary|Div1|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[2]~21_sumout\ <= NOT \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[2]~21_sumout\;
\convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_9~17_sumout\ <= NOT \convert_binary|Div1|auto_generated|divider|divider|op_9~17_sumout\;
\convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_8~21_sumout\ <= NOT \convert_binary|Div1|auto_generated|divider|divider|op_8~21_sumout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_7~25_sumout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|op_7~25_sumout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_8~29_sumout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|op_8~29_sumout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_9~33_sumout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|op_9~33_sumout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[2]~13_sumout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[2]~13_sumout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_6~13_sumout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|op_6~13_sumout\;
\convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_5~25_sumout\ <= NOT \convert_binary|Div0|auto_generated|divider|divider|op_5~25_sumout\;
\convert_binary|Div0|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[2]~17_sumout\ <= NOT \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[2]~17_sumout\;
\convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_9~17_sumout\ <= NOT \convert_binary|Div0|auto_generated|divider|divider|op_9~17_sumout\;
\convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_8~21_sumout\ <= NOT \convert_binary|Div0|auto_generated|divider|divider|op_8~21_sumout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_7~25_sumout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|op_7~25_sumout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_8~29_sumout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|op_8~29_sumout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_9~33_sumout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|op_9~33_sumout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[1]~13_sumout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[1]~13_sumout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_5~13_sumout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|op_5~13_sumout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_6~13_sumout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|op_6~13_sumout\;
\convert_binary|Div3|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[3]~17_sumout\ <= NOT \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[3]~17_sumout\;
\convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_9~13_sumout\ <= NOT \convert_binary|Div3|auto_generated|divider|divider|op_9~13_sumout\;
\convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_8~17_sumout\ <= NOT \convert_binary|Div3|auto_generated|divider|divider|op_8~17_sumout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_7~21_sumout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|op_7~21_sumout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_8~25_sumout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|op_8~25_sumout\;
\convert_binary|Div2|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[3]~13_sumout\ <= NOT \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[3]~13_sumout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_9~29_sumout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|op_9~29_sumout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[3]~9_sumout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[3]~9_sumout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_6~9_sumout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|op_6~9_sumout\;
\convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_7~21_sumout\ <= NOT \convert_binary|Div2|auto_generated|divider|divider|op_7~21_sumout\;
\convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_9~13_sumout\ <= NOT \convert_binary|Div2|auto_generated|divider|divider|op_9~13_sumout\;
\convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_8~17_sumout\ <= NOT \convert_binary|Div2|auto_generated|divider|divider|op_8~17_sumout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_7~21_sumout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|op_7~21_sumout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_8~25_sumout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|op_8~25_sumout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_9~29_sumout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|op_9~29_sumout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[2]~9_sumout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[2]~9_sumout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_5~9_sumout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|op_5~9_sumout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_6~9_sumout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|op_6~9_sumout\;
\convert_binary|Div1|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[3]~17_sumout\ <= NOT \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[3]~17_sumout\;
\convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_9~13_sumout\ <= NOT \convert_binary|Div1|auto_generated|divider|divider|op_9~13_sumout\;
\convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_8~17_sumout\ <= NOT \convert_binary|Div1|auto_generated|divider|divider|op_8~17_sumout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_7~21_sumout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|op_7~21_sumout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_8~25_sumout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|op_8~25_sumout\;
\convert_binary|Div0|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[3]~13_sumout\ <= NOT \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[3]~13_sumout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_7~33_sumout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|op_7~33_sumout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_8~37_sumout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|op_8~37_sumout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_9~41_sumout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|op_9~41_sumout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[0]~21_sumout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[0]~21_sumout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_6~21_sumout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|op_6~21_sumout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_7~33_sumout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|op_7~33_sumout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_8~37_sumout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|op_8~37_sumout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_9~41_sumout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|op_9~41_sumout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_5~21_sumout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|op_5~21_sumout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_6~21_sumout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|op_6~21_sumout\;
\convert_binary|Div3|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[1]~25_sumout\ <= NOT \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[1]~25_sumout\;
\convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_9~21_sumout\ <= NOT \convert_binary|Div3|auto_generated|divider|divider|op_9~21_sumout\;
\convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_8~25_sumout\ <= NOT \convert_binary|Div3|auto_generated|divider|divider|op_8~25_sumout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_7~29_sumout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|op_7~29_sumout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_8~33_sumout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|op_8~33_sumout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_9~37_sumout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|op_9~37_sumout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[1]~17_sumout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[1]~17_sumout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_6~17_sumout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|op_6~17_sumout\;
\convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_9~21_sumout\ <= NOT \convert_binary|Div2|auto_generated|divider|divider|op_9~21_sumout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_7~29_sumout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|op_7~29_sumout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_8~33_sumout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|op_8~33_sumout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_9~37_sumout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|op_9~37_sumout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[0]~17_sumout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[0]~17_sumout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_5~17_sumout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|op_5~17_sumout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_6~17_sumout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|op_6~17_sumout\;
\convert_binary|Div1|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[1]~25_sumout\ <= NOT \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[1]~25_sumout\;
\convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_9~21_sumout\ <= NOT \convert_binary|Div1|auto_generated|divider|divider|op_9~21_sumout\;
\convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_8~25_sumout\ <= NOT \convert_binary|Div1|auto_generated|divider|divider|op_8~25_sumout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_7~29_sumout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|op_7~29_sumout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_8~33_sumout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|op_8~33_sumout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_9~37_sumout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|op_9~37_sumout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[1]~17_sumout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[1]~17_sumout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_6~17_sumout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|op_6~17_sumout\;
\convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_9~21_sumout\ <= NOT \convert_binary|Div0|auto_generated|divider|divider|op_9~21_sumout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_7~29_sumout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|op_7~29_sumout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_8~33_sumout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|op_8~33_sumout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_9~37_sumout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|op_9~37_sumout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[0]~17_sumout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[0]~17_sumout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_5~17_sumout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|op_5~17_sumout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_6~17_sumout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|op_6~17_sumout\;
\convert_binary|Div3|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[2]~21_sumout\ <= NOT \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[2]~21_sumout\;
\convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_9~17_sumout\ <= NOT \convert_binary|Div3|auto_generated|divider|divider|op_9~17_sumout\;
\convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_8~21_sumout\ <= NOT \convert_binary|Div3|auto_generated|divider|divider|op_8~21_sumout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_7~25_sumout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|op_7~25_sumout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_8~29_sumout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|op_8~29_sumout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_9~33_sumout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|op_9~33_sumout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[2]~13_sumout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[2]~13_sumout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_6~13_sumout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|op_6~13_sumout\;
\convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_5~25_sumout\ <= NOT \convert_binary|Div2|auto_generated|divider|divider|op_5~25_sumout\;
\convert_binary|ALT_INV_int_r_3\(3) <= NOT \convert_binary|int_r_3\(3);
\convert_binary|ALT_INV_int_r_3\(1) <= NOT \convert_binary|int_r_3\(1);
\convert_binary|ALT_INV_int_r_2\(3) <= NOT \convert_binary|int_r_2\(3);
\convert_binary|ALT_INV_int_r_2\(1) <= NOT \convert_binary|int_r_2\(1);
\convert_binary|ALT_INV_int_r_1\(3) <= NOT \convert_binary|int_r_1\(3);
\convert_binary|ALT_INV_int_r_1\(1) <= NOT \convert_binary|int_r_1\(1);
\convert_binary|ALT_INV_int_data_3\(3) <= NOT \convert_binary|int_data_3\(3);
\convert_binary|ALT_INV_int_data_3\(1) <= NOT \convert_binary|int_data_3\(1);
\convert_binary|ALT_INV_int_data_2\(3) <= NOT \convert_binary|int_data_2\(3);
\convert_binary|ALT_INV_int_data_2\(1) <= NOT \convert_binary|int_data_2\(1);
\convert_binary|ALT_INV_int_data_1\(3) <= NOT \convert_binary|int_data_1\(3);
\convert_binary|ALT_INV_int_data_1\(1) <= NOT \convert_binary|int_data_1\(1);
\multiplication_function|ALT_INV_R\(9) <= NOT \multiplication_function|R\(9);
\multiplication_function|ALT_INV_R\(8) <= NOT \multiplication_function|R\(8);
\multiplication_function|ALT_INV_R\(7) <= NOT \multiplication_function|R\(7);
\multiplication_function|ALT_INV_R\(6) <= NOT \multiplication_function|R\(6);
\ALT_INV_Result~11_combout\ <= NOT \Result~11_combout\;
\multiplication_function|ALT_INV_R\(5) <= NOT \multiplication_function|R\(5);
\ALT_INV_Result~10_combout\ <= NOT \Result~10_combout\;
\ALT_INV_Result~9_combout\ <= NOT \Result~9_combout\;
\ALT_INV_Result~8_combout\ <= NOT \Result~8_combout\;
\addandsub_function|eq_compar:4:sum|ALT_INV_C_out~combout\ <= NOT \addandsub_function|eq_compar:4:sum|C_out~combout\;
\multiplication_function|ALT_INV_R\(4) <= NOT \multiplication_function|R\(4);
\addandsub_function|eq_compar:4:sum|ALT_INV_sum~combout\ <= NOT \addandsub_function|eq_compar:4:sum|sum~combout\;
ALT_INV_Data_B_aas(4) <= NOT Data_B_aas(4);
ALT_INV_Data_A_aas(4) <= NOT Data_A_aas(4);
\addandsub_function|eq_compar:3:sum|ALT_INV_C_out~combout\ <= NOT \addandsub_function|eq_compar:3:sum|C_out~combout\;
\division_function|ALT_INV_Q\(4) <= NOT \division_function|Q\(4);
\multiplication_function|ALT_INV_R\(3) <= NOT \multiplication_function|R\(3);
\addandsub_function|eq_compar:3:sum|ALT_INV_sum~combout\ <= NOT \addandsub_function|eq_compar:3:sum|sum~combout\;
ALT_INV_Data_B_aas(3) <= NOT Data_B_aas(3);
ALT_INV_Data_A_aas(3) <= NOT Data_A_aas(3);
\addandsub_function|eq_compar:2:sum|ALT_INV_C_out~combout\ <= NOT \addandsub_function|eq_compar:2:sum|C_out~combout\;
\division_function|ALT_INV_Q\(3) <= NOT \division_function|Q\(3);
\multiplication_function|ALT_INV_R\(2) <= NOT \multiplication_function|R\(2);
\addandsub_function|eq_compar:2:sum|ALT_INV_sum~combout\ <= NOT \addandsub_function|eq_compar:2:sum|sum~combout\;
ALT_INV_Data_B_aas(2) <= NOT Data_B_aas(2);
ALT_INV_Data_A_aas(2) <= NOT Data_A_aas(2);
\addandsub_function|eq_compar:1:sum|ALT_INV_C_out~combout\ <= NOT \addandsub_function|eq_compar:1:sum|C_out~combout\;
\division_function|ALT_INV_Q\(2) <= NOT \division_function|Q\(2);
\multiplication_function|ALT_INV_R\(1) <= NOT \multiplication_function|R\(1);
\addandsub_function|eq_compar:1:sum|ALT_INV_sum~combout\ <= NOT \addandsub_function|eq_compar:1:sum|sum~combout\;
ALT_INV_Data_B_aas(1) <= NOT Data_B_aas(1);
\ALT_INV_Mode~q\ <= NOT \Mode~q\;
ALT_INV_Data_A_aas(1) <= NOT Data_A_aas(1);
\division_function|ALT_INV_Q\(1) <= NOT \division_function|Q\(1);
\multiplication_function|ALT_INV_R\(0) <= NOT \multiplication_function|R\(0);
ALT_INV_Data_B_aas(0) <= NOT Data_B_aas(0);
ALT_INV_Data_A_aas(0) <= NOT Data_A_aas(0);
\ALT_INV_Result[2]~1_combout\ <= NOT \Result[2]~1_combout\;
\ALT_INV_Result[2]~0_combout\ <= NOT \Result[2]~0_combout\;
\division_function|ALT_INV_Q\(0) <= NOT \division_function|Q\(0);
\ALT_INV_DONE_main~reg0_q\ <= NOT \DONE_main~reg0_q\;
\ALT_INV_COUT~reg0_q\ <= NOT \COUT~reg0_q\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[44]~8_combout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|StageOut[44]~8_combout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[55]~7_combout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|StageOut[55]~7_combout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[66]~6_combout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|StageOut[66]~6_combout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[77]~5_combout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|StageOut[77]~5_combout\;
\division_function|ALT_INV_Divisor\(9) <= NOT \division_function|Divisor\(9);
\division_function|ALT_INV_Divisor\(4) <= NOT \division_function|Divisor\(4);
\division_function|ALT_INV_Divisor\(3) <= NOT \division_function|Divisor\(3);
\division_function|ALT_INV_Divisor\(2) <= NOT \division_function|Divisor\(2);
\division_function|ALT_INV_Divisor\(1) <= NOT \division_function|Divisor\(1);
\division_function|ALT_INV_Divisor\(0) <= NOT \division_function|Divisor\(0);
\multiplication_function|ALT_INV_Data_A\(4) <= NOT \multiplication_function|Data_A\(4);
\multiplication_function|ALT_INV_Data_A\(3) <= NOT \multiplication_function|Data_A\(3);
\multiplication_function|ALT_INV_Data_A\(2) <= NOT \multiplication_function|Data_A\(2);
\multiplication_function|ALT_INV_Data_A\(1) <= NOT \multiplication_function|Data_A\(1);
\ALT_INV_check_zero_divisor~1_combout\ <= NOT \check_zero_divisor~1_combout\;
\ALT_INV_check_zero_divisor~0_combout\ <= NOT \check_zero_divisor~0_combout\;
\multiplication_function|ALT_INV_Mux0~0_combout\ <= NOT \multiplication_function|Mux0~0_combout\;
\multiplication_function|ALT_INV_Data_B\(3) <= NOT \multiplication_function|Data_B\(3);
\multiplication_function|ALT_INV_Data_B\(2) <= NOT \multiplication_function|Data_B\(2);
\multiplication_function|ALT_INV_Data_B\(1) <= NOT \multiplication_function|Data_B\(1);
\multiplication_function|ALT_INV_Data_B\(0) <= NOT \multiplication_function|Data_B\(0);
\multiplication_function|ALT_INV_Data_B\(4) <= NOT \multiplication_function|Data_B\(4);
\division_function|ALT_INV_Selector11~0_combout\ <= NOT \division_function|Selector11~0_combout\;
\division_function|ALT_INV_state.s2~q\ <= NOT \division_function|state.s2~q\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[71]~4_combout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|StageOut[71]~4_combout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[60]~3_combout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|StageOut[60]~3_combout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[70]~1_combout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|StageOut[70]~1_combout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[71]~4_combout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|StageOut[71]~4_combout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[60]~3_combout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|StageOut[60]~3_combout\;
ALT_INV_Remainder_input(3) <= NOT Remainder_input(3);
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[70]~1_combout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|StageOut[70]~1_combout\;
ALT_INV_Remainder_input(2) <= NOT Remainder_input(2);
ALT_INV_Remainder_input(1) <= NOT Remainder_input(1);
ALT_INV_Remainder_input(0) <= NOT Remainder_input(0);
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[71]~4_combout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|StageOut[71]~4_combout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[60]~3_combout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|StageOut[60]~3_combout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[70]~1_combout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|StageOut[70]~1_combout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[71]~4_combout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|StageOut[71]~4_combout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[60]~3_combout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|StageOut[60]~3_combout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[70]~1_combout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|StageOut[70]~1_combout\;
\convert_binary|ALT_INV_int_r_2[2]~0_combout\ <= NOT \convert_binary|int_r_2[2]~0_combout\;
\ALT_INV_check_zero_divisor~q\ <= NOT \check_zero_divisor~q\;
ALT_INV_Op(0) <= NOT Op(0);
ALT_INV_Op(1) <= NOT Op(1);
\multiplication_function|ALT_INV_LessThan0~5_combout\ <= NOT \multiplication_function|LessThan0~5_combout\;
\multiplication_function|ALT_INV_LessThan0~4_combout\ <= NOT \multiplication_function|LessThan0~4_combout\;
\multiplication_function|ALT_INV_LessThan0~3_combout\ <= NOT \multiplication_function|LessThan0~3_combout\;
\multiplication_function|ALT_INV_LessThan0~2_combout\ <= NOT \multiplication_function|LessThan0~2_combout\;
\multiplication_function|ALT_INV_LessThan0~1_combout\ <= NOT \multiplication_function|LessThan0~1_combout\;
\multiplication_function|ALT_INV_LessThan0~0_combout\ <= NOT \multiplication_function|LessThan0~0_combout\;
\multiplication_function|ALT_INV_state~q\ <= NOT \multiplication_function|state~q\;
\division_function|ALT_INV_LessThan0~5_combout\ <= NOT \division_function|LessThan0~5_combout\;
\division_function|ALT_INV_LessThan0~4_combout\ <= NOT \division_function|LessThan0~4_combout\;
\division_function|ALT_INV_LessThan0~3_combout\ <= NOT \division_function|LessThan0~3_combout\;
\division_function|ALT_INV_LessThan0~2_combout\ <= NOT \division_function|LessThan0~2_combout\;
\division_function|ALT_INV_LessThan0~1_combout\ <= NOT \division_function|LessThan0~1_combout\;
\division_function|ALT_INV_LessThan0~0_combout\ <= NOT \division_function|LessThan0~0_combout\;
\division_function|ALT_INV_state.s0~q\ <= NOT \division_function|state.s0~q\;
\multiplication_function|ALT_INV_DONE~q\ <= NOT \multiplication_function|DONE~q\;
\division_function|ALT_INV_DONE~q\ <= NOT \division_function|DONE~q\;
\convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[51]~9_combout\ <= NOT \convert_binary|Div3|auto_generated|divider|divider|StageOut[51]~9_combout\;
\convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[51]~8_combout\ <= NOT \convert_binary|Div3|auto_generated|divider|divider|StageOut[51]~8_combout\;
\convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[51]~7_combout\ <= NOT \convert_binary|Div3|auto_generated|divider|divider|StageOut[51]~7_combout\;
\convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[60]~6_combout\ <= NOT \convert_binary|Div3|auto_generated|divider|divider|StageOut[60]~6_combout\;
\convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[16]~18_combout\ <= NOT \convert_binary|Div2|auto_generated|divider|divider|StageOut[16]~18_combout\;
\convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[16]~17_combout\ <= NOT \convert_binary|Div2|auto_generated|divider|divider|StageOut[16]~17_combout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[76]~15_combout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|StageOut[76]~15_combout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[65]~14_combout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|StageOut[65]~14_combout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[54]~13_combout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|StageOut[54]~13_combout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[54]~12_combout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|StageOut[54]~12_combout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[76]~11_combout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|StageOut[76]~11_combout\;
\convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[36]~16_combout\ <= NOT \convert_binary|Div2|auto_generated|divider|divider|StageOut[36]~16_combout\;
\convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[30]~15_combout\ <= NOT \convert_binary|Div2|auto_generated|divider|divider|StageOut[30]~15_combout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[76]~22_combout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|StageOut[76]~22_combout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[65]~21_combout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|StageOut[65]~21_combout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[54]~20_combout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|StageOut[54]~20_combout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[43]~19_combout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|StageOut[43]~19_combout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[32]~18_combout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|StageOut[32]~18_combout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[32]~17_combout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|StageOut[32]~17_combout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[54]~16_combout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|StageOut[54]~16_combout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[76]~15_combout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|StageOut[76]~15_combout\;
\convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[60]~10_combout\ <= NOT \convert_binary|Div1|auto_generated|divider|divider|StageOut[60]~10_combout\;
\convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[51]~9_combout\ <= NOT \convert_binary|Div1|auto_generated|divider|divider|StageOut[51]~9_combout\;
\convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[51]~8_combout\ <= NOT \convert_binary|Div1|auto_generated|divider|divider|StageOut[51]~8_combout\;
\convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[51]~7_combout\ <= NOT \convert_binary|Div1|auto_generated|divider|divider|StageOut[51]~7_combout\;
\convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[60]~6_combout\ <= NOT \convert_binary|Div1|auto_generated|divider|divider|StageOut[60]~6_combout\;
\convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[16]~18_combout\ <= NOT \convert_binary|Div0|auto_generated|divider|divider|StageOut[16]~18_combout\;
\convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[16]~17_combout\ <= NOT \convert_binary|Div0|auto_generated|divider|divider|StageOut[16]~17_combout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[76]~15_combout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|StageOut[76]~15_combout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[65]~14_combout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|StageOut[65]~14_combout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[54]~13_combout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|StageOut[54]~13_combout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[54]~12_combout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|StageOut[54]~12_combout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[76]~11_combout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|StageOut[76]~11_combout\;
\convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[36]~16_combout\ <= NOT \convert_binary|Div0|auto_generated|divider|divider|StageOut[36]~16_combout\;
\convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[30]~15_combout\ <= NOT \convert_binary|Div0|auto_generated|divider|divider|StageOut[30]~15_combout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[76]~22_combout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|StageOut[76]~22_combout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[65]~21_combout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|StageOut[65]~21_combout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[54]~20_combout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|StageOut[54]~20_combout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[43]~19_combout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|StageOut[43]~19_combout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[32]~18_combout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|StageOut[32]~18_combout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[32]~17_combout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|StageOut[32]~17_combout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[54]~16_combout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|StageOut[54]~16_combout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[76]~15_combout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|StageOut[76]~15_combout\;
\division_function|ALT_INV_Selector11~1_combout\ <= NOT \division_function|Selector11~1_combout\;
\convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[53]~5_combout\ <= NOT \convert_binary|Div3|auto_generated|divider|divider|StageOut[53]~5_combout\;
\convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[53]~4_combout\ <= NOT \convert_binary|Div3|auto_generated|divider|divider|StageOut[53]~4_combout\;
ALT_INV_Remainder_input(8) <= NOT Remainder_input(8);
\convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[61]~3_combout\ <= NOT \convert_binary|Div3|auto_generated|divider|divider|StageOut[61]~3_combout\;
\convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[52]~2_combout\ <= NOT \convert_binary|Div3|auto_generated|divider|divider|StageOut[52]~2_combout\;
\convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[52]~1_combout\ <= NOT \convert_binary|Div3|auto_generated|divider|divider|StageOut[52]~1_combout\;
\convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[61]~0_combout\ <= NOT \convert_binary|Div3|auto_generated|divider|divider|StageOut[61]~0_combout\;
\convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[22]~14_combout\ <= NOT \convert_binary|Div2|auto_generated|divider|divider|StageOut[22]~14_combout\;
\convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[16]~13_combout\ <= NOT \convert_binary|Div2|auto_generated|divider|divider|StageOut[16]~13_combout\;
ALT_INV_Remainder_input(7) <= NOT Remainder_input(7);
\convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[22]~12_combout\ <= NOT \convert_binary|Div2|auto_generated|divider|divider|StageOut[22]~12_combout\;
\convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[27]~11_combout\ <= NOT \convert_binary|Div2|auto_generated|divider|divider|StageOut[27]~11_combout\;
\convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[21]~10_combout\ <= NOT \convert_binary|Div2|auto_generated|divider|divider|StageOut[21]~10_combout\;
\convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[15]~9_combout\ <= NOT \convert_binary|Div2|auto_generated|divider|divider|StageOut[15]~9_combout\;
ALT_INV_Remainder_input(6) <= NOT Remainder_input(6);
\convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[27]~8_combout\ <= NOT \convert_binary|Div2|auto_generated|divider|divider|StageOut[27]~8_combout\;
\convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[32]~7_combout\ <= NOT \convert_binary|Div2|auto_generated|divider|divider|StageOut[32]~7_combout\;
\convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[26]~6_combout\ <= NOT \convert_binary|Div2|auto_generated|divider|divider|StageOut[26]~6_combout\;
\convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[20]~5_combout\ <= NOT \convert_binary|Div2|auto_generated|divider|divider|StageOut[20]~5_combout\;
ALT_INV_Remainder_input(5) <= NOT Remainder_input(5);
\convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[32]~4_combout\ <= NOT \convert_binary|Div2|auto_generated|divider|divider|StageOut[32]~4_combout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[77]~10_combout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|StageOut[77]~10_combout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[66]~9_combout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|StageOut[66]~9_combout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[55]~8_combout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|StageOut[55]~8_combout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[55]~7_combout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|StageOut[55]~7_combout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[66]~6_combout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|StageOut[66]~6_combout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[77]~5_combout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|StageOut[77]~5_combout\;
\convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[37]~3_combout\ <= NOT \convert_binary|Div2|auto_generated|divider|divider|StageOut[37]~3_combout\;
\convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[31]~2_combout\ <= NOT \convert_binary|Div2|auto_generated|divider|divider|StageOut[31]~2_combout\;
\convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[25]~1_combout\ <= NOT \convert_binary|Div2|auto_generated|divider|divider|StageOut[25]~1_combout\;
ALT_INV_Remainder_input(4) <= NOT Remainder_input(4);
\convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[37]~0_combout\ <= NOT \convert_binary|Div2|auto_generated|divider|divider|StageOut[37]~0_combout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[77]~14_combout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|StageOut[77]~14_combout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[66]~13_combout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|StageOut[66]~13_combout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[55]~12_combout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|StageOut[55]~12_combout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[44]~11_combout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|StageOut[44]~11_combout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[33]~10_combout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|StageOut[33]~10_combout\;
ALT_INV_Remainder_input(9) <= NOT Remainder_input(9);
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[33]~9_combout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|StageOut[33]~9_combout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[44]~8_combout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|StageOut[44]~8_combout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[55]~7_combout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|StageOut[55]~7_combout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[66]~6_combout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|StageOut[66]~6_combout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[77]~5_combout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|StageOut[77]~5_combout\;
\convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[53]~5_combout\ <= NOT \convert_binary|Div1|auto_generated|divider|divider|StageOut[53]~5_combout\;
\convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[53]~4_combout\ <= NOT \convert_binary|Div1|auto_generated|divider|divider|StageOut[53]~4_combout\;
\convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[61]~3_combout\ <= NOT \convert_binary|Div1|auto_generated|divider|divider|StageOut[61]~3_combout\;
\convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[52]~2_combout\ <= NOT \convert_binary|Div1|auto_generated|divider|divider|StageOut[52]~2_combout\;
\convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[52]~1_combout\ <= NOT \convert_binary|Div1|auto_generated|divider|divider|StageOut[52]~1_combout\;
\convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[61]~0_combout\ <= NOT \convert_binary|Div1|auto_generated|divider|divider|StageOut[61]~0_combout\;
\convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[22]~14_combout\ <= NOT \convert_binary|Div0|auto_generated|divider|divider|StageOut[22]~14_combout\;
\convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[16]~13_combout\ <= NOT \convert_binary|Div0|auto_generated|divider|divider|StageOut[16]~13_combout\;
\convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[22]~12_combout\ <= NOT \convert_binary|Div0|auto_generated|divider|divider|StageOut[22]~12_combout\;
\convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[27]~11_combout\ <= NOT \convert_binary|Div0|auto_generated|divider|divider|StageOut[27]~11_combout\;
\convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[21]~10_combout\ <= NOT \convert_binary|Div0|auto_generated|divider|divider|StageOut[21]~10_combout\;
\convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[15]~9_combout\ <= NOT \convert_binary|Div0|auto_generated|divider|divider|StageOut[15]~9_combout\;
\convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[27]~8_combout\ <= NOT \convert_binary|Div0|auto_generated|divider|divider|StageOut[27]~8_combout\;
\convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[32]~7_combout\ <= NOT \convert_binary|Div0|auto_generated|divider|divider|StageOut[32]~7_combout\;
\convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[26]~6_combout\ <= NOT \convert_binary|Div0|auto_generated|divider|divider|StageOut[26]~6_combout\;
\convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[20]~5_combout\ <= NOT \convert_binary|Div0|auto_generated|divider|divider|StageOut[20]~5_combout\;
\convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[32]~4_combout\ <= NOT \convert_binary|Div0|auto_generated|divider|divider|StageOut[32]~4_combout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[77]~10_combout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|StageOut[77]~10_combout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[66]~9_combout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|StageOut[66]~9_combout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[55]~8_combout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|StageOut[55]~8_combout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[55]~7_combout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|StageOut[55]~7_combout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[66]~6_combout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|StageOut[66]~6_combout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[77]~5_combout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|StageOut[77]~5_combout\;
\convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[37]~3_combout\ <= NOT \convert_binary|Div0|auto_generated|divider|divider|StageOut[37]~3_combout\;
\convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[31]~2_combout\ <= NOT \convert_binary|Div0|auto_generated|divider|divider|StageOut[31]~2_combout\;
\convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[25]~1_combout\ <= NOT \convert_binary|Div0|auto_generated|divider|divider|StageOut[25]~1_combout\;
\convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[37]~0_combout\ <= NOT \convert_binary|Div0|auto_generated|divider|divider|StageOut[37]~0_combout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[77]~14_combout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|StageOut[77]~14_combout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[66]~13_combout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|StageOut[66]~13_combout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[55]~12_combout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|StageOut[55]~12_combout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[44]~11_combout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|StageOut[44]~11_combout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[33]~10_combout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|StageOut[33]~10_combout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[33]~9_combout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|StageOut[33]~9_combout\;
\convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[56]~21_combout\ <= NOT \convert_binary|Div3|auto_generated|divider|divider|StageOut[56]~21_combout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[72]~34_combout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|StageOut[72]~34_combout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[61]~33_combout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|StageOut[61]~33_combout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[50]~32_combout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|StageOut[50]~32_combout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[72]~31_combout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|StageOut[72]~31_combout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[72]~47_combout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|StageOut[72]~47_combout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[61]~46_combout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|StageOut[61]~46_combout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[50]~45_combout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|StageOut[50]~45_combout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[72]~44_combout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|StageOut[72]~44_combout\;
\convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[56]~21_combout\ <= NOT \convert_binary|Div1|auto_generated|divider|divider|StageOut[56]~21_combout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[72]~34_combout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|StageOut[72]~34_combout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[61]~33_combout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|StageOut[61]~33_combout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[50]~32_combout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|StageOut[50]~32_combout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[72]~31_combout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|StageOut[72]~31_combout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[72]~47_combout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|StageOut[72]~47_combout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[61]~46_combout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|StageOut[61]~46_combout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[50]~45_combout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|StageOut[50]~45_combout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[72]~44_combout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|StageOut[72]~44_combout\;
\convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[57]~20_combout\ <= NOT \convert_binary|Div3|auto_generated|divider|divider|StageOut[57]~20_combout\;
\convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[48]~19_combout\ <= NOT \convert_binary|Div3|auto_generated|divider|divider|StageOut[48]~19_combout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[73]~30_combout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|StageOut[73]~30_combout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[62]~29_combout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|StageOut[62]~29_combout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[51]~28_combout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|StageOut[51]~28_combout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[40]~27_combout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|StageOut[40]~27_combout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[62]~26_combout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|StageOut[62]~26_combout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[73]~43_combout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|StageOut[73]~43_combout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[62]~42_combout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|StageOut[62]~42_combout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[51]~41_combout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|StageOut[51]~41_combout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[40]~40_combout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|StageOut[40]~40_combout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[62]~39_combout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|StageOut[62]~39_combout\;
\convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[57]~20_combout\ <= NOT \convert_binary|Div1|auto_generated|divider|divider|StageOut[57]~20_combout\;
\convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[48]~19_combout\ <= NOT \convert_binary|Div1|auto_generated|divider|divider|StageOut[48]~19_combout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[73]~30_combout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|StageOut[73]~30_combout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[62]~29_combout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|StageOut[62]~29_combout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[51]~28_combout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|StageOut[51]~28_combout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[40]~27_combout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|StageOut[40]~27_combout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[62]~26_combout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|StageOut[62]~26_combout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[73]~43_combout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|StageOut[73]~43_combout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[62]~42_combout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|StageOut[62]~42_combout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[51]~41_combout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|StageOut[51]~41_combout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[40]~40_combout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|StageOut[40]~40_combout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[62]~39_combout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|StageOut[62]~39_combout\;
\convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[58]~18_combout\ <= NOT \convert_binary|Div3|auto_generated|divider|divider|StageOut[58]~18_combout\;
\convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[49]~17_combout\ <= NOT \convert_binary|Div3|auto_generated|divider|divider|StageOut[49]~17_combout\;
\convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[49]~16_combout\ <= NOT \convert_binary|Div3|auto_generated|divider|divider|StageOut[49]~16_combout\;
\convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[49]~15_combout\ <= NOT \convert_binary|Div3|auto_generated|divider|divider|StageOut[49]~15_combout\;
\convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[58]~14_combout\ <= NOT \convert_binary|Div3|auto_generated|divider|divider|StageOut[58]~14_combout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[74]~25_combout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|StageOut[74]~25_combout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[63]~24_combout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|StageOut[63]~24_combout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[52]~23_combout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|StageOut[52]~23_combout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[41]~22_combout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|StageOut[41]~22_combout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[52]~21_combout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|StageOut[52]~21_combout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[74]~20_combout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|StageOut[74]~20_combout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[74]~38_combout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|StageOut[74]~38_combout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[63]~37_combout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|StageOut[63]~37_combout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[52]~36_combout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|StageOut[52]~36_combout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[41]~35_combout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|StageOut[41]~35_combout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[30]~34_combout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|StageOut[30]~34_combout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[52]~33_combout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|StageOut[52]~33_combout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[74]~32_combout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|StageOut[74]~32_combout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[31]~31_combout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|StageOut[31]~31_combout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[31]~30_combout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|StageOut[31]~30_combout\;
\convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[58]~18_combout\ <= NOT \convert_binary|Div1|auto_generated|divider|divider|StageOut[58]~18_combout\;
\convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[49]~17_combout\ <= NOT \convert_binary|Div1|auto_generated|divider|divider|StageOut[49]~17_combout\;
\convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[49]~16_combout\ <= NOT \convert_binary|Div1|auto_generated|divider|divider|StageOut[49]~16_combout\;
\convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[49]~15_combout\ <= NOT \convert_binary|Div1|auto_generated|divider|divider|StageOut[49]~15_combout\;
\convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[58]~14_combout\ <= NOT \convert_binary|Div1|auto_generated|divider|divider|StageOut[58]~14_combout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[74]~25_combout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|StageOut[74]~25_combout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[63]~24_combout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|StageOut[63]~24_combout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[52]~23_combout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|StageOut[52]~23_combout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[41]~22_combout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|StageOut[41]~22_combout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[52]~21_combout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|StageOut[52]~21_combout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[74]~20_combout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|StageOut[74]~20_combout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[74]~38_combout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|StageOut[74]~38_combout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[63]~37_combout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|StageOut[63]~37_combout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[52]~36_combout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|StageOut[52]~36_combout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[41]~35_combout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|StageOut[41]~35_combout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[30]~34_combout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|StageOut[30]~34_combout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[52]~33_combout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|StageOut[52]~33_combout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[74]~32_combout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|StageOut[74]~32_combout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[31]~31_combout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|StageOut[31]~31_combout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[31]~30_combout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|StageOut[31]~30_combout\;
\convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[59]~13_combout\ <= NOT \convert_binary|Div3|auto_generated|divider|divider|StageOut[59]~13_combout\;
\convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[50]~12_combout\ <= NOT \convert_binary|Div3|auto_generated|divider|divider|StageOut[50]~12_combout\;
\convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[50]~11_combout\ <= NOT \convert_binary|Div3|auto_generated|divider|divider|StageOut[50]~11_combout\;
\convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[18]~23_combout\ <= NOT \convert_binary|Div2|auto_generated|divider|divider|StageOut[18]~23_combout\;
\convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[18]~22_combout\ <= NOT \convert_binary|Div2|auto_generated|divider|divider|StageOut[18]~22_combout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[75]~19_combout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|StageOut[75]~19_combout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[64]~18_combout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|StageOut[64]~18_combout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[53]~17_combout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|StageOut[53]~17_combout\;
\convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[64]~16_combout\ <= NOT \convert_binary|Mod3|auto_generated|divider|divider|StageOut[64]~16_combout\;
\convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[35]~21_combout\ <= NOT \convert_binary|Div2|auto_generated|divider|divider|StageOut[35]~21_combout\;
\convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[17]~20_combout\ <= NOT \convert_binary|Div2|auto_generated|divider|divider|StageOut[17]~20_combout\;
\convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[17]~19_combout\ <= NOT \convert_binary|Div2|auto_generated|divider|divider|StageOut[17]~19_combout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[75]~29_combout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|StageOut[75]~29_combout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[64]~28_combout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|StageOut[64]~28_combout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[53]~27_combout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|StageOut[53]~27_combout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[42]~26_combout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|StageOut[42]~26_combout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[31]~25_combout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|StageOut[31]~25_combout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[42]~24_combout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|StageOut[42]~24_combout\;
\convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[64]~23_combout\ <= NOT \convert_binary|Mod2|auto_generated|divider|divider|StageOut[64]~23_combout\;
\convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[59]~13_combout\ <= NOT \convert_binary|Div1|auto_generated|divider|divider|StageOut[59]~13_combout\;
\convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[50]~12_combout\ <= NOT \convert_binary|Div1|auto_generated|divider|divider|StageOut[50]~12_combout\;
\convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[50]~11_combout\ <= NOT \convert_binary|Div1|auto_generated|divider|divider|StageOut[50]~11_combout\;
\convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[18]~23_combout\ <= NOT \convert_binary|Div0|auto_generated|divider|divider|StageOut[18]~23_combout\;
\convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[18]~22_combout\ <= NOT \convert_binary|Div0|auto_generated|divider|divider|StageOut[18]~22_combout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[75]~19_combout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|StageOut[75]~19_combout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[64]~18_combout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|StageOut[64]~18_combout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[53]~17_combout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|StageOut[53]~17_combout\;
\convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[64]~16_combout\ <= NOT \convert_binary|Mod1|auto_generated|divider|divider|StageOut[64]~16_combout\;
\convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[35]~21_combout\ <= NOT \convert_binary|Div0|auto_generated|divider|divider|StageOut[35]~21_combout\;
\convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[17]~20_combout\ <= NOT \convert_binary|Div0|auto_generated|divider|divider|StageOut[17]~20_combout\;
\convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[17]~19_combout\ <= NOT \convert_binary|Div0|auto_generated|divider|divider|StageOut[17]~19_combout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[75]~29_combout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|StageOut[75]~29_combout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[64]~28_combout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|StageOut[64]~28_combout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[53]~27_combout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|StageOut[53]~27_combout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[42]~26_combout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|StageOut[42]~26_combout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[31]~25_combout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|StageOut[31]~25_combout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[42]~24_combout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|StageOut[42]~24_combout\;
\convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[64]~23_combout\ <= NOT \convert_binary|Mod0|auto_generated|divider|divider|StageOut[64]~23_combout\;
\convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[60]~10_combout\ <= NOT \convert_binary|Div3|auto_generated|divider|divider|StageOut[60]~10_combout\;
\ALT_INV_input_B[0]~input_o\ <= NOT \input_B[0]~input_o\;
\ALT_INV_input_A[0]~input_o\ <= NOT \input_A[0]~input_o\;
\ALT_INV_input_B[1]~input_o\ <= NOT \input_B[1]~input_o\;
\ALT_INV_input_A[1]~input_o\ <= NOT \input_A[1]~input_o\;
\ALT_INV_input_B[2]~input_o\ <= NOT \input_B[2]~input_o\;
\ALT_INV_input_A[2]~input_o\ <= NOT \input_A[2]~input_o\;
\ALT_INV_input_B[3]~input_o\ <= NOT \input_B[3]~input_o\;
\ALT_INV_input_A[3]~input_o\ <= NOT \input_A[3]~input_o\;
\ALT_INV_input_B[4]~input_o\ <= NOT \input_B[4]~input_o\;
\ALT_INV_input_A[4]~input_o\ <= NOT \input_A[4]~input_o\;
\ALT_INV_START_main~input_o\ <= NOT \START_main~input_o\;
\ALT_INV_RST_main~input_o\ <= NOT \RST_main~input_o\;
\ALT_INV_Operation[1]~input_o\ <= NOT \Operation[1]~input_o\;
\ALT_INV_Operation[0]~input_o\ <= NOT \Operation[0]~input_o\;

\Result[0]~output\ : cyclonev_io_obuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	open_drain_output => "false",
	shift_series_termination_control => "false")
-- pragma translate_on
PORT MAP (
	i => \Result[0]~reg0_q\,
	devoe => ww_devoe,
	o => \Result[0]~output_o\);

\Result[1]~output\ : cyclonev_io_obuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	open_drain_output => "false",
	shift_series_termination_control => "false")
-- pragma translate_on
PORT MAP (
	i => \Result[1]~reg0_q\,
	devoe => ww_devoe,
	o => \Result[1]~output_o\);

\Result[2]~output\ : cyclonev_io_obuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	open_drain_output => "false",
	shift_series_termination_control => "false")
-- pragma translate_on
PORT MAP (
	i => \Result[2]~reg0_q\,
	devoe => ww_devoe,
	o => \Result[2]~output_o\);

\Result[3]~output\ : cyclonev_io_obuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	open_drain_output => "false",
	shift_series_termination_control => "false")
-- pragma translate_on
PORT MAP (
	i => \Result[3]~reg0_q\,
	devoe => ww_devoe,
	o => \Result[3]~output_o\);

\Result[4]~output\ : cyclonev_io_obuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	open_drain_output => "false",
	shift_series_termination_control => "false")
-- pragma translate_on
PORT MAP (
	i => \Result[4]~reg0_q\,
	devoe => ww_devoe,
	o => \Result[4]~output_o\);

\Result[5]~output\ : cyclonev_io_obuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	open_drain_output => "false",
	shift_series_termination_control => "false")
-- pragma translate_on
PORT MAP (
	i => \Result[5]~reg0_q\,
	devoe => ww_devoe,
	o => \Result[5]~output_o\);

\Result[6]~output\ : cyclonev_io_obuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	open_drain_output => "false",
	shift_series_termination_control => "false")
-- pragma translate_on
PORT MAP (
	i => \Result[6]~reg0_q\,
	devoe => ww_devoe,
	o => \Result[6]~output_o\);

\Result[7]~output\ : cyclonev_io_obuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	open_drain_output => "false",
	shift_series_termination_control => "false")
-- pragma translate_on
PORT MAP (
	i => \Result[7]~reg0_q\,
	devoe => ww_devoe,
	o => \Result[7]~output_o\);

\Result[8]~output\ : cyclonev_io_obuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	open_drain_output => "false",
	shift_series_termination_control => "false")
-- pragma translate_on
PORT MAP (
	i => \Result[8]~reg0_q\,
	devoe => ww_devoe,
	o => \Result[8]~output_o\);

\Result[9]~output\ : cyclonev_io_obuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	open_drain_output => "false",
	shift_series_termination_control => "false")
-- pragma translate_on
PORT MAP (
	i => \Result[9]~reg0_q\,
	devoe => ww_devoe,
	o => \Result[9]~output_o\);

\Remainder[0]~output\ : cyclonev_io_obuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	open_drain_output => "false",
	shift_series_termination_control => "false")
-- pragma translate_on
PORT MAP (
	i => \Remainder[0]~reg0_q\,
	devoe => ww_devoe,
	o => \Remainder[0]~output_o\);

\Remainder[1]~output\ : cyclonev_io_obuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	open_drain_output => "false",
	shift_series_termination_control => "false")
-- pragma translate_on
PORT MAP (
	i => \Remainder[1]~reg0_q\,
	devoe => ww_devoe,
	o => \Remainder[1]~output_o\);

\Remainder[2]~output\ : cyclonev_io_obuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	open_drain_output => "false",
	shift_series_termination_control => "false")
-- pragma translate_on
PORT MAP (
	i => \Remainder[2]~reg0_q\,
	devoe => ww_devoe,
	o => \Remainder[2]~output_o\);

\Remainder[3]~output\ : cyclonev_io_obuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	open_drain_output => "false",
	shift_series_termination_control => "false")
-- pragma translate_on
PORT MAP (
	i => \Remainder[3]~reg0_q\,
	devoe => ww_devoe,
	o => \Remainder[3]~output_o\);

\Remainder[4]~output\ : cyclonev_io_obuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	open_drain_output => "false",
	shift_series_termination_control => "false")
-- pragma translate_on
PORT MAP (
	i => \Remainder[4]~reg0_q\,
	devoe => ww_devoe,
	o => \Remainder[4]~output_o\);

\Remainder[5]~output\ : cyclonev_io_obuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	open_drain_output => "false",
	shift_series_termination_control => "false")
-- pragma translate_on
PORT MAP (
	i => \Remainder[5]~reg0_q\,
	devoe => ww_devoe,
	o => \Remainder[5]~output_o\);

\Remainder[6]~output\ : cyclonev_io_obuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	open_drain_output => "false",
	shift_series_termination_control => "false")
-- pragma translate_on
PORT MAP (
	i => \Remainder[6]~reg0_q\,
	devoe => ww_devoe,
	o => \Remainder[6]~output_o\);

\Remainder[7]~output\ : cyclonev_io_obuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	open_drain_output => "false",
	shift_series_termination_control => "false")
-- pragma translate_on
PORT MAP (
	i => \Remainder[7]~reg0_q\,
	devoe => ww_devoe,
	o => \Remainder[7]~output_o\);

\Remainder[8]~output\ : cyclonev_io_obuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	open_drain_output => "false",
	shift_series_termination_control => "false")
-- pragma translate_on
PORT MAP (
	i => \Remainder[8]~reg0_q\,
	devoe => ww_devoe,
	o => \Remainder[8]~output_o\);

\Remainder[9]~output\ : cyclonev_io_obuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	open_drain_output => "false",
	shift_series_termination_control => "false")
-- pragma translate_on
PORT MAP (
	i => \Remainder[9]~reg0_q\,
	devoe => ww_devoe,
	o => \Remainder[9]~output_o\);

\sevenseg_digit_0[0]~output\ : cyclonev_io_obuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	open_drain_output => "false",
	shift_series_termination_control => "false")
-- pragma translate_on
PORT MAP (
	i => \seven_seg_display_1|seven_seg\(0),
	devoe => ww_devoe,
	o => \sevenseg_digit_0[0]~output_o\);

\sevenseg_digit_0[1]~output\ : cyclonev_io_obuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	open_drain_output => "false",
	shift_series_termination_control => "false")
-- pragma translate_on
PORT MAP (
	i => \seven_seg_display_1|seven_seg\(1),
	devoe => ww_devoe,
	o => \sevenseg_digit_0[1]~output_o\);

\sevenseg_digit_0[2]~output\ : cyclonev_io_obuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	open_drain_output => "false",
	shift_series_termination_control => "false")
-- pragma translate_on
PORT MAP (
	i => \seven_seg_display_1|seven_seg\(2),
	devoe => ww_devoe,
	o => \sevenseg_digit_0[2]~output_o\);

\sevenseg_digit_0[3]~output\ : cyclonev_io_obuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	open_drain_output => "false",
	shift_series_termination_control => "false")
-- pragma translate_on
PORT MAP (
	i => \seven_seg_display_1|seven_seg\(3),
	devoe => ww_devoe,
	o => \sevenseg_digit_0[3]~output_o\);

\sevenseg_digit_0[4]~output\ : cyclonev_io_obuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	open_drain_output => "false",
	shift_series_termination_control => "false")
-- pragma translate_on
PORT MAP (
	i => \seven_seg_display_1|seven_seg\(4),
	devoe => ww_devoe,
	o => \sevenseg_digit_0[4]~output_o\);

\sevenseg_digit_0[5]~output\ : cyclonev_io_obuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	open_drain_output => "false",
	shift_series_termination_control => "false")
-- pragma translate_on
PORT MAP (
	i => \seven_seg_display_1|seven_seg\(5),
	devoe => ww_devoe,
	o => \sevenseg_digit_0[5]~output_o\);

\sevenseg_digit_0[6]~output\ : cyclonev_io_obuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	open_drain_output => "false",
	shift_series_termination_control => "false")
-- pragma translate_on
PORT MAP (
	i => \seven_seg_display_1|seven_seg\(6),
	devoe => ww_devoe,
	o => \sevenseg_digit_0[6]~output_o\);

\sevenseg_digit_1[0]~output\ : cyclonev_io_obuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	open_drain_output => "false",
	shift_series_termination_control => "false")
-- pragma translate_on
PORT MAP (
	i => \seven_seg_display_2|seven_seg\(0),
	devoe => ww_devoe,
	o => \sevenseg_digit_1[0]~output_o\);

\sevenseg_digit_1[1]~output\ : cyclonev_io_obuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	open_drain_output => "false",
	shift_series_termination_control => "false")
-- pragma translate_on
PORT MAP (
	i => \seven_seg_display_2|seven_seg\(1),
	devoe => ww_devoe,
	o => \sevenseg_digit_1[1]~output_o\);

\sevenseg_digit_1[2]~output\ : cyclonev_io_obuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	open_drain_output => "false",
	shift_series_termination_control => "false")
-- pragma translate_on
PORT MAP (
	i => \seven_seg_display_2|seven_seg\(2),
	devoe => ww_devoe,
	o => \sevenseg_digit_1[2]~output_o\);

\sevenseg_digit_1[3]~output\ : cyclonev_io_obuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	open_drain_output => "false",
	shift_series_termination_control => "false")
-- pragma translate_on
PORT MAP (
	i => \seven_seg_display_2|seven_seg\(3),
	devoe => ww_devoe,
	o => \sevenseg_digit_1[3]~output_o\);

\sevenseg_digit_1[4]~output\ : cyclonev_io_obuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	open_drain_output => "false",
	shift_series_termination_control => "false")
-- pragma translate_on
PORT MAP (
	i => \seven_seg_display_2|seven_seg\(4),
	devoe => ww_devoe,
	o => \sevenseg_digit_1[4]~output_o\);

\sevenseg_digit_1[5]~output\ : cyclonev_io_obuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	open_drain_output => "false",
	shift_series_termination_control => "false")
-- pragma translate_on
PORT MAP (
	i => \seven_seg_display_2|seven_seg\(5),
	devoe => ww_devoe,
	o => \sevenseg_digit_1[5]~output_o\);

\sevenseg_digit_1[6]~output\ : cyclonev_io_obuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	open_drain_output => "false",
	shift_series_termination_control => "false")
-- pragma translate_on
PORT MAP (
	i => \seven_seg_display_2|seven_seg\(6),
	devoe => ww_devoe,
	o => \sevenseg_digit_1[6]~output_o\);

\sevenseg_digit_2[0]~output\ : cyclonev_io_obuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	open_drain_output => "false",
	shift_series_termination_control => "false")
-- pragma translate_on
PORT MAP (
	i => \seven_seg_display_3|seven_seg\(0),
	devoe => ww_devoe,
	o => \sevenseg_digit_2[0]~output_o\);

\sevenseg_digit_2[1]~output\ : cyclonev_io_obuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	open_drain_output => "false",
	shift_series_termination_control => "false")
-- pragma translate_on
PORT MAP (
	i => \seven_seg_display_3|seven_seg\(1),
	devoe => ww_devoe,
	o => \sevenseg_digit_2[1]~output_o\);

\sevenseg_digit_2[2]~output\ : cyclonev_io_obuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	open_drain_output => "false",
	shift_series_termination_control => "false")
-- pragma translate_on
PORT MAP (
	i => \seven_seg_display_3|seven_seg\(2),
	devoe => ww_devoe,
	o => \sevenseg_digit_2[2]~output_o\);

\sevenseg_digit_2[3]~output\ : cyclonev_io_obuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	open_drain_output => "false",
	shift_series_termination_control => "false")
-- pragma translate_on
PORT MAP (
	i => \seven_seg_display_3|seven_seg\(3),
	devoe => ww_devoe,
	o => \sevenseg_digit_2[3]~output_o\);

\sevenseg_digit_2[4]~output\ : cyclonev_io_obuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	open_drain_output => "false",
	shift_series_termination_control => "false")
-- pragma translate_on
PORT MAP (
	i => \seven_seg_display_3|seven_seg\(4),
	devoe => ww_devoe,
	o => \sevenseg_digit_2[4]~output_o\);

\sevenseg_digit_2[5]~output\ : cyclonev_io_obuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	open_drain_output => "false",
	shift_series_termination_control => "false")
-- pragma translate_on
PORT MAP (
	i => \seven_seg_display_3|seven_seg\(5),
	devoe => ww_devoe,
	o => \sevenseg_digit_2[5]~output_o\);

\sevenseg_digit_2[6]~output\ : cyclonev_io_obuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	open_drain_output => "false",
	shift_series_termination_control => "false")
-- pragma translate_on
PORT MAP (
	i => \seven_seg_display_3|seven_seg\(6),
	devoe => ww_devoe,
	o => \sevenseg_digit_2[6]~output_o\);

\sevenseg_digit_3[0]~output\ : cyclonev_io_obuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	open_drain_output => "false",
	shift_series_termination_control => "false")
-- pragma translate_on
PORT MAP (
	i => \seven_seg_display_4|seven_seg\(0),
	devoe => ww_devoe,
	o => \sevenseg_digit_3[0]~output_o\);

\sevenseg_digit_3[1]~output\ : cyclonev_io_obuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	open_drain_output => "false",
	shift_series_termination_control => "false")
-- pragma translate_on
PORT MAP (
	i => \seven_seg_display_4|seven_seg\(1),
	devoe => ww_devoe,
	o => \sevenseg_digit_3[1]~output_o\);

\sevenseg_digit_3[2]~output\ : cyclonev_io_obuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	open_drain_output => "false",
	shift_series_termination_control => "false")
-- pragma translate_on
PORT MAP (
	i => \seven_seg_display_4|seven_seg\(2),
	devoe => ww_devoe,
	o => \sevenseg_digit_3[2]~output_o\);

\sevenseg_digit_3[3]~output\ : cyclonev_io_obuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	open_drain_output => "false",
	shift_series_termination_control => "false")
-- pragma translate_on
PORT MAP (
	i => \seven_seg_display_4|seven_seg\(3),
	devoe => ww_devoe,
	o => \sevenseg_digit_3[3]~output_o\);

\sevenseg_digit_3[4]~output\ : cyclonev_io_obuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	open_drain_output => "false",
	shift_series_termination_control => "false")
-- pragma translate_on
PORT MAP (
	i => \seven_seg_display_4|seven_seg\(4),
	devoe => ww_devoe,
	o => \sevenseg_digit_3[4]~output_o\);

\sevenseg_digit_3[5]~output\ : cyclonev_io_obuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	open_drain_output => "false",
	shift_series_termination_control => "false")
-- pragma translate_on
PORT MAP (
	i => \seven_seg_display_4|seven_seg\(5),
	devoe => ww_devoe,
	o => \sevenseg_digit_3[5]~output_o\);

\sevenseg_digit_3[6]~output\ : cyclonev_io_obuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	open_drain_output => "false",
	shift_series_termination_control => "false")
-- pragma translate_on
PORT MAP (
	i => \seven_seg_display_4|seven_seg\(6),
	devoe => ww_devoe,
	o => \sevenseg_digit_3[6]~output_o\);

\sevenseg_digit_4[0]~output\ : cyclonev_io_obuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	open_drain_output => "false",
	shift_series_termination_control => "false")
-- pragma translate_on
PORT MAP (
	i => \seven_seg_display_5|seven_seg\(0),
	devoe => ww_devoe,
	o => \sevenseg_digit_4[0]~output_o\);

\sevenseg_digit_4[1]~output\ : cyclonev_io_obuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	open_drain_output => "false",
	shift_series_termination_control => "false")
-- pragma translate_on
PORT MAP (
	i => \seven_seg_display_5|seven_seg\(1),
	devoe => ww_devoe,
	o => \sevenseg_digit_4[1]~output_o\);

\sevenseg_digit_4[2]~output\ : cyclonev_io_obuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	open_drain_output => "false",
	shift_series_termination_control => "false")
-- pragma translate_on
PORT MAP (
	i => \seven_seg_display_5|seven_seg\(2),
	devoe => ww_devoe,
	o => \sevenseg_digit_4[2]~output_o\);

\sevenseg_digit_4[3]~output\ : cyclonev_io_obuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	open_drain_output => "false",
	shift_series_termination_control => "false")
-- pragma translate_on
PORT MAP (
	i => \seven_seg_display_5|seven_seg\(3),
	devoe => ww_devoe,
	o => \sevenseg_digit_4[3]~output_o\);

\sevenseg_digit_4[4]~output\ : cyclonev_io_obuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	open_drain_output => "false",
	shift_series_termination_control => "false")
-- pragma translate_on
PORT MAP (
	i => \seven_seg_display_5|seven_seg\(4),
	devoe => ww_devoe,
	o => \sevenseg_digit_4[4]~output_o\);

\sevenseg_digit_4[5]~output\ : cyclonev_io_obuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	open_drain_output => "false",
	shift_series_termination_control => "false")
-- pragma translate_on
PORT MAP (
	i => \seven_seg_display_5|seven_seg\(5),
	devoe => ww_devoe,
	o => \sevenseg_digit_4[5]~output_o\);

\sevenseg_digit_4[6]~output\ : cyclonev_io_obuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	open_drain_output => "false",
	shift_series_termination_control => "false")
-- pragma translate_on
PORT MAP (
	i => \seven_seg_display_5|seven_seg\(6),
	devoe => ww_devoe,
	o => \sevenseg_digit_4[6]~output_o\);

\sevenseg_digit_5[0]~output\ : cyclonev_io_obuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	open_drain_output => "false",
	shift_series_termination_control => "false")
-- pragma translate_on
PORT MAP (
	i => \seven_seg_display_6|seven_seg\(0),
	devoe => ww_devoe,
	o => \sevenseg_digit_5[0]~output_o\);

\sevenseg_digit_5[1]~output\ : cyclonev_io_obuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	open_drain_output => "false",
	shift_series_termination_control => "false")
-- pragma translate_on
PORT MAP (
	i => \seven_seg_display_6|seven_seg\(1),
	devoe => ww_devoe,
	o => \sevenseg_digit_5[1]~output_o\);

\sevenseg_digit_5[2]~output\ : cyclonev_io_obuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	open_drain_output => "false",
	shift_series_termination_control => "false")
-- pragma translate_on
PORT MAP (
	i => \seven_seg_display_6|seven_seg\(2),
	devoe => ww_devoe,
	o => \sevenseg_digit_5[2]~output_o\);

\sevenseg_digit_5[3]~output\ : cyclonev_io_obuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	open_drain_output => "false",
	shift_series_termination_control => "false")
-- pragma translate_on
PORT MAP (
	i => \seven_seg_display_6|seven_seg\(3),
	devoe => ww_devoe,
	o => \sevenseg_digit_5[3]~output_o\);

\sevenseg_digit_5[4]~output\ : cyclonev_io_obuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	open_drain_output => "false",
	shift_series_termination_control => "false")
-- pragma translate_on
PORT MAP (
	i => \seven_seg_display_6|seven_seg\(4),
	devoe => ww_devoe,
	o => \sevenseg_digit_5[4]~output_o\);

\sevenseg_digit_5[5]~output\ : cyclonev_io_obuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	open_drain_output => "false",
	shift_series_termination_control => "false")
-- pragma translate_on
PORT MAP (
	i => \seven_seg_display_6|seven_seg\(5),
	devoe => ww_devoe,
	o => \sevenseg_digit_5[5]~output_o\);

\sevenseg_digit_5[6]~output\ : cyclonev_io_obuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	open_drain_output => "false",
	shift_series_termination_control => "false")
-- pragma translate_on
PORT MAP (
	i => \seven_seg_display_6|seven_seg\(6),
	devoe => ww_devoe,
	o => \sevenseg_digit_5[6]~output_o\);

\COUT~output\ : cyclonev_io_obuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	open_drain_output => "false",
	shift_series_termination_control => "false")
-- pragma translate_on
PORT MAP (
	i => \COUT~reg0_q\,
	devoe => ww_devoe,
	o => \COUT~output_o\);

\DONE_main~output\ : cyclonev_io_obuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	open_drain_output => "false",
	shift_series_termination_control => "false")
-- pragma translate_on
PORT MAP (
	i => \DONE_main~reg0_q\,
	devoe => ww_devoe,
	o => \DONE_main~output_o\);

\CLK_main~input\ : cyclonev_io_ibuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	simulate_z_as => "z")
-- pragma translate_on
PORT MAP (
	i => ww_CLK_main,
	o => \CLK_main~input_o\);

\input_B[4]~input\ : cyclonev_io_ibuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	simulate_z_as => "z")
-- pragma translate_on
PORT MAP (
	i => ww_input_B(4),
	o => \input_B[4]~input_o\);

\RST_main~input\ : cyclonev_io_ibuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	simulate_z_as => "z")
-- pragma translate_on
PORT MAP (
	i => ww_RST_main,
	o => \RST_main~input_o\);

\Operation[0]~input\ : cyclonev_io_ibuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	simulate_z_as => "z")
-- pragma translate_on
PORT MAP (
	i => ww_Operation(0),
	o => \Operation[0]~input_o\);

\Operation[1]~input\ : cyclonev_io_ibuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	simulate_z_as => "z")
-- pragma translate_on
PORT MAP (
	i => ww_Operation(1),
	o => \Operation[1]~input_o\);

\START_main~input\ : cyclonev_io_ibuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	simulate_z_as => "z")
-- pragma translate_on
PORT MAP (
	i => ww_START_main,
	o => \START_main~input_o\);

\Start_division~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \Start_division~0_combout\ = (!\START_main~input_o\) # (\Start_division~q\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "1011101110111011101110111011101110111011101110111011101110111011",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_START_main~input_o\,
	datab => \ALT_INV_Start_division~q\,
	combout => \Start_division~0_combout\);

Start_division : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \Start_division~0_combout\,
	sclr => \state~q\,
	ena => \RST_main~input_o\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \Start_division~q\);

\division_function|Add2~125\ : cyclonev_lcell_comb
-- Equation(s):
-- \division_function|Add2~125_sumout\ = SUM(( \division_function|bit_counter\(0) ) + ( VCC ) + ( !VCC ))
-- \division_function|Add2~126\ = CARRY(( \division_function|bit_counter\(0) ) + ( VCC ) + ( !VCC ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \division_function|ALT_INV_bit_counter\(0),
	cin => GND,
	sumout => \division_function|Add2~125_sumout\,
	cout => \division_function|Add2~126\);

\division_function|Selector16~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \division_function|Selector16~0_combout\ = (!\division_function|state.s0~q\ & (!\Start_division~q\ & ((!\division_function|state.s1~q\) # (\division_function|LessThan0~5_combout\)))) # (\division_function|state.s0~q\ & (((!\division_function|state.s1~q\)) 
-- # (\division_function|LessThan0~5_combout\)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "1111001101010001111100110101000111110011010100011111001101010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \division_function|ALT_INV_state.s0~q\,
	datab => \division_function|ALT_INV_LessThan0~5_combout\,
	datac => \division_function|ALT_INV_state.s1~q\,
	datad => \ALT_INV_Start_division~q\,
	combout => \division_function|Selector16~0_combout\);

\division_function|state.s0\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \division_function|Selector16~0_combout\,
	clrn => \RST_main~input_o\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division_function|state.s0~q\);

\division_function|Selector11~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \division_function|Selector11~0_combout\ = (!\division_function|state.s0~q\ & !\Start_division~q\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "1000100010001000100010001000100010001000100010001000100010001000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \division_function|ALT_INV_state.s0~q\,
	datab => \ALT_INV_Start_division~q\,
	combout => \division_function|Selector11~0_combout\);

\division_function|state.s1\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => VCC,
	asdata => \division_function|Selector11~0_combout\,
	clrn => \RST_main~input_o\,
	sload => \division_function|ALT_INV_state.s2~q\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division_function|state.s1~q\);

\division_function|bit_counter[16]~2\ : cyclonev_lcell_comb
-- Equation(s):
-- \division_function|bit_counter[16]~2_combout\ = (\division_function|LessThan0~5_combout\ & \division_function|state.s1~q\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \division_function|ALT_INV_LessThan0~5_combout\,
	datab => \division_function|ALT_INV_state.s1~q\,
	combout => \division_function|bit_counter[16]~2_combout\);

\division_function|state.s2\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \division_function|bit_counter[16]~2_combout\,
	clrn => \RST_main~input_o\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division_function|state.s2~q\);

\division_function|bit_counter[1]~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \division_function|bit_counter[1]~1_combout\ = (\RST_main~input_o\ & (\division_function|state.s0~q\ & ((!\division_function|LessThan0~5_combout\) # (!\division_function|state.s1~q\))))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010000000100010001000000010001000100000001000100010000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_RST_main~input_o\,
	datab => \division_function|ALT_INV_state.s0~q\,
	datac => \division_function|ALT_INV_LessThan0~5_combout\,
	datad => \division_function|ALT_INV_state.s1~q\,
	combout => \division_function|bit_counter[1]~1_combout\);

\division_function|bit_counter[0]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \division_function|Add2~125_sumout\,
	sclr => \division_function|ALT_INV_state.s2~q\,
	ena => \division_function|bit_counter[1]~1_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division_function|bit_counter\(0));

\division_function|Add2~77\ : cyclonev_lcell_comb
-- Equation(s):
-- \division_function|Add2~77_sumout\ = SUM(( \division_function|bit_counter\(1) ) + ( GND ) + ( \division_function|Add2~126\ ))
-- \division_function|Add2~78\ = CARRY(( \division_function|bit_counter\(1) ) + ( GND ) + ( \division_function|Add2~126\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \division_function|ALT_INV_bit_counter\(1),
	cin => \division_function|Add2~126\,
	sumout => \division_function|Add2~77_sumout\,
	cout => \division_function|Add2~78\);

\division_function|bit_counter[1]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \division_function|Add2~77_sumout\,
	sclr => \division_function|ALT_INV_state.s2~q\,
	ena => \division_function|bit_counter[1]~1_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division_function|bit_counter\(1));

\division_function|Add2~81\ : cyclonev_lcell_comb
-- Equation(s):
-- \division_function|Add2~81_sumout\ = SUM(( \division_function|bit_counter\(2) ) + ( GND ) + ( \division_function|Add2~78\ ))
-- \division_function|Add2~82\ = CARRY(( \division_function|bit_counter\(2) ) + ( GND ) + ( \division_function|Add2~78\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \division_function|ALT_INV_bit_counter\(2),
	cin => \division_function|Add2~78\,
	sumout => \division_function|Add2~81_sumout\,
	cout => \division_function|Add2~82\);

\division_function|bit_counter[2]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \division_function|Add2~81_sumout\,
	sclr => \division_function|ALT_INV_state.s2~q\,
	ena => \division_function|bit_counter[1]~1_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division_function|bit_counter\(2));

\division_function|Add2~121\ : cyclonev_lcell_comb
-- Equation(s):
-- \division_function|Add2~121_sumout\ = SUM(( \division_function|bit_counter\(3) ) + ( GND ) + ( \division_function|Add2~82\ ))
-- \division_function|Add2~122\ = CARRY(( \division_function|bit_counter\(3) ) + ( GND ) + ( \division_function|Add2~82\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \division_function|ALT_INV_bit_counter\(3),
	cin => \division_function|Add2~82\,
	sumout => \division_function|Add2~121_sumout\,
	cout => \division_function|Add2~122\);

\division_function|bit_counter[3]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \division_function|Add2~121_sumout\,
	sclr => \division_function|ALT_INV_state.s2~q\,
	ena => \division_function|bit_counter[1]~1_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division_function|bit_counter\(3));

\division_function|Add2~53\ : cyclonev_lcell_comb
-- Equation(s):
-- \division_function|Add2~53_sumout\ = SUM(( \division_function|bit_counter\(4) ) + ( GND ) + ( \division_function|Add2~122\ ))
-- \division_function|Add2~54\ = CARRY(( \division_function|bit_counter\(4) ) + ( GND ) + ( \division_function|Add2~122\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \division_function|ALT_INV_bit_counter\(4),
	cin => \division_function|Add2~122\,
	sumout => \division_function|Add2~53_sumout\,
	cout => \division_function|Add2~54\);

\division_function|bit_counter[4]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \division_function|Add2~53_sumout\,
	sclr => \division_function|ALT_INV_state.s2~q\,
	ena => \division_function|bit_counter[1]~1_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division_function|bit_counter\(4));

\division_function|Add2~57\ : cyclonev_lcell_comb
-- Equation(s):
-- \division_function|Add2~57_sumout\ = SUM(( \division_function|bit_counter\(5) ) + ( GND ) + ( \division_function|Add2~54\ ))
-- \division_function|Add2~58\ = CARRY(( \division_function|bit_counter\(5) ) + ( GND ) + ( \division_function|Add2~54\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \division_function|ALT_INV_bit_counter\(5),
	cin => \division_function|Add2~54\,
	sumout => \division_function|Add2~57_sumout\,
	cout => \division_function|Add2~58\);

\division_function|bit_counter[5]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \division_function|Add2~57_sumout\,
	sclr => \division_function|ALT_INV_state.s2~q\,
	ena => \division_function|bit_counter[1]~1_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division_function|bit_counter\(5));

\division_function|Add2~105\ : cyclonev_lcell_comb
-- Equation(s):
-- \division_function|Add2~105_sumout\ = SUM(( \division_function|bit_counter\(6) ) + ( GND ) + ( \division_function|Add2~58\ ))
-- \division_function|Add2~106\ = CARRY(( \division_function|bit_counter\(6) ) + ( GND ) + ( \division_function|Add2~58\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \division_function|ALT_INV_bit_counter\(6),
	cin => \division_function|Add2~58\,
	sumout => \division_function|Add2~105_sumout\,
	cout => \division_function|Add2~106\);

\division_function|bit_counter[6]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \division_function|Add2~105_sumout\,
	sclr => \division_function|ALT_INV_state.s2~q\,
	ena => \division_function|bit_counter[1]~1_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division_function|bit_counter\(6));

\division_function|Add2~65\ : cyclonev_lcell_comb
-- Equation(s):
-- \division_function|Add2~65_sumout\ = SUM(( \division_function|bit_counter\(7) ) + ( GND ) + ( \division_function|Add2~106\ ))
-- \division_function|Add2~66\ = CARRY(( \division_function|bit_counter\(7) ) + ( GND ) + ( \division_function|Add2~106\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \division_function|ALT_INV_bit_counter\(7),
	cin => \division_function|Add2~106\,
	sumout => \division_function|Add2~65_sumout\,
	cout => \division_function|Add2~66\);

\division_function|bit_counter[7]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \division_function|Add2~65_sumout\,
	sclr => \division_function|ALT_INV_state.s2~q\,
	ena => \division_function|bit_counter[1]~1_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division_function|bit_counter\(7));

\division_function|Add2~69\ : cyclonev_lcell_comb
-- Equation(s):
-- \division_function|Add2~69_sumout\ = SUM(( \division_function|bit_counter\(8) ) + ( GND ) + ( \division_function|Add2~66\ ))
-- \division_function|Add2~70\ = CARRY(( \division_function|bit_counter\(8) ) + ( GND ) + ( \division_function|Add2~66\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \division_function|ALT_INV_bit_counter\(8),
	cin => \division_function|Add2~66\,
	sumout => \division_function|Add2~69_sumout\,
	cout => \division_function|Add2~70\);

\division_function|bit_counter[8]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \division_function|Add2~69_sumout\,
	sclr => \division_function|ALT_INV_state.s2~q\,
	ena => \division_function|bit_counter[1]~1_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division_function|bit_counter\(8));

\division_function|Add2~73\ : cyclonev_lcell_comb
-- Equation(s):
-- \division_function|Add2~73_sumout\ = SUM(( \division_function|bit_counter\(9) ) + ( GND ) + ( \division_function|Add2~70\ ))
-- \division_function|Add2~74\ = CARRY(( \division_function|bit_counter\(9) ) + ( GND ) + ( \division_function|Add2~70\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \division_function|ALT_INV_bit_counter\(9),
	cin => \division_function|Add2~70\,
	sumout => \division_function|Add2~73_sumout\,
	cout => \division_function|Add2~74\);

\division_function|bit_counter[9]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \division_function|Add2~73_sumout\,
	sclr => \division_function|ALT_INV_state.s2~q\,
	ena => \division_function|bit_counter[1]~1_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division_function|bit_counter\(9));

\division_function|Add2~45\ : cyclonev_lcell_comb
-- Equation(s):
-- \division_function|Add2~45_sumout\ = SUM(( \division_function|bit_counter\(10) ) + ( GND ) + ( \division_function|Add2~74\ ))
-- \division_function|Add2~46\ = CARRY(( \division_function|bit_counter\(10) ) + ( GND ) + ( \division_function|Add2~74\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \division_function|ALT_INV_bit_counter\(10),
	cin => \division_function|Add2~74\,
	sumout => \division_function|Add2~45_sumout\,
	cout => \division_function|Add2~46\);

\division_function|bit_counter[10]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \division_function|Add2~45_sumout\,
	sclr => \division_function|ALT_INV_state.s2~q\,
	ena => \division_function|bit_counter[1]~1_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division_function|bit_counter\(10));

\division_function|Add2~29\ : cyclonev_lcell_comb
-- Equation(s):
-- \division_function|Add2~29_sumout\ = SUM(( \division_function|bit_counter\(11) ) + ( GND ) + ( \division_function|Add2~46\ ))
-- \division_function|Add2~30\ = CARRY(( \division_function|bit_counter\(11) ) + ( GND ) + ( \division_function|Add2~46\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \division_function|ALT_INV_bit_counter\(11),
	cin => \division_function|Add2~46\,
	sumout => \division_function|Add2~29_sumout\,
	cout => \division_function|Add2~30\);

\division_function|bit_counter[11]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \division_function|Add2~29_sumout\,
	sclr => \division_function|ALT_INV_state.s2~q\,
	ena => \division_function|bit_counter[1]~1_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division_function|bit_counter\(11));

\division_function|Add2~33\ : cyclonev_lcell_comb
-- Equation(s):
-- \division_function|Add2~33_sumout\ = SUM(( \division_function|bit_counter\(12) ) + ( GND ) + ( \division_function|Add2~30\ ))
-- \division_function|Add2~34\ = CARRY(( \division_function|bit_counter\(12) ) + ( GND ) + ( \division_function|Add2~30\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \division_function|ALT_INV_bit_counter\(12),
	cin => \division_function|Add2~30\,
	sumout => \division_function|Add2~33_sumout\,
	cout => \division_function|Add2~34\);

\division_function|bit_counter[12]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \division_function|Add2~33_sumout\,
	sclr => \division_function|ALT_INV_state.s2~q\,
	ena => \division_function|bit_counter[1]~1_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division_function|bit_counter\(12));

\division_function|Add2~37\ : cyclonev_lcell_comb
-- Equation(s):
-- \division_function|Add2~37_sumout\ = SUM(( \division_function|bit_counter\(13) ) + ( GND ) + ( \division_function|Add2~34\ ))
-- \division_function|Add2~38\ = CARRY(( \division_function|bit_counter\(13) ) + ( GND ) + ( \division_function|Add2~34\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \division_function|ALT_INV_bit_counter\(13),
	cin => \division_function|Add2~34\,
	sumout => \division_function|Add2~37_sumout\,
	cout => \division_function|Add2~38\);

\division_function|bit_counter[13]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \division_function|Add2~37_sumout\,
	sclr => \division_function|ALT_INV_state.s2~q\,
	ena => \division_function|bit_counter[1]~1_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division_function|bit_counter\(13));

\division_function|Add2~41\ : cyclonev_lcell_comb
-- Equation(s):
-- \division_function|Add2~41_sumout\ = SUM(( \division_function|bit_counter\(14) ) + ( GND ) + ( \division_function|Add2~38\ ))
-- \division_function|Add2~42\ = CARRY(( \division_function|bit_counter\(14) ) + ( GND ) + ( \division_function|Add2~38\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \division_function|ALT_INV_bit_counter\(14),
	cin => \division_function|Add2~38\,
	sumout => \division_function|Add2~41_sumout\,
	cout => \division_function|Add2~42\);

\division_function|bit_counter[14]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \division_function|Add2~41_sumout\,
	sclr => \division_function|ALT_INV_state.s2~q\,
	ena => \division_function|bit_counter[1]~1_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division_function|bit_counter\(14));

\division_function|Add2~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \division_function|Add2~13_sumout\ = SUM(( \division_function|bit_counter\(15) ) + ( GND ) + ( \division_function|Add2~42\ ))
-- \division_function|Add2~14\ = CARRY(( \division_function|bit_counter\(15) ) + ( GND ) + ( \division_function|Add2~42\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \division_function|ALT_INV_bit_counter\(15),
	cin => \division_function|Add2~42\,
	sumout => \division_function|Add2~13_sumout\,
	cout => \division_function|Add2~14\);

\division_function|bit_counter[15]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \division_function|Add2~13_sumout\,
	sclr => \division_function|ALT_INV_state.s2~q\,
	ena => \division_function|bit_counter[1]~1_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division_function|bit_counter\(15));

\division_function|Add2~85\ : cyclonev_lcell_comb
-- Equation(s):
-- \division_function|Add2~85_sumout\ = SUM(( \division_function|bit_counter\(16) ) + ( GND ) + ( \division_function|Add2~14\ ))
-- \division_function|Add2~86\ = CARRY(( \division_function|bit_counter\(16) ) + ( GND ) + ( \division_function|Add2~14\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \division_function|ALT_INV_bit_counter\(16),
	cin => \division_function|Add2~14\,
	sumout => \division_function|Add2~85_sumout\,
	cout => \division_function|Add2~86\);

\division_function|bit_counter[16]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \division_function|Add2~85_sumout\,
	sclr => \division_function|ALT_INV_state.s2~q\,
	ena => \division_function|bit_counter[1]~1_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division_function|bit_counter\(16));

\division_function|Add2~89\ : cyclonev_lcell_comb
-- Equation(s):
-- \division_function|Add2~89_sumout\ = SUM(( \division_function|bit_counter\(17) ) + ( GND ) + ( \division_function|Add2~86\ ))
-- \division_function|Add2~90\ = CARRY(( \division_function|bit_counter\(17) ) + ( GND ) + ( \division_function|Add2~86\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \division_function|ALT_INV_bit_counter\(17),
	cin => \division_function|Add2~86\,
	sumout => \division_function|Add2~89_sumout\,
	cout => \division_function|Add2~90\);

\division_function|bit_counter[17]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \division_function|Add2~89_sumout\,
	sclr => \division_function|ALT_INV_state.s2~q\,
	ena => \division_function|bit_counter[1]~1_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division_function|bit_counter\(17));

\division_function|Add2~93\ : cyclonev_lcell_comb
-- Equation(s):
-- \division_function|Add2~93_sumout\ = SUM(( \division_function|bit_counter\(18) ) + ( GND ) + ( \division_function|Add2~90\ ))
-- \division_function|Add2~94\ = CARRY(( \division_function|bit_counter\(18) ) + ( GND ) + ( \division_function|Add2~90\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \division_function|ALT_INV_bit_counter\(18),
	cin => \division_function|Add2~90\,
	sumout => \division_function|Add2~93_sumout\,
	cout => \division_function|Add2~94\);

\division_function|bit_counter[18]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \division_function|Add2~93_sumout\,
	sclr => \division_function|ALT_INV_state.s2~q\,
	ena => \division_function|bit_counter[1]~1_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division_function|bit_counter\(18));

\division_function|Add2~97\ : cyclonev_lcell_comb
-- Equation(s):
-- \division_function|Add2~97_sumout\ = SUM(( \division_function|bit_counter\(19) ) + ( GND ) + ( \division_function|Add2~94\ ))
-- \division_function|Add2~98\ = CARRY(( \division_function|bit_counter\(19) ) + ( GND ) + ( \division_function|Add2~94\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \division_function|ALT_INV_bit_counter\(19),
	cin => \division_function|Add2~94\,
	sumout => \division_function|Add2~97_sumout\,
	cout => \division_function|Add2~98\);

\division_function|bit_counter[19]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \division_function|Add2~97_sumout\,
	sclr => \division_function|ALT_INV_state.s2~q\,
	ena => \division_function|bit_counter[1]~1_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division_function|bit_counter\(19));

\division_function|Add2~101\ : cyclonev_lcell_comb
-- Equation(s):
-- \division_function|Add2~101_sumout\ = SUM(( \division_function|bit_counter\(20) ) + ( GND ) + ( \division_function|Add2~98\ ))
-- \division_function|Add2~102\ = CARRY(( \division_function|bit_counter\(20) ) + ( GND ) + ( \division_function|Add2~98\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \division_function|ALT_INV_bit_counter\(20),
	cin => \division_function|Add2~98\,
	sumout => \division_function|Add2~101_sumout\,
	cout => \division_function|Add2~102\);

\division_function|bit_counter[20]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \division_function|Add2~101_sumout\,
	sclr => \division_function|ALT_INV_state.s2~q\,
	ena => \division_function|bit_counter[1]~1_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division_function|bit_counter\(20));

\division_function|Add2~113\ : cyclonev_lcell_comb
-- Equation(s):
-- \division_function|Add2~113_sumout\ = SUM(( \division_function|bit_counter\(21) ) + ( GND ) + ( \division_function|Add2~102\ ))
-- \division_function|Add2~114\ = CARRY(( \division_function|bit_counter\(21) ) + ( GND ) + ( \division_function|Add2~102\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \division_function|ALT_INV_bit_counter\(21),
	cin => \division_function|Add2~102\,
	sumout => \division_function|Add2~113_sumout\,
	cout => \division_function|Add2~114\);

\division_function|bit_counter[21]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \division_function|Add2~113_sumout\,
	sclr => \division_function|ALT_INV_state.s2~q\,
	ena => \division_function|bit_counter[1]~1_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division_function|bit_counter\(21));

\division_function|Add2~117\ : cyclonev_lcell_comb
-- Equation(s):
-- \division_function|Add2~117_sumout\ = SUM(( \division_function|bit_counter\(22) ) + ( GND ) + ( \division_function|Add2~114\ ))
-- \division_function|Add2~118\ = CARRY(( \division_function|bit_counter\(22) ) + ( GND ) + ( \division_function|Add2~114\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \division_function|ALT_INV_bit_counter\(22),
	cin => \division_function|Add2~114\,
	sumout => \division_function|Add2~117_sumout\,
	cout => \division_function|Add2~118\);

\division_function|bit_counter[22]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \division_function|Add2~117_sumout\,
	sclr => \division_function|ALT_INV_state.s2~q\,
	ena => \division_function|bit_counter[1]~1_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division_function|bit_counter\(22));

\division_function|Add2~61\ : cyclonev_lcell_comb
-- Equation(s):
-- \division_function|Add2~61_sumout\ = SUM(( \division_function|bit_counter\(23) ) + ( GND ) + ( \division_function|Add2~118\ ))
-- \division_function|Add2~62\ = CARRY(( \division_function|bit_counter\(23) ) + ( GND ) + ( \division_function|Add2~118\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \division_function|ALT_INV_bit_counter\(23),
	cin => \division_function|Add2~118\,
	sumout => \division_function|Add2~61_sumout\,
	cout => \division_function|Add2~62\);

\division_function|bit_counter[23]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \division_function|Add2~61_sumout\,
	sclr => \division_function|ALT_INV_state.s2~q\,
	ena => \division_function|bit_counter[1]~1_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division_function|bit_counter\(23));

\division_function|Add2~109\ : cyclonev_lcell_comb
-- Equation(s):
-- \division_function|Add2~109_sumout\ = SUM(( \division_function|bit_counter\(24) ) + ( GND ) + ( \division_function|Add2~62\ ))
-- \division_function|Add2~110\ = CARRY(( \division_function|bit_counter\(24) ) + ( GND ) + ( \division_function|Add2~62\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \division_function|ALT_INV_bit_counter\(24),
	cin => \division_function|Add2~62\,
	sumout => \division_function|Add2~109_sumout\,
	cout => \division_function|Add2~110\);

\division_function|bit_counter[24]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \division_function|Add2~109_sumout\,
	sclr => \division_function|ALT_INV_state.s2~q\,
	ena => \division_function|bit_counter[1]~1_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division_function|bit_counter\(24));

\division_function|Add2~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \division_function|Add2~9_sumout\ = SUM(( \division_function|bit_counter\(25) ) + ( GND ) + ( \division_function|Add2~110\ ))
-- \division_function|Add2~10\ = CARRY(( \division_function|bit_counter\(25) ) + ( GND ) + ( \division_function|Add2~110\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \division_function|ALT_INV_bit_counter\(25),
	cin => \division_function|Add2~110\,
	sumout => \division_function|Add2~9_sumout\,
	cout => \division_function|Add2~10\);

\division_function|bit_counter[25]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \division_function|Add2~9_sumout\,
	sclr => \division_function|ALT_INV_state.s2~q\,
	ena => \division_function|bit_counter[1]~1_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division_function|bit_counter\(25));

\division_function|Add2~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \division_function|Add2~5_sumout\ = SUM(( \division_function|bit_counter\(26) ) + ( GND ) + ( \division_function|Add2~10\ ))
-- \division_function|Add2~6\ = CARRY(( \division_function|bit_counter\(26) ) + ( GND ) + ( \division_function|Add2~10\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \division_function|ALT_INV_bit_counter\(26),
	cin => \division_function|Add2~10\,
	sumout => \division_function|Add2~5_sumout\,
	cout => \division_function|Add2~6\);

\division_function|bit_counter[26]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \division_function|Add2~5_sumout\,
	sclr => \division_function|ALT_INV_state.s2~q\,
	ena => \division_function|bit_counter[1]~1_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division_function|bit_counter\(26));

\division_function|Add2~49\ : cyclonev_lcell_comb
-- Equation(s):
-- \division_function|Add2~49_sumout\ = SUM(( \division_function|bit_counter\(27) ) + ( GND ) + ( \division_function|Add2~6\ ))
-- \division_function|Add2~50\ = CARRY(( \division_function|bit_counter\(27) ) + ( GND ) + ( \division_function|Add2~6\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \division_function|ALT_INV_bit_counter\(27),
	cin => \division_function|Add2~6\,
	sumout => \division_function|Add2~49_sumout\,
	cout => \division_function|Add2~50\);

\division_function|bit_counter[27]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \division_function|Add2~49_sumout\,
	sclr => \division_function|ALT_INV_state.s2~q\,
	ena => \division_function|bit_counter[1]~1_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division_function|bit_counter\(27));

\division_function|Add2~17\ : cyclonev_lcell_comb
-- Equation(s):
-- \division_function|Add2~17_sumout\ = SUM(( \division_function|bit_counter\(28) ) + ( GND ) + ( \division_function|Add2~50\ ))
-- \division_function|Add2~18\ = CARRY(( \division_function|bit_counter\(28) ) + ( GND ) + ( \division_function|Add2~50\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \division_function|ALT_INV_bit_counter\(28),
	cin => \division_function|Add2~50\,
	sumout => \division_function|Add2~17_sumout\,
	cout => \division_function|Add2~18\);

\division_function|bit_counter[28]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \division_function|Add2~17_sumout\,
	sclr => \division_function|ALT_INV_state.s2~q\,
	ena => \division_function|bit_counter[1]~1_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division_function|bit_counter\(28));

\division_function|Add2~21\ : cyclonev_lcell_comb
-- Equation(s):
-- \division_function|Add2~21_sumout\ = SUM(( \division_function|bit_counter\(29) ) + ( GND ) + ( \division_function|Add2~18\ ))
-- \division_function|Add2~22\ = CARRY(( \division_function|bit_counter\(29) ) + ( GND ) + ( \division_function|Add2~18\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \division_function|ALT_INV_bit_counter\(29),
	cin => \division_function|Add2~18\,
	sumout => \division_function|Add2~21_sumout\,
	cout => \division_function|Add2~22\);

\division_function|bit_counter[29]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \division_function|Add2~21_sumout\,
	sclr => \division_function|ALT_INV_state.s2~q\,
	ena => \division_function|bit_counter[1]~1_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division_function|bit_counter\(29));

\division_function|Add2~25\ : cyclonev_lcell_comb
-- Equation(s):
-- \division_function|Add2~25_sumout\ = SUM(( \division_function|bit_counter\(30) ) + ( GND ) + ( \division_function|Add2~22\ ))
-- \division_function|Add2~26\ = CARRY(( \division_function|bit_counter\(30) ) + ( GND ) + ( \division_function|Add2~22\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \division_function|ALT_INV_bit_counter\(30),
	cin => \division_function|Add2~22\,
	sumout => \division_function|Add2~25_sumout\,
	cout => \division_function|Add2~26\);

\division_function|bit_counter[30]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \division_function|Add2~25_sumout\,
	sclr => \division_function|ALT_INV_state.s2~q\,
	ena => \division_function|bit_counter[1]~1_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division_function|bit_counter\(30));

\division_function|Add2~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \division_function|Add2~1_sumout\ = SUM(( \division_function|bit_counter\(31) ) + ( GND ) + ( \division_function|Add2~26\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \division_function|ALT_INV_bit_counter\(31),
	cin => \division_function|Add2~26\,
	sumout => \division_function|Add2~1_sumout\);

\division_function|bit_counter[31]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \division_function|Add2~1_sumout\,
	asdata => \division_function|bit_counter\(31),
	sload => \division_function|ALT_INV_state.s2~q\,
	ena => \RST_main~input_o\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division_function|bit_counter\(31));

\division_function|LessThan0~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \division_function|LessThan0~0_combout\ = ( !\division_function|bit_counter\(29) & ( !\division_function|bit_counter\(30) & ( (!\division_function|bit_counter\(26) & (!\division_function|bit_counter\(25) & (!\division_function|bit_counter\(15) & 
-- !\division_function|bit_counter\(28)))) ) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "1000000000000000000000000000000000000000000000000000000000000000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \division_function|ALT_INV_bit_counter\(26),
	datab => \division_function|ALT_INV_bit_counter\(25),
	datac => \division_function|ALT_INV_bit_counter\(15),
	datad => \division_function|ALT_INV_bit_counter\(28),
	datae => \division_function|ALT_INV_bit_counter\(29),
	dataf => \division_function|ALT_INV_bit_counter\(30),
	combout => \division_function|LessThan0~0_combout\);

\division_function|LessThan0~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \division_function|LessThan0~1_combout\ = ( !\division_function|bit_counter\(10) & ( !\division_function|bit_counter\(27) & ( (!\division_function|bit_counter\(11) & (!\division_function|bit_counter\(12) & (!\division_function|bit_counter\(13) & 
-- !\division_function|bit_counter\(14)))) ) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "1000000000000000000000000000000000000000000000000000000000000000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \division_function|ALT_INV_bit_counter\(11),
	datab => \division_function|ALT_INV_bit_counter\(12),
	datac => \division_function|ALT_INV_bit_counter\(13),
	datad => \division_function|ALT_INV_bit_counter\(14),
	datae => \division_function|ALT_INV_bit_counter\(10),
	dataf => \division_function|ALT_INV_bit_counter\(27),
	combout => \division_function|LessThan0~1_combout\);

\division_function|LessThan0~2\ : cyclonev_lcell_comb
-- Equation(s):
-- \division_function|LessThan0~2_combout\ = ( !\division_function|bit_counter\(8) & ( !\division_function|bit_counter\(9) & ( (!\division_function|bit_counter\(4) & (!\division_function|bit_counter\(5) & (!\division_function|bit_counter\(23) & 
-- !\division_function|bit_counter\(7)))) ) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "1000000000000000000000000000000000000000000000000000000000000000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \division_function|ALT_INV_bit_counter\(4),
	datab => \division_function|ALT_INV_bit_counter\(5),
	datac => \division_function|ALT_INV_bit_counter\(23),
	datad => \division_function|ALT_INV_bit_counter\(7),
	datae => \division_function|ALT_INV_bit_counter\(8),
	dataf => \division_function|ALT_INV_bit_counter\(9),
	combout => \division_function|LessThan0~2_combout\);

\division_function|LessThan0~3\ : cyclonev_lcell_comb
-- Equation(s):
-- \division_function|LessThan0~3_combout\ = ( !\division_function|bit_counter\(18) & ( !\division_function|bit_counter\(19) & ( (!\division_function|bit_counter\(16) & (!\division_function|bit_counter\(17) & ((!\division_function|bit_counter\(1)) # 
-- (!\division_function|bit_counter\(2))))) ) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "1110000000000000000000000000000000000000000000000000000000000000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \division_function|ALT_INV_bit_counter\(1),
	datab => \division_function|ALT_INV_bit_counter\(2),
	datac => \division_function|ALT_INV_bit_counter\(16),
	datad => \division_function|ALT_INV_bit_counter\(17),
	datae => \division_function|ALT_INV_bit_counter\(18),
	dataf => \division_function|ALT_INV_bit_counter\(19),
	combout => \division_function|LessThan0~3_combout\);

\division_function|LessThan0~4\ : cyclonev_lcell_comb
-- Equation(s):
-- \division_function|LessThan0~4_combout\ = ( !\division_function|bit_counter\(22) & ( !\division_function|bit_counter\(3) & ( (!\division_function|bit_counter\(20) & (!\division_function|bit_counter\(6) & (!\division_function|bit_counter\(24) & 
-- !\division_function|bit_counter\(21)))) ) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "1000000000000000000000000000000000000000000000000000000000000000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \division_function|ALT_INV_bit_counter\(20),
	datab => \division_function|ALT_INV_bit_counter\(6),
	datac => \division_function|ALT_INV_bit_counter\(24),
	datad => \division_function|ALT_INV_bit_counter\(21),
	datae => \division_function|ALT_INV_bit_counter\(22),
	dataf => \division_function|ALT_INV_bit_counter\(3),
	combout => \division_function|LessThan0~4_combout\);

\division_function|LessThan0~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \division_function|LessThan0~5_combout\ = ( \division_function|LessThan0~3_combout\ & ( \division_function|LessThan0~4_combout\ & ( ((\division_function|LessThan0~0_combout\ & (\division_function|LessThan0~1_combout\ & 
-- \division_function|LessThan0~2_combout\))) # (\division_function|bit_counter\(31)) ) ) ) # ( !\division_function|LessThan0~3_combout\ & ( \division_function|LessThan0~4_combout\ & ( \division_function|bit_counter\(31) ) ) ) # ( 
-- \division_function|LessThan0~3_combout\ & ( !\division_function|LessThan0~4_combout\ & ( \division_function|bit_counter\(31) ) ) ) # ( !\division_function|LessThan0~3_combout\ & ( !\division_function|LessThan0~4_combout\ & ( 
-- \division_function|bit_counter\(31) ) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0101010101010101010101010101010101010101010101010101010101010111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \division_function|ALT_INV_bit_counter\(31),
	datab => \division_function|ALT_INV_LessThan0~0_combout\,
	datac => \division_function|ALT_INV_LessThan0~1_combout\,
	datad => \division_function|ALT_INV_LessThan0~2_combout\,
	datae => \division_function|ALT_INV_LessThan0~3_combout\,
	dataf => \division_function|ALT_INV_LessThan0~4_combout\,
	combout => \division_function|LessThan0~5_combout\);

\division_function|DONE~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \division_function|DONE~0_combout\ = ( !\division_function|state.s2~q\ & ( (!\division_function|state.s1~q\ & (((\division_function|DONE~q\ & ((!\Start_division~q\) # (!\RST_main~input_o\)))))) # (\division_function|state.s1~q\ & 
-- ((((!\division_function|LessThan0~5_combout\ & \RST_main~input_o\)) # (\division_function|DONE~q\)))) ) ) # ( \division_function|state.s2~q\ & ( (((\division_function|DONE~q\ & ((!\RST_main~input_o\) # (\division_function|Remainder\(10)))))) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "on",
	lut_mask => "0000000011111111000000001111111100001100101011110000000000001111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_Start_division~q\,
	datab => \division_function|ALT_INV_LessThan0~5_combout\,
	datac => \division_function|ALT_INV_Remainder\(10),
	datad => \division_function|ALT_INV_DONE~q\,
	datae => \division_function|ALT_INV_state.s2~q\,
	dataf => \ALT_INV_RST_main~input_o\,
	datag => \division_function|ALT_INV_state.s1~q\,
	combout => \division_function|DONE~0_combout\);

\division_function|DONE\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \division_function|DONE~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division_function|DONE~q\);

\multiplication_function|Add1~125\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication_function|Add1~125_sumout\ = SUM(( \multiplication_function|bit_counter\(0) ) + ( VCC ) + ( !VCC ))
-- \multiplication_function|Add1~126\ = CARRY(( \multiplication_function|bit_counter\(0) ) + ( VCC ) + ( !VCC ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \multiplication_function|ALT_INV_bit_counter\(0),
	cin => GND,
	sumout => \multiplication_function|Add1~125_sumout\,
	cout => \multiplication_function|Add1~126\);

\multiplication_function|bit_counter[5]~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication_function|bit_counter[5]~0_combout\ = (\RST_main~input_o\ & \multiplication_function|state~q\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_RST_main~input_o\,
	datab => \multiplication_function|ALT_INV_state~q\,
	combout => \multiplication_function|bit_counter[5]~0_combout\);

\multiplication_function|bit_counter[0]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \multiplication_function|Add1~125_sumout\,
	sclr => \multiplication_function|LessThan0~5_combout\,
	ena => \multiplication_function|bit_counter[5]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication_function|bit_counter\(0));

\multiplication_function|Add1~81\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication_function|Add1~81_sumout\ = SUM(( \multiplication_function|bit_counter\(1) ) + ( GND ) + ( \multiplication_function|Add1~126\ ))
-- \multiplication_function|Add1~82\ = CARRY(( \multiplication_function|bit_counter\(1) ) + ( GND ) + ( \multiplication_function|Add1~126\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \multiplication_function|ALT_INV_bit_counter\(1),
	cin => \multiplication_function|Add1~126\,
	sumout => \multiplication_function|Add1~81_sumout\,
	cout => \multiplication_function|Add1~82\);

\multiplication_function|bit_counter[1]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \multiplication_function|Add1~81_sumout\,
	sclr => \multiplication_function|LessThan0~5_combout\,
	ena => \multiplication_function|bit_counter[5]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication_function|bit_counter\(1));

\multiplication_function|Add1~77\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication_function|Add1~77_sumout\ = SUM(( \multiplication_function|bit_counter\(2) ) + ( GND ) + ( \multiplication_function|Add1~82\ ))
-- \multiplication_function|Add1~78\ = CARRY(( \multiplication_function|bit_counter\(2) ) + ( GND ) + ( \multiplication_function|Add1~82\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \multiplication_function|ALT_INV_bit_counter\(2),
	cin => \multiplication_function|Add1~82\,
	sumout => \multiplication_function|Add1~77_sumout\,
	cout => \multiplication_function|Add1~78\);

\multiplication_function|bit_counter[2]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \multiplication_function|Add1~77_sumout\,
	sclr => \multiplication_function|LessThan0~5_combout\,
	ena => \multiplication_function|bit_counter[5]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication_function|bit_counter\(2));

\multiplication_function|Add1~121\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication_function|Add1~121_sumout\ = SUM(( \multiplication_function|bit_counter\(3) ) + ( GND ) + ( \multiplication_function|Add1~78\ ))
-- \multiplication_function|Add1~122\ = CARRY(( \multiplication_function|bit_counter\(3) ) + ( GND ) + ( \multiplication_function|Add1~78\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \multiplication_function|ALT_INV_bit_counter\(3),
	cin => \multiplication_function|Add1~78\,
	sumout => \multiplication_function|Add1~121_sumout\,
	cout => \multiplication_function|Add1~122\);

\multiplication_function|bit_counter[3]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \multiplication_function|Add1~121_sumout\,
	sclr => \multiplication_function|LessThan0~5_combout\,
	ena => \multiplication_function|bit_counter[5]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication_function|bit_counter\(3));

\multiplication_function|Add1~53\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication_function|Add1~53_sumout\ = SUM(( \multiplication_function|bit_counter\(4) ) + ( GND ) + ( \multiplication_function|Add1~122\ ))
-- \multiplication_function|Add1~54\ = CARRY(( \multiplication_function|bit_counter\(4) ) + ( GND ) + ( \multiplication_function|Add1~122\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \multiplication_function|ALT_INV_bit_counter\(4),
	cin => \multiplication_function|Add1~122\,
	sumout => \multiplication_function|Add1~53_sumout\,
	cout => \multiplication_function|Add1~54\);

\multiplication_function|bit_counter[4]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \multiplication_function|Add1~53_sumout\,
	sclr => \multiplication_function|LessThan0~5_combout\,
	ena => \multiplication_function|bit_counter[5]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication_function|bit_counter\(4));

\multiplication_function|Add1~57\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication_function|Add1~57_sumout\ = SUM(( \multiplication_function|bit_counter\(5) ) + ( GND ) + ( \multiplication_function|Add1~54\ ))
-- \multiplication_function|Add1~58\ = CARRY(( \multiplication_function|bit_counter\(5) ) + ( GND ) + ( \multiplication_function|Add1~54\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \multiplication_function|ALT_INV_bit_counter\(5),
	cin => \multiplication_function|Add1~54\,
	sumout => \multiplication_function|Add1~57_sumout\,
	cout => \multiplication_function|Add1~58\);

\multiplication_function|bit_counter[5]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \multiplication_function|Add1~57_sumout\,
	sclr => \multiplication_function|LessThan0~5_combout\,
	ena => \multiplication_function|bit_counter[5]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication_function|bit_counter\(5));

\multiplication_function|Add1~61\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication_function|Add1~61_sumout\ = SUM(( \multiplication_function|bit_counter\(6) ) + ( GND ) + ( \multiplication_function|Add1~58\ ))
-- \multiplication_function|Add1~62\ = CARRY(( \multiplication_function|bit_counter\(6) ) + ( GND ) + ( \multiplication_function|Add1~58\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \multiplication_function|ALT_INV_bit_counter\(6),
	cin => \multiplication_function|Add1~58\,
	sumout => \multiplication_function|Add1~61_sumout\,
	cout => \multiplication_function|Add1~62\);

\multiplication_function|bit_counter[6]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \multiplication_function|Add1~61_sumout\,
	sclr => \multiplication_function|LessThan0~5_combout\,
	ena => \multiplication_function|bit_counter[5]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication_function|bit_counter\(6));

\multiplication_function|Add1~65\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication_function|Add1~65_sumout\ = SUM(( \multiplication_function|bit_counter\(7) ) + ( GND ) + ( \multiplication_function|Add1~62\ ))
-- \multiplication_function|Add1~66\ = CARRY(( \multiplication_function|bit_counter\(7) ) + ( GND ) + ( \multiplication_function|Add1~62\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \multiplication_function|ALT_INV_bit_counter\(7),
	cin => \multiplication_function|Add1~62\,
	sumout => \multiplication_function|Add1~65_sumout\,
	cout => \multiplication_function|Add1~66\);

\multiplication_function|bit_counter[7]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \multiplication_function|Add1~65_sumout\,
	sclr => \multiplication_function|LessThan0~5_combout\,
	ena => \multiplication_function|bit_counter[5]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication_function|bit_counter\(7));

\multiplication_function|Add1~69\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication_function|Add1~69_sumout\ = SUM(( \multiplication_function|bit_counter\(8) ) + ( GND ) + ( \multiplication_function|Add1~66\ ))
-- \multiplication_function|Add1~70\ = CARRY(( \multiplication_function|bit_counter\(8) ) + ( GND ) + ( \multiplication_function|Add1~66\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \multiplication_function|ALT_INV_bit_counter\(8),
	cin => \multiplication_function|Add1~66\,
	sumout => \multiplication_function|Add1~69_sumout\,
	cout => \multiplication_function|Add1~70\);

\multiplication_function|bit_counter[8]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \multiplication_function|Add1~69_sumout\,
	sclr => \multiplication_function|LessThan0~5_combout\,
	ena => \multiplication_function|bit_counter[5]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication_function|bit_counter\(8));

\multiplication_function|Add1~73\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication_function|Add1~73_sumout\ = SUM(( \multiplication_function|bit_counter\(9) ) + ( GND ) + ( \multiplication_function|Add1~70\ ))
-- \multiplication_function|Add1~74\ = CARRY(( \multiplication_function|bit_counter\(9) ) + ( GND ) + ( \multiplication_function|Add1~70\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \multiplication_function|ALT_INV_bit_counter\(9),
	cin => \multiplication_function|Add1~70\,
	sumout => \multiplication_function|Add1~73_sumout\,
	cout => \multiplication_function|Add1~74\);

\multiplication_function|bit_counter[9]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \multiplication_function|Add1~73_sumout\,
	sclr => \multiplication_function|LessThan0~5_combout\,
	ena => \multiplication_function|bit_counter[5]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication_function|bit_counter\(9));

\multiplication_function|Add1~29\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication_function|Add1~29_sumout\ = SUM(( \multiplication_function|bit_counter\(10) ) + ( GND ) + ( \multiplication_function|Add1~74\ ))
-- \multiplication_function|Add1~30\ = CARRY(( \multiplication_function|bit_counter\(10) ) + ( GND ) + ( \multiplication_function|Add1~74\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \multiplication_function|ALT_INV_bit_counter\(10),
	cin => \multiplication_function|Add1~74\,
	sumout => \multiplication_function|Add1~29_sumout\,
	cout => \multiplication_function|Add1~30\);

\multiplication_function|bit_counter[10]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \multiplication_function|Add1~29_sumout\,
	sclr => \multiplication_function|LessThan0~5_combout\,
	ena => \multiplication_function|bit_counter[5]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication_function|bit_counter\(10));

\multiplication_function|Add1~101\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication_function|Add1~101_sumout\ = SUM(( \multiplication_function|bit_counter\(11) ) + ( GND ) + ( \multiplication_function|Add1~30\ ))
-- \multiplication_function|Add1~102\ = CARRY(( \multiplication_function|bit_counter\(11) ) + ( GND ) + ( \multiplication_function|Add1~30\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \multiplication_function|ALT_INV_bit_counter\(11),
	cin => \multiplication_function|Add1~30\,
	sumout => \multiplication_function|Add1~101_sumout\,
	cout => \multiplication_function|Add1~102\);

\multiplication_function|bit_counter[11]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \multiplication_function|Add1~101_sumout\,
	sclr => \multiplication_function|LessThan0~5_combout\,
	ena => \multiplication_function|bit_counter[5]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication_function|bit_counter\(11));

\multiplication_function|Add1~49\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication_function|Add1~49_sumout\ = SUM(( \multiplication_function|bit_counter\(12) ) + ( GND ) + ( \multiplication_function|Add1~102\ ))
-- \multiplication_function|Add1~50\ = CARRY(( \multiplication_function|bit_counter\(12) ) + ( GND ) + ( \multiplication_function|Add1~102\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \multiplication_function|ALT_INV_bit_counter\(12),
	cin => \multiplication_function|Add1~102\,
	sumout => \multiplication_function|Add1~49_sumout\,
	cout => \multiplication_function|Add1~50\);

\multiplication_function|bit_counter[12]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \multiplication_function|Add1~49_sumout\,
	sclr => \multiplication_function|LessThan0~5_combout\,
	ena => \multiplication_function|bit_counter[5]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication_function|bit_counter\(12));

\multiplication_function|Add1~45\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication_function|Add1~45_sumout\ = SUM(( \multiplication_function|bit_counter\(13) ) + ( GND ) + ( \multiplication_function|Add1~50\ ))
-- \multiplication_function|Add1~46\ = CARRY(( \multiplication_function|bit_counter\(13) ) + ( GND ) + ( \multiplication_function|Add1~50\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \multiplication_function|ALT_INV_bit_counter\(13),
	cin => \multiplication_function|Add1~50\,
	sumout => \multiplication_function|Add1~45_sumout\,
	cout => \multiplication_function|Add1~46\);

\multiplication_function|bit_counter[13]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \multiplication_function|Add1~45_sumout\,
	sclr => \multiplication_function|LessThan0~5_combout\,
	ena => \multiplication_function|bit_counter[5]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication_function|bit_counter\(13));

\multiplication_function|Add1~41\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication_function|Add1~41_sumout\ = SUM(( \multiplication_function|bit_counter\(14) ) + ( GND ) + ( \multiplication_function|Add1~46\ ))
-- \multiplication_function|Add1~42\ = CARRY(( \multiplication_function|bit_counter\(14) ) + ( GND ) + ( \multiplication_function|Add1~46\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \multiplication_function|ALT_INV_bit_counter\(14),
	cin => \multiplication_function|Add1~46\,
	sumout => \multiplication_function|Add1~41_sumout\,
	cout => \multiplication_function|Add1~42\);

\multiplication_function|bit_counter[14]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \multiplication_function|Add1~41_sumout\,
	sclr => \multiplication_function|LessThan0~5_combout\,
	ena => \multiplication_function|bit_counter[5]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication_function|bit_counter\(14));

\multiplication_function|Add1~37\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication_function|Add1~37_sumout\ = SUM(( \multiplication_function|bit_counter\(15) ) + ( GND ) + ( \multiplication_function|Add1~42\ ))
-- \multiplication_function|Add1~38\ = CARRY(( \multiplication_function|bit_counter\(15) ) + ( GND ) + ( \multiplication_function|Add1~42\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \multiplication_function|ALT_INV_bit_counter\(15),
	cin => \multiplication_function|Add1~42\,
	sumout => \multiplication_function|Add1~37_sumout\,
	cout => \multiplication_function|Add1~38\);

\multiplication_function|bit_counter[15]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \multiplication_function|Add1~37_sumout\,
	sclr => \multiplication_function|LessThan0~5_combout\,
	ena => \multiplication_function|bit_counter[5]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication_function|bit_counter\(15));

\multiplication_function|Add1~33\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication_function|Add1~33_sumout\ = SUM(( \multiplication_function|bit_counter\(16) ) + ( GND ) + ( \multiplication_function|Add1~38\ ))
-- \multiplication_function|Add1~34\ = CARRY(( \multiplication_function|bit_counter\(16) ) + ( GND ) + ( \multiplication_function|Add1~38\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \multiplication_function|ALT_INV_bit_counter\(16),
	cin => \multiplication_function|Add1~38\,
	sumout => \multiplication_function|Add1~33_sumout\,
	cout => \multiplication_function|Add1~34\);

\multiplication_function|bit_counter[16]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \multiplication_function|Add1~33_sumout\,
	sclr => \multiplication_function|LessThan0~5_combout\,
	ena => \multiplication_function|bit_counter[5]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication_function|bit_counter\(16));

\multiplication_function|Add1~105\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication_function|Add1~105_sumout\ = SUM(( \multiplication_function|bit_counter\(17) ) + ( GND ) + ( \multiplication_function|Add1~34\ ))
-- \multiplication_function|Add1~106\ = CARRY(( \multiplication_function|bit_counter\(17) ) + ( GND ) + ( \multiplication_function|Add1~34\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \multiplication_function|ALT_INV_bit_counter\(17),
	cin => \multiplication_function|Add1~34\,
	sumout => \multiplication_function|Add1~105_sumout\,
	cout => \multiplication_function|Add1~106\);

\multiplication_function|bit_counter[17]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \multiplication_function|Add1~105_sumout\,
	sclr => \multiplication_function|LessThan0~5_combout\,
	ena => \multiplication_function|bit_counter[5]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication_function|bit_counter\(17));

\multiplication_function|Add1~85\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication_function|Add1~85_sumout\ = SUM(( \multiplication_function|bit_counter\(18) ) + ( GND ) + ( \multiplication_function|Add1~106\ ))
-- \multiplication_function|Add1~86\ = CARRY(( \multiplication_function|bit_counter\(18) ) + ( GND ) + ( \multiplication_function|Add1~106\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \multiplication_function|ALT_INV_bit_counter\(18),
	cin => \multiplication_function|Add1~106\,
	sumout => \multiplication_function|Add1~85_sumout\,
	cout => \multiplication_function|Add1~86\);

\multiplication_function|bit_counter[18]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \multiplication_function|Add1~85_sumout\,
	sclr => \multiplication_function|LessThan0~5_combout\,
	ena => \multiplication_function|bit_counter[5]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication_function|bit_counter\(18));

\multiplication_function|Add1~97\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication_function|Add1~97_sumout\ = SUM(( \multiplication_function|bit_counter\(19) ) + ( GND ) + ( \multiplication_function|Add1~86\ ))
-- \multiplication_function|Add1~98\ = CARRY(( \multiplication_function|bit_counter\(19) ) + ( GND ) + ( \multiplication_function|Add1~86\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \multiplication_function|ALT_INV_bit_counter\(19),
	cin => \multiplication_function|Add1~86\,
	sumout => \multiplication_function|Add1~97_sumout\,
	cout => \multiplication_function|Add1~98\);

\multiplication_function|bit_counter[19]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \multiplication_function|Add1~97_sumout\,
	sclr => \multiplication_function|LessThan0~5_combout\,
	ena => \multiplication_function|bit_counter[5]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication_function|bit_counter\(19));

\multiplication_function|Add1~93\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication_function|Add1~93_sumout\ = SUM(( \multiplication_function|bit_counter\(20) ) + ( GND ) + ( \multiplication_function|Add1~98\ ))
-- \multiplication_function|Add1~94\ = CARRY(( \multiplication_function|bit_counter\(20) ) + ( GND ) + ( \multiplication_function|Add1~98\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \multiplication_function|ALT_INV_bit_counter\(20),
	cin => \multiplication_function|Add1~98\,
	sumout => \multiplication_function|Add1~93_sumout\,
	cout => \multiplication_function|Add1~94\);

\multiplication_function|bit_counter[20]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \multiplication_function|Add1~93_sumout\,
	sclr => \multiplication_function|LessThan0~5_combout\,
	ena => \multiplication_function|bit_counter[5]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication_function|bit_counter\(20));

\multiplication_function|Add1~117\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication_function|Add1~117_sumout\ = SUM(( \multiplication_function|bit_counter\(21) ) + ( GND ) + ( \multiplication_function|Add1~94\ ))
-- \multiplication_function|Add1~118\ = CARRY(( \multiplication_function|bit_counter\(21) ) + ( GND ) + ( \multiplication_function|Add1~94\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \multiplication_function|ALT_INV_bit_counter\(21),
	cin => \multiplication_function|Add1~94\,
	sumout => \multiplication_function|Add1~117_sumout\,
	cout => \multiplication_function|Add1~118\);

\multiplication_function|bit_counter[21]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \multiplication_function|Add1~117_sumout\,
	sclr => \multiplication_function|LessThan0~5_combout\,
	ena => \multiplication_function|bit_counter[5]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication_function|bit_counter\(21));

\multiplication_function|Add1~89\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication_function|Add1~89_sumout\ = SUM(( \multiplication_function|bit_counter\(22) ) + ( GND ) + ( \multiplication_function|Add1~118\ ))
-- \multiplication_function|Add1~90\ = CARRY(( \multiplication_function|bit_counter\(22) ) + ( GND ) + ( \multiplication_function|Add1~118\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \multiplication_function|ALT_INV_bit_counter\(22),
	cin => \multiplication_function|Add1~118\,
	sumout => \multiplication_function|Add1~89_sumout\,
	cout => \multiplication_function|Add1~90\);

\multiplication_function|bit_counter[22]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \multiplication_function|Add1~89_sumout\,
	sclr => \multiplication_function|LessThan0~5_combout\,
	ena => \multiplication_function|bit_counter[5]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication_function|bit_counter\(22));

\multiplication_function|Add1~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication_function|Add1~5_sumout\ = SUM(( \multiplication_function|bit_counter\(23) ) + ( GND ) + ( \multiplication_function|Add1~90\ ))
-- \multiplication_function|Add1~6\ = CARRY(( \multiplication_function|bit_counter\(23) ) + ( GND ) + ( \multiplication_function|Add1~90\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \multiplication_function|ALT_INV_bit_counter\(23),
	cin => \multiplication_function|Add1~90\,
	sumout => \multiplication_function|Add1~5_sumout\,
	cout => \multiplication_function|Add1~6\);

\multiplication_function|bit_counter[23]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \multiplication_function|Add1~5_sumout\,
	sclr => \multiplication_function|LessThan0~5_combout\,
	ena => \multiplication_function|bit_counter[5]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication_function|bit_counter\(23));

\multiplication_function|Add1~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication_function|Add1~9_sumout\ = SUM(( \multiplication_function|bit_counter\(24) ) + ( GND ) + ( \multiplication_function|Add1~6\ ))
-- \multiplication_function|Add1~10\ = CARRY(( \multiplication_function|bit_counter\(24) ) + ( GND ) + ( \multiplication_function|Add1~6\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \multiplication_function|ALT_INV_bit_counter\(24),
	cin => \multiplication_function|Add1~6\,
	sumout => \multiplication_function|Add1~9_sumout\,
	cout => \multiplication_function|Add1~10\);

\multiplication_function|bit_counter[24]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \multiplication_function|Add1~9_sumout\,
	sclr => \multiplication_function|LessThan0~5_combout\,
	ena => \multiplication_function|bit_counter[5]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication_function|bit_counter\(24));

\multiplication_function|Add1~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication_function|Add1~13_sumout\ = SUM(( \multiplication_function|bit_counter\(25) ) + ( GND ) + ( \multiplication_function|Add1~10\ ))
-- \multiplication_function|Add1~14\ = CARRY(( \multiplication_function|bit_counter\(25) ) + ( GND ) + ( \multiplication_function|Add1~10\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \multiplication_function|ALT_INV_bit_counter\(25),
	cin => \multiplication_function|Add1~10\,
	sumout => \multiplication_function|Add1~13_sumout\,
	cout => \multiplication_function|Add1~14\);

\multiplication_function|bit_counter[25]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \multiplication_function|Add1~13_sumout\,
	sclr => \multiplication_function|LessThan0~5_combout\,
	ena => \multiplication_function|bit_counter[5]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication_function|bit_counter\(25));

\multiplication_function|Add1~17\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication_function|Add1~17_sumout\ = SUM(( \multiplication_function|bit_counter\(26) ) + ( GND ) + ( \multiplication_function|Add1~14\ ))
-- \multiplication_function|Add1~18\ = CARRY(( \multiplication_function|bit_counter\(26) ) + ( GND ) + ( \multiplication_function|Add1~14\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \multiplication_function|ALT_INV_bit_counter\(26),
	cin => \multiplication_function|Add1~14\,
	sumout => \multiplication_function|Add1~17_sumout\,
	cout => \multiplication_function|Add1~18\);

\multiplication_function|bit_counter[26]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \multiplication_function|Add1~17_sumout\,
	sclr => \multiplication_function|LessThan0~5_combout\,
	ena => \multiplication_function|bit_counter[5]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication_function|bit_counter\(26));

\multiplication_function|Add1~21\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication_function|Add1~21_sumout\ = SUM(( \multiplication_function|bit_counter\(27) ) + ( GND ) + ( \multiplication_function|Add1~18\ ))
-- \multiplication_function|Add1~22\ = CARRY(( \multiplication_function|bit_counter\(27) ) + ( GND ) + ( \multiplication_function|Add1~18\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \multiplication_function|ALT_INV_bit_counter\(27),
	cin => \multiplication_function|Add1~18\,
	sumout => \multiplication_function|Add1~21_sumout\,
	cout => \multiplication_function|Add1~22\);

\multiplication_function|bit_counter[27]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \multiplication_function|Add1~21_sumout\,
	sclr => \multiplication_function|LessThan0~5_combout\,
	ena => \multiplication_function|bit_counter[5]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication_function|bit_counter\(27));

\multiplication_function|Add1~25\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication_function|Add1~25_sumout\ = SUM(( \multiplication_function|bit_counter\(28) ) + ( GND ) + ( \multiplication_function|Add1~22\ ))
-- \multiplication_function|Add1~26\ = CARRY(( \multiplication_function|bit_counter\(28) ) + ( GND ) + ( \multiplication_function|Add1~22\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \multiplication_function|ALT_INV_bit_counter\(28),
	cin => \multiplication_function|Add1~22\,
	sumout => \multiplication_function|Add1~25_sumout\,
	cout => \multiplication_function|Add1~26\);

\multiplication_function|bit_counter[28]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \multiplication_function|Add1~25_sumout\,
	sclr => \multiplication_function|LessThan0~5_combout\,
	ena => \multiplication_function|bit_counter[5]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication_function|bit_counter\(28));

\multiplication_function|Add1~109\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication_function|Add1~109_sumout\ = SUM(( \multiplication_function|bit_counter\(29) ) + ( GND ) + ( \multiplication_function|Add1~26\ ))
-- \multiplication_function|Add1~110\ = CARRY(( \multiplication_function|bit_counter\(29) ) + ( GND ) + ( \multiplication_function|Add1~26\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \multiplication_function|ALT_INV_bit_counter\(29),
	cin => \multiplication_function|Add1~26\,
	sumout => \multiplication_function|Add1~109_sumout\,
	cout => \multiplication_function|Add1~110\);

\multiplication_function|bit_counter[29]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \multiplication_function|Add1~109_sumout\,
	sclr => \multiplication_function|LessThan0~5_combout\,
	ena => \multiplication_function|bit_counter[5]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication_function|bit_counter\(29));

\multiplication_function|Add1~113\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication_function|Add1~113_sumout\ = SUM(( \multiplication_function|bit_counter\(30) ) + ( GND ) + ( \multiplication_function|Add1~110\ ))
-- \multiplication_function|Add1~114\ = CARRY(( \multiplication_function|bit_counter\(30) ) + ( GND ) + ( \multiplication_function|Add1~110\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \multiplication_function|ALT_INV_bit_counter\(30),
	cin => \multiplication_function|Add1~110\,
	sumout => \multiplication_function|Add1~113_sumout\,
	cout => \multiplication_function|Add1~114\);

\multiplication_function|bit_counter[30]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \multiplication_function|Add1~113_sumout\,
	sclr => \multiplication_function|LessThan0~5_combout\,
	ena => \multiplication_function|bit_counter[5]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication_function|bit_counter\(30));

\multiplication_function|Add1~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication_function|Add1~1_sumout\ = SUM(( \multiplication_function|bit_counter\(31) ) + ( GND ) + ( \multiplication_function|Add1~114\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \multiplication_function|ALT_INV_bit_counter\(31),
	cin => \multiplication_function|Add1~114\,
	sumout => \multiplication_function|Add1~1_sumout\);

\multiplication_function|bit_counter[31]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \multiplication_function|Add1~1_sumout\,
	sclr => \multiplication_function|LessThan0~5_combout\,
	ena => \multiplication_function|bit_counter[5]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication_function|bit_counter\(31));

\multiplication_function|LessThan0~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication_function|LessThan0~0_combout\ = ( !\multiplication_function|bit_counter\(27) & ( !\multiplication_function|bit_counter\(28) & ( (!\multiplication_function|bit_counter\(23) & (!\multiplication_function|bit_counter\(24) & 
-- (!\multiplication_function|bit_counter\(25) & !\multiplication_function|bit_counter\(26)))) ) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "1000000000000000000000000000000000000000000000000000000000000000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \multiplication_function|ALT_INV_bit_counter\(23),
	datab => \multiplication_function|ALT_INV_bit_counter\(24),
	datac => \multiplication_function|ALT_INV_bit_counter\(25),
	datad => \multiplication_function|ALT_INV_bit_counter\(26),
	datae => \multiplication_function|ALT_INV_bit_counter\(27),
	dataf => \multiplication_function|ALT_INV_bit_counter\(28),
	combout => \multiplication_function|LessThan0~0_combout\);

\multiplication_function|LessThan0~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication_function|LessThan0~1_combout\ = ( !\multiplication_function|bit_counter\(13) & ( !\multiplication_function|bit_counter\(12) & ( (!\multiplication_function|bit_counter\(10) & (!\multiplication_function|bit_counter\(16) & 
-- (!\multiplication_function|bit_counter\(15) & !\multiplication_function|bit_counter\(14)))) ) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "1000000000000000000000000000000000000000000000000000000000000000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \multiplication_function|ALT_INV_bit_counter\(10),
	datab => \multiplication_function|ALT_INV_bit_counter\(16),
	datac => \multiplication_function|ALT_INV_bit_counter\(15),
	datad => \multiplication_function|ALT_INV_bit_counter\(14),
	datae => \multiplication_function|ALT_INV_bit_counter\(13),
	dataf => \multiplication_function|ALT_INV_bit_counter\(12),
	combout => \multiplication_function|LessThan0~1_combout\);

\multiplication_function|LessThan0~2\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication_function|LessThan0~2_combout\ = ( !\multiplication_function|bit_counter\(8) & ( !\multiplication_function|bit_counter\(9) & ( (!\multiplication_function|bit_counter\(4) & (!\multiplication_function|bit_counter\(5) & 
-- (!\multiplication_function|bit_counter\(6) & !\multiplication_function|bit_counter\(7)))) ) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "1000000000000000000000000000000000000000000000000000000000000000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \multiplication_function|ALT_INV_bit_counter\(4),
	datab => \multiplication_function|ALT_INV_bit_counter\(5),
	datac => \multiplication_function|ALT_INV_bit_counter\(6),
	datad => \multiplication_function|ALT_INV_bit_counter\(7),
	datae => \multiplication_function|ALT_INV_bit_counter\(8),
	dataf => \multiplication_function|ALT_INV_bit_counter\(9),
	combout => \multiplication_function|LessThan0~2_combout\);

\multiplication_function|LessThan0~3\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication_function|LessThan0~3_combout\ = ( !\multiplication_function|bit_counter\(20) & ( !\multiplication_function|bit_counter\(19) & ( (!\multiplication_function|bit_counter\(18) & (!\multiplication_function|bit_counter\(22) & 
-- ((!\multiplication_function|bit_counter\(2)) # (!\multiplication_function|bit_counter\(1))))) ) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "1110000000000000000000000000000000000000000000000000000000000000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \multiplication_function|ALT_INV_bit_counter\(2),
	datab => \multiplication_function|ALT_INV_bit_counter\(1),
	datac => \multiplication_function|ALT_INV_bit_counter\(18),
	datad => \multiplication_function|ALT_INV_bit_counter\(22),
	datae => \multiplication_function|ALT_INV_bit_counter\(20),
	dataf => \multiplication_function|ALT_INV_bit_counter\(19),
	combout => \multiplication_function|LessThan0~3_combout\);

\multiplication_function|LessThan0~4\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication_function|LessThan0~4_combout\ = ( !\multiplication_function|bit_counter\(21) & ( !\multiplication_function|bit_counter\(3) & ( (!\multiplication_function|bit_counter\(11) & (!\multiplication_function|bit_counter\(17) & 
-- (!\multiplication_function|bit_counter\(29) & !\multiplication_function|bit_counter\(30)))) ) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "1000000000000000000000000000000000000000000000000000000000000000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \multiplication_function|ALT_INV_bit_counter\(11),
	datab => \multiplication_function|ALT_INV_bit_counter\(17),
	datac => \multiplication_function|ALT_INV_bit_counter\(29),
	datad => \multiplication_function|ALT_INV_bit_counter\(30),
	datae => \multiplication_function|ALT_INV_bit_counter\(21),
	dataf => \multiplication_function|ALT_INV_bit_counter\(3),
	combout => \multiplication_function|LessThan0~4_combout\);

\multiplication_function|LessThan0~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication_function|LessThan0~5_combout\ = ( \multiplication_function|LessThan0~3_combout\ & ( \multiplication_function|LessThan0~4_combout\ & ( (!\multiplication_function|bit_counter\(31) & ((!\multiplication_function|LessThan0~0_combout\) # 
-- ((!\multiplication_function|LessThan0~1_combout\) # (!\multiplication_function|LessThan0~2_combout\)))) ) ) ) # ( !\multiplication_function|LessThan0~3_combout\ & ( \multiplication_function|LessThan0~4_combout\ & ( 
-- !\multiplication_function|bit_counter\(31) ) ) ) # ( \multiplication_function|LessThan0~3_combout\ & ( !\multiplication_function|LessThan0~4_combout\ & ( !\multiplication_function|bit_counter\(31) ) ) ) # ( !\multiplication_function|LessThan0~3_combout\ & 
-- ( !\multiplication_function|LessThan0~4_combout\ & ( !\multiplication_function|bit_counter\(31) ) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "1010101010101010101010101010101010101010101010101010101010101000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \multiplication_function|ALT_INV_bit_counter\(31),
	datab => \multiplication_function|ALT_INV_LessThan0~0_combout\,
	datac => \multiplication_function|ALT_INV_LessThan0~1_combout\,
	datad => \multiplication_function|ALT_INV_LessThan0~2_combout\,
	datae => \multiplication_function|ALT_INV_LessThan0~3_combout\,
	dataf => \multiplication_function|ALT_INV_LessThan0~4_combout\,
	combout => \multiplication_function|LessThan0~5_combout\);

\multiplication_function|state~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication_function|state~0_combout\ = (!\multiplication_function|state~q\ & ((!\Start_division~q\))) # (\multiplication_function|state~q\ & (!\multiplication_function|LessThan0~5_combout\))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "1110010011100100111001001110010011100100111001001110010011100100",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \multiplication_function|ALT_INV_state~q\,
	datab => \multiplication_function|ALT_INV_LessThan0~5_combout\,
	datac => \ALT_INV_Start_division~q\,
	combout => \multiplication_function|state~0_combout\);

\multiplication_function|state\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \multiplication_function|state~0_combout\,
	clrn => \RST_main~input_o\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication_function|state~q\);

\multiplication_function|DONE~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication_function|DONE~0_combout\ = ( \Start_division~q\ & ( (!\RST_main~input_o\ & (\multiplication_function|DONE~q\)) # (\RST_main~input_o\ & (\multiplication_function|state~q\ & ((\multiplication_function|LessThan0~5_combout\) # 
-- (\multiplication_function|DONE~q\)))) ) ) # ( !\Start_division~q\ & ( ((\RST_main~input_o\ & (\multiplication_function|state~q\ & \multiplication_function|LessThan0~5_combout\))) # (\multiplication_function|DONE~q\) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0011001100110111001000110010011100110011001101110010001100100111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_RST_main~input_o\,
	datab => \multiplication_function|ALT_INV_DONE~q\,
	datac => \multiplication_function|ALT_INV_state~q\,
	datad => \multiplication_function|ALT_INV_LessThan0~5_combout\,
	datae => \ALT_INV_Start_division~q\,
	combout => \multiplication_function|DONE~0_combout\);

\multiplication_function|DONE\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \multiplication_function|DONE~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication_function|DONE~q\);

\state~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \state~0_combout\ = (!\Operation[1]~input_o\ & ((!\Operation[0]~input_o\ & (!\division_function|DONE~q\)) # (\Operation[0]~input_o\ & ((!\multiplication_function|DONE~q\)))))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "1100010010000000110001001000000011000100100000001100010010000000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_Operation[0]~input_o\,
	datab => \ALT_INV_Operation[1]~input_o\,
	datac => \division_function|ALT_INV_DONE~q\,
	datad => \multiplication_function|ALT_INV_DONE~q\,
	combout => \state~0_combout\);

\START_main~_wirecell\ : cyclonev_lcell_comb
-- Equation(s):
-- \START_main~_wirecell_combout\ = !\START_main~input_o\

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "1010101010101010101010101010101010101010101010101010101010101010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_START_main~input_o\,
	combout => \START_main~_wirecell_combout\);

state : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \state~0_combout\,
	asdata => \START_main~_wirecell_combout\,
	clrn => \RST_main~input_o\,
	sload => \ALT_INV_state~q\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \state~q\);

\Op[1]~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \Op[1]~0_combout\ = (!\state~q\ & !\START_main~input_o\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "1000100010001000100010001000100010001000100010001000100010001000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_state~q\,
	datab => \ALT_INV_START_main~input_o\,
	combout => \Op[1]~0_combout\);

\Data_B_aas[4]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \input_B[4]~input_o\,
	clrn => \RST_main~input_o\,
	ena => \Op[1]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => Data_B_aas(4));

\division_function|Selector11~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \division_function|Selector11~1_combout\ = (!\division_function|state.s1~q\ & ((!\Start_division~q\) # (\division_function|state.s0~q\)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "1100010011000100110001001100010011000100110001001100010011000100",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \division_function|ALT_INV_state.s0~q\,
	datab => \division_function|ALT_INV_state.s1~q\,
	datac => \ALT_INV_Start_division~q\,
	combout => \division_function|Selector11~1_combout\);

\division_function|Selector11~2\ : cyclonev_lcell_comb
-- Equation(s):
-- \division_function|Selector11~2_combout\ = (!Data_B_aas(4) & (((\division_function|Divisor\(9) & !\division_function|Selector11~1_combout\)))) # (Data_B_aas(4) & (((\division_function|Divisor\(9) & !\division_function|Selector11~1_combout\)) # 
-- (\division_function|Selector11~0_combout\)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001111100010001000111110001000100011111000100010001111100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => ALT_INV_Data_B_aas(4),
	datab => \division_function|ALT_INV_Selector11~0_combout\,
	datac => \division_function|ALT_INV_Divisor\(9),
	datad => \division_function|ALT_INV_Selector11~1_combout\,
	combout => \division_function|Selector11~2_combout\);

\division_function|Divisor[9]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \division_function|Selector11~2_combout\,
	clrn => \RST_main~input_o\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division_function|Divisor\(9));

\input_B[3]~input\ : cyclonev_io_ibuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	simulate_z_as => "z")
-- pragma translate_on
PORT MAP (
	i => ww_input_B(3),
	o => \input_B[3]~input_o\);

\Data_B_aas[3]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \input_B[3]~input_o\,
	clrn => \RST_main~input_o\,
	ena => \Op[1]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => Data_B_aas(3));

\division_function|Divisor[8]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \division_function|Divisor\(9),
	asdata => Data_B_aas(3),
	clrn => \RST_main~input_o\,
	sload => \division_function|ALT_INV_state.s2~q\,
	ena => \division_function|Selector11~1_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division_function|Divisor\(8));

\input_B[2]~input\ : cyclonev_io_ibuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	simulate_z_as => "z")
-- pragma translate_on
PORT MAP (
	i => ww_input_B(2),
	o => \input_B[2]~input_o\);

\Data_B_aas[2]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \input_B[2]~input_o\,
	clrn => \RST_main~input_o\,
	ena => \Op[1]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => Data_B_aas(2));

\division_function|Divisor[7]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \division_function|Divisor\(8),
	asdata => Data_B_aas(2),
	clrn => \RST_main~input_o\,
	sload => \division_function|ALT_INV_state.s2~q\,
	ena => \division_function|Selector11~1_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division_function|Divisor\(7));

\input_B[1]~input\ : cyclonev_io_ibuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	simulate_z_as => "z")
-- pragma translate_on
PORT MAP (
	i => ww_input_B(1),
	o => \input_B[1]~input_o\);

\Data_B_aas[1]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \input_B[1]~input_o\,
	clrn => \RST_main~input_o\,
	ena => \Op[1]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => Data_B_aas(1));

\division_function|Divisor[6]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \division_function|Divisor\(7),
	asdata => Data_B_aas(1),
	clrn => \RST_main~input_o\,
	sload => \division_function|ALT_INV_state.s2~q\,
	ena => \division_function|Selector11~1_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division_function|Divisor\(6));

\input_B[0]~input\ : cyclonev_io_ibuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	simulate_z_as => "z")
-- pragma translate_on
PORT MAP (
	i => ww_input_B(0),
	o => \input_B[0]~input_o\);

\Data_B_aas[0]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \input_B[0]~input_o\,
	clrn => \RST_main~input_o\,
	ena => \Op[1]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => Data_B_aas(0));

\division_function|Divisor[5]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \division_function|Divisor\(6),
	asdata => Data_B_aas(0),
	clrn => \RST_main~input_o\,
	sload => \division_function|ALT_INV_state.s2~q\,
	ena => \division_function|Selector11~1_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division_function|Divisor\(5));

\division_function|Divisor[4]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \division_function|Divisor\(5),
	clrn => \RST_main~input_o\,
	ena => \division_function|state.s2~q\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division_function|Divisor\(4));

\division_function|Divisor[3]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \division_function|Divisor\(4),
	clrn => \RST_main~input_o\,
	ena => \division_function|state.s2~q\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division_function|Divisor\(3));

\division_function|Divisor[2]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \division_function|Divisor\(3),
	clrn => \RST_main~input_o\,
	ena => \division_function|state.s2~q\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division_function|Divisor\(2));

\division_function|Divisor[1]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \division_function|Divisor\(2),
	clrn => \RST_main~input_o\,
	ena => \division_function|state.s2~q\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division_function|Divisor\(1));

\division_function|Divisor[0]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \division_function|Divisor\(1),
	clrn => \RST_main~input_o\,
	ena => \division_function|state.s2~q\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division_function|Divisor\(0));

\division_function|Add1~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \division_function|Add1~1_sumout\ = SUM(( \division_function|Divisor\(0) ) + ( \division_function|Remainder\(0) ) + ( !VCC ))
-- \division_function|Add1~2\ = CARRY(( \division_function|Divisor\(0) ) + ( \division_function|Remainder\(0) ) + ( !VCC ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111110000000000000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \division_function|ALT_INV_Divisor\(0),
	dataf => \division_function|ALT_INV_Remainder\(0),
	cin => GND,
	sumout => \division_function|Add1~1_sumout\,
	cout => \division_function|Add1~2\);

\input_A[0]~input\ : cyclonev_io_ibuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	simulate_z_as => "z")
-- pragma translate_on
PORT MAP (
	i => ww_input_A(0),
	o => \input_A[0]~input_o\);

\Data_A_aas[0]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \input_A[0]~input_o\,
	clrn => \RST_main~input_o\,
	ena => \Op[1]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => Data_A_aas(0));

\division_function|Add0~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \division_function|Add0~1_sumout\ = SUM(( !\division_function|Remainder\(0) $ (!\division_function|Divisor\(0)) ) + ( !VCC ) + ( !VCC ))
-- \division_function|Add0~2\ = CARRY(( !\division_function|Remainder\(0) $ (!\division_function|Divisor\(0)) ) + ( !VCC ) + ( !VCC ))
-- \division_function|Add0~3\ = SHARE((!\division_function|Divisor\(0)) # (\division_function|Remainder\(0)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111110000111100000000000000000000111111110000",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	datac => \division_function|ALT_INV_Remainder\(0),
	datad => \division_function|ALT_INV_Divisor\(0),
	cin => GND,
	sharein => GND,
	sumout => \division_function|Add0~1_sumout\,
	cout => \division_function|Add0~2\,
	shareout => \division_function|Add0~3\);

\division_function|Selector10~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \division_function|Selector10~0_combout\ = (!\division_function|state.s1~q\ & (Data_A_aas(0))) # (\division_function|state.s1~q\ & ((\division_function|Add0~1_sumout\)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0100011101000111010001110100011101000111010001110100011101000111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => ALT_INV_Data_A_aas(0),
	datab => \division_function|ALT_INV_state.s1~q\,
	datac => \division_function|ALT_INV_Add0~1_sumout\,
	combout => \division_function|Selector10~0_combout\);

\division_function|Selector18~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \division_function|Selector18~0_combout\ = ( \Start_division~q\ & ( (!\division_function|state.s2~q\ & (\division_function|LessThan0~5_combout\ & (\division_function|state.s1~q\))) # (\division_function|state.s2~q\ & 
-- (((\division_function|Remainder\(10))))) ) ) # ( !\Start_division~q\ & ( (!\division_function|state.s2~q\ & (((!\division_function|state.s1~q\)) # (\division_function|LessThan0~5_combout\))) # (\division_function|state.s2~q\ & 
-- (((\division_function|Remainder\(10))))) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "1101000011011111000100000001111111010000110111110001000000011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \division_function|ALT_INV_LessThan0~5_combout\,
	datab => \division_function|ALT_INV_state.s1~q\,
	datac => \division_function|ALT_INV_state.s2~q\,
	datad => \division_function|ALT_INV_Remainder\(10),
	datae => \ALT_INV_Start_division~q\,
	combout => \division_function|Selector18~0_combout\);

\division_function|Remainder[0]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \division_function|Add1~1_sumout\,
	asdata => \division_function|Selector10~0_combout\,
	clrn => \RST_main~input_o\,
	sload => \division_function|ALT_INV_state.s2~q\,
	ena => \division_function|Selector18~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division_function|Remainder\(0));

\division_function|Add1~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \division_function|Add1~5_sumout\ = SUM(( \division_function|Divisor\(1) ) + ( \division_function|Remainder\(1) ) + ( \division_function|Add1~2\ ))
-- \division_function|Add1~6\ = CARRY(( \division_function|Divisor\(1) ) + ( \division_function|Remainder\(1) ) + ( \division_function|Add1~2\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111110000000000000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \division_function|ALT_INV_Divisor\(1),
	dataf => \division_function|ALT_INV_Remainder\(1),
	cin => \division_function|Add1~2\,
	sumout => \division_function|Add1~5_sumout\,
	cout => \division_function|Add1~6\);

\input_A[1]~input\ : cyclonev_io_ibuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	simulate_z_as => "z")
-- pragma translate_on
PORT MAP (
	i => ww_input_A(1),
	o => \input_A[1]~input_o\);

\Data_A_aas[1]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \input_A[1]~input_o\,
	clrn => \RST_main~input_o\,
	ena => \Op[1]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => Data_A_aas(1));

\division_function|Add0~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \division_function|Add0~5_sumout\ = SUM(( !\division_function|Remainder\(1) $ (\division_function|Divisor\(1)) ) + ( \division_function|Add0~3\ ) + ( \division_function|Add0~2\ ))
-- \division_function|Add0~6\ = CARRY(( !\division_function|Remainder\(1) $ (\division_function|Divisor\(1)) ) + ( \division_function|Add0~3\ ) + ( \division_function|Add0~2\ ))
-- \division_function|Add0~7\ = SHARE((\division_function|Remainder\(1) & !\division_function|Divisor\(1)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000011110000000000000000000000001111000000001111",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	datac => \division_function|ALT_INV_Remainder\(1),
	datad => \division_function|ALT_INV_Divisor\(1),
	cin => \division_function|Add0~2\,
	sharein => \division_function|Add0~3\,
	sumout => \division_function|Add0~5_sumout\,
	cout => \division_function|Add0~6\,
	shareout => \division_function|Add0~7\);

\division_function|Selector9~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \division_function|Selector9~0_combout\ = (!\division_function|state.s1~q\ & (Data_A_aas(1))) # (\division_function|state.s1~q\ & ((\division_function|Add0~5_sumout\)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0100011101000111010001110100011101000111010001110100011101000111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => ALT_INV_Data_A_aas(1),
	datab => \division_function|ALT_INV_state.s1~q\,
	datac => \division_function|ALT_INV_Add0~5_sumout\,
	combout => \division_function|Selector9~0_combout\);

\division_function|Remainder[1]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \division_function|Add1~5_sumout\,
	asdata => \division_function|Selector9~0_combout\,
	clrn => \RST_main~input_o\,
	sload => \division_function|ALT_INV_state.s2~q\,
	ena => \division_function|Selector18~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division_function|Remainder\(1));

\division_function|Add1~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \division_function|Add1~9_sumout\ = SUM(( \division_function|Divisor\(2) ) + ( \division_function|Remainder\(2) ) + ( \division_function|Add1~6\ ))
-- \division_function|Add1~10\ = CARRY(( \division_function|Divisor\(2) ) + ( \division_function|Remainder\(2) ) + ( \division_function|Add1~6\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111110000000000000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \division_function|ALT_INV_Divisor\(2),
	dataf => \division_function|ALT_INV_Remainder\(2),
	cin => \division_function|Add1~6\,
	sumout => \division_function|Add1~9_sumout\,
	cout => \division_function|Add1~10\);

\input_A[2]~input\ : cyclonev_io_ibuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	simulate_z_as => "z")
-- pragma translate_on
PORT MAP (
	i => ww_input_A(2),
	o => \input_A[2]~input_o\);

\Data_A_aas[2]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \input_A[2]~input_o\,
	clrn => \RST_main~input_o\,
	ena => \Op[1]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => Data_A_aas(2));

\division_function|Add0~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \division_function|Add0~9_sumout\ = SUM(( !\division_function|Remainder\(2) $ (\division_function|Divisor\(2)) ) + ( \division_function|Add0~7\ ) + ( \division_function|Add0~6\ ))
-- \division_function|Add0~10\ = CARRY(( !\division_function|Remainder\(2) $ (\division_function|Divisor\(2)) ) + ( \division_function|Add0~7\ ) + ( \division_function|Add0~6\ ))
-- \division_function|Add0~11\ = SHARE((\division_function|Remainder\(2) & !\division_function|Divisor\(2)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000011110000000000000000000000001111000000001111",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	datac => \division_function|ALT_INV_Remainder\(2),
	datad => \division_function|ALT_INV_Divisor\(2),
	cin => \division_function|Add0~6\,
	sharein => \division_function|Add0~7\,
	sumout => \division_function|Add0~9_sumout\,
	cout => \division_function|Add0~10\,
	shareout => \division_function|Add0~11\);

\division_function|Selector8~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \division_function|Selector8~0_combout\ = (!\division_function|state.s1~q\ & (Data_A_aas(2))) # (\division_function|state.s1~q\ & ((\division_function|Add0~9_sumout\)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0100011101000111010001110100011101000111010001110100011101000111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => ALT_INV_Data_A_aas(2),
	datab => \division_function|ALT_INV_state.s1~q\,
	datac => \division_function|ALT_INV_Add0~9_sumout\,
	combout => \division_function|Selector8~0_combout\);

\division_function|Remainder[2]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \division_function|Add1~9_sumout\,
	asdata => \division_function|Selector8~0_combout\,
	clrn => \RST_main~input_o\,
	sload => \division_function|ALT_INV_state.s2~q\,
	ena => \division_function|Selector18~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division_function|Remainder\(2));

\division_function|Add1~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \division_function|Add1~13_sumout\ = SUM(( \division_function|Divisor\(3) ) + ( \division_function|Remainder\(3) ) + ( \division_function|Add1~10\ ))
-- \division_function|Add1~14\ = CARRY(( \division_function|Divisor\(3) ) + ( \division_function|Remainder\(3) ) + ( \division_function|Add1~10\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111110000000000000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \division_function|ALT_INV_Divisor\(3),
	dataf => \division_function|ALT_INV_Remainder\(3),
	cin => \division_function|Add1~10\,
	sumout => \division_function|Add1~13_sumout\,
	cout => \division_function|Add1~14\);

\input_A[3]~input\ : cyclonev_io_ibuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	simulate_z_as => "z")
-- pragma translate_on
PORT MAP (
	i => ww_input_A(3),
	o => \input_A[3]~input_o\);

\Data_A_aas[3]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \input_A[3]~input_o\,
	clrn => \RST_main~input_o\,
	ena => \Op[1]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => Data_A_aas(3));

\division_function|Add0~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \division_function|Add0~13_sumout\ = SUM(( !\division_function|Remainder\(3) $ (\division_function|Divisor\(3)) ) + ( \division_function|Add0~11\ ) + ( \division_function|Add0~10\ ))
-- \division_function|Add0~14\ = CARRY(( !\division_function|Remainder\(3) $ (\division_function|Divisor\(3)) ) + ( \division_function|Add0~11\ ) + ( \division_function|Add0~10\ ))
-- \division_function|Add0~15\ = SHARE((\division_function|Remainder\(3) & !\division_function|Divisor\(3)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000011110000000000000000000000001111000000001111",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	datac => \division_function|ALT_INV_Remainder\(3),
	datad => \division_function|ALT_INV_Divisor\(3),
	cin => \division_function|Add0~10\,
	sharein => \division_function|Add0~11\,
	sumout => \division_function|Add0~13_sumout\,
	cout => \division_function|Add0~14\,
	shareout => \division_function|Add0~15\);

\division_function|Selector7~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \division_function|Selector7~0_combout\ = (!\division_function|state.s1~q\ & (Data_A_aas(3))) # (\division_function|state.s1~q\ & ((\division_function|Add0~13_sumout\)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0100011101000111010001110100011101000111010001110100011101000111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => ALT_INV_Data_A_aas(3),
	datab => \division_function|ALT_INV_state.s1~q\,
	datac => \division_function|ALT_INV_Add0~13_sumout\,
	combout => \division_function|Selector7~0_combout\);

\division_function|Remainder[3]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \division_function|Add1~13_sumout\,
	asdata => \division_function|Selector7~0_combout\,
	clrn => \RST_main~input_o\,
	sload => \division_function|ALT_INV_state.s2~q\,
	ena => \division_function|Selector18~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division_function|Remainder\(3));

\division_function|Add1~17\ : cyclonev_lcell_comb
-- Equation(s):
-- \division_function|Add1~17_sumout\ = SUM(( \division_function|Divisor\(4) ) + ( \division_function|Remainder\(4) ) + ( \division_function|Add1~14\ ))
-- \division_function|Add1~18\ = CARRY(( \division_function|Divisor\(4) ) + ( \division_function|Remainder\(4) ) + ( \division_function|Add1~14\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111110000000000000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \division_function|ALT_INV_Divisor\(4),
	dataf => \division_function|ALT_INV_Remainder\(4),
	cin => \division_function|Add1~14\,
	sumout => \division_function|Add1~17_sumout\,
	cout => \division_function|Add1~18\);

\input_A[4]~input\ : cyclonev_io_ibuf
-- pragma translate_off
GENERIC MAP (
	bus_hold => "false",
	simulate_z_as => "z")
-- pragma translate_on
PORT MAP (
	i => ww_input_A(4),
	o => \input_A[4]~input_o\);

\Data_A_aas[4]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \input_A[4]~input_o\,
	clrn => \RST_main~input_o\,
	ena => \Op[1]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => Data_A_aas(4));

\division_function|Add0~17\ : cyclonev_lcell_comb
-- Equation(s):
-- \division_function|Add0~17_sumout\ = SUM(( !\division_function|Remainder\(4) $ (\division_function|Divisor\(4)) ) + ( \division_function|Add0~15\ ) + ( \division_function|Add0~14\ ))
-- \division_function|Add0~18\ = CARRY(( !\division_function|Remainder\(4) $ (\division_function|Divisor\(4)) ) + ( \division_function|Add0~15\ ) + ( \division_function|Add0~14\ ))
-- \division_function|Add0~19\ = SHARE((\division_function|Remainder\(4) & !\division_function|Divisor\(4)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000011110000000000000000000000001111000000001111",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	datac => \division_function|ALT_INV_Remainder\(4),
	datad => \division_function|ALT_INV_Divisor\(4),
	cin => \division_function|Add0~14\,
	sharein => \division_function|Add0~15\,
	sumout => \division_function|Add0~17_sumout\,
	cout => \division_function|Add0~18\,
	shareout => \division_function|Add0~19\);

\division_function|Selector6~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \division_function|Selector6~0_combout\ = (!\division_function|state.s1~q\ & (Data_A_aas(4))) # (\division_function|state.s1~q\ & ((\division_function|Add0~17_sumout\)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0100011101000111010001110100011101000111010001110100011101000111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => ALT_INV_Data_A_aas(4),
	datab => \division_function|ALT_INV_state.s1~q\,
	datac => \division_function|ALT_INV_Add0~17_sumout\,
	combout => \division_function|Selector6~0_combout\);

\division_function|Remainder[4]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \division_function|Add1~17_sumout\,
	asdata => \division_function|Selector6~0_combout\,
	clrn => \RST_main~input_o\,
	sload => \division_function|ALT_INV_state.s2~q\,
	ena => \division_function|Selector18~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division_function|Remainder\(4));

\division_function|Add1~21\ : cyclonev_lcell_comb
-- Equation(s):
-- \division_function|Add1~21_sumout\ = SUM(( \division_function|Divisor\(5) ) + ( \division_function|Remainder\(5) ) + ( \division_function|Add1~18\ ))
-- \division_function|Add1~22\ = CARRY(( \division_function|Divisor\(5) ) + ( \division_function|Remainder\(5) ) + ( \division_function|Add1~18\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111110000000000000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \division_function|ALT_INV_Divisor\(5),
	dataf => \division_function|ALT_INV_Remainder\(5),
	cin => \division_function|Add1~18\,
	sumout => \division_function|Add1~21_sumout\,
	cout => \division_function|Add1~22\);

\division_function|Add0~21\ : cyclonev_lcell_comb
-- Equation(s):
-- \division_function|Add0~21_sumout\ = SUM(( !\division_function|Remainder\(5) $ (\division_function|Divisor\(5)) ) + ( \division_function|Add0~19\ ) + ( \division_function|Add0~18\ ))
-- \division_function|Add0~22\ = CARRY(( !\division_function|Remainder\(5) $ (\division_function|Divisor\(5)) ) + ( \division_function|Add0~19\ ) + ( \division_function|Add0~18\ ))
-- \division_function|Add0~23\ = SHARE((\division_function|Remainder\(5) & !\division_function|Divisor\(5)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000011110000000000000000000000001111000000001111",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	datac => \division_function|ALT_INV_Remainder\(5),
	datad => \division_function|ALT_INV_Divisor\(5),
	cin => \division_function|Add0~18\,
	sharein => \division_function|Add0~19\,
	sumout => \division_function|Add0~21_sumout\,
	cout => \division_function|Add0~22\,
	shareout => \division_function|Add0~23\);

\division_function|Remainder[6]~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \division_function|Remainder[6]~0_combout\ = (!\division_function|LessThan0~5_combout\ & (((\division_function|state.s2~q\ & \division_function|Remainder\(10))))) # (\division_function|LessThan0~5_combout\ & (((\division_function|state.s2~q\ & 
-- \division_function|Remainder\(10))) # (\division_function|state.s1~q\)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100011111000100010001111100010001000111110001000100011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \division_function|ALT_INV_LessThan0~5_combout\,
	datab => \division_function|ALT_INV_state.s1~q\,
	datac => \division_function|ALT_INV_state.s2~q\,
	datad => \division_function|ALT_INV_Remainder\(10),
	combout => \division_function|Remainder[6]~0_combout\);

\division_function|Remainder[5]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \division_function|Add1~21_sumout\,
	asdata => \division_function|Add0~21_sumout\,
	clrn => \RST_main~input_o\,
	sload => \division_function|ALT_INV_state.s2~q\,
	ena => \division_function|Remainder[6]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division_function|Remainder\(5));

\division_function|Add1~25\ : cyclonev_lcell_comb
-- Equation(s):
-- \division_function|Add1~25_sumout\ = SUM(( \division_function|Divisor\(6) ) + ( \division_function|Remainder\(6) ) + ( \division_function|Add1~22\ ))
-- \division_function|Add1~26\ = CARRY(( \division_function|Divisor\(6) ) + ( \division_function|Remainder\(6) ) + ( \division_function|Add1~22\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111110000000000000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \division_function|ALT_INV_Divisor\(6),
	dataf => \division_function|ALT_INV_Remainder\(6),
	cin => \division_function|Add1~22\,
	sumout => \division_function|Add1~25_sumout\,
	cout => \division_function|Add1~26\);

\division_function|Add0~25\ : cyclonev_lcell_comb
-- Equation(s):
-- \division_function|Add0~25_sumout\ = SUM(( !\division_function|Remainder\(6) $ (\division_function|Divisor\(6)) ) + ( \division_function|Add0~23\ ) + ( \division_function|Add0~22\ ))
-- \division_function|Add0~26\ = CARRY(( !\division_function|Remainder\(6) $ (\division_function|Divisor\(6)) ) + ( \division_function|Add0~23\ ) + ( \division_function|Add0~22\ ))
-- \division_function|Add0~27\ = SHARE((\division_function|Remainder\(6) & !\division_function|Divisor\(6)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000011110000000000000000000000001111000000001111",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	datac => \division_function|ALT_INV_Remainder\(6),
	datad => \division_function|ALT_INV_Divisor\(6),
	cin => \division_function|Add0~22\,
	sharein => \division_function|Add0~23\,
	sumout => \division_function|Add0~25_sumout\,
	cout => \division_function|Add0~26\,
	shareout => \division_function|Add0~27\);

\division_function|Remainder[6]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \division_function|Add1~25_sumout\,
	asdata => \division_function|Add0~25_sumout\,
	clrn => \RST_main~input_o\,
	sload => \division_function|ALT_INV_state.s2~q\,
	ena => \division_function|Remainder[6]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division_function|Remainder\(6));

\division_function|Add1~29\ : cyclonev_lcell_comb
-- Equation(s):
-- \division_function|Add1~29_sumout\ = SUM(( \division_function|Divisor\(7) ) + ( \division_function|Remainder\(7) ) + ( \division_function|Add1~26\ ))
-- \division_function|Add1~30\ = CARRY(( \division_function|Divisor\(7) ) + ( \division_function|Remainder\(7) ) + ( \division_function|Add1~26\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111110000000000000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \division_function|ALT_INV_Divisor\(7),
	dataf => \division_function|ALT_INV_Remainder\(7),
	cin => \division_function|Add1~26\,
	sumout => \division_function|Add1~29_sumout\,
	cout => \division_function|Add1~30\);

\division_function|Add0~29\ : cyclonev_lcell_comb
-- Equation(s):
-- \division_function|Add0~29_sumout\ = SUM(( !\division_function|Remainder\(7) $ (\division_function|Divisor\(7)) ) + ( \division_function|Add0~27\ ) + ( \division_function|Add0~26\ ))
-- \division_function|Add0~30\ = CARRY(( !\division_function|Remainder\(7) $ (\division_function|Divisor\(7)) ) + ( \division_function|Add0~27\ ) + ( \division_function|Add0~26\ ))
-- \division_function|Add0~31\ = SHARE((\division_function|Remainder\(7) & !\division_function|Divisor\(7)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000011110000000000000000000000001111000000001111",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	datac => \division_function|ALT_INV_Remainder\(7),
	datad => \division_function|ALT_INV_Divisor\(7),
	cin => \division_function|Add0~26\,
	sharein => \division_function|Add0~27\,
	sumout => \division_function|Add0~29_sumout\,
	cout => \division_function|Add0~30\,
	shareout => \division_function|Add0~31\);

\division_function|Remainder[7]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \division_function|Add1~29_sumout\,
	asdata => \division_function|Add0~29_sumout\,
	clrn => \RST_main~input_o\,
	sload => \division_function|ALT_INV_state.s2~q\,
	ena => \division_function|Remainder[6]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division_function|Remainder\(7));

\division_function|Add1~33\ : cyclonev_lcell_comb
-- Equation(s):
-- \division_function|Add1~33_sumout\ = SUM(( \division_function|Divisor\(8) ) + ( \division_function|Remainder\(8) ) + ( \division_function|Add1~30\ ))
-- \division_function|Add1~34\ = CARRY(( \division_function|Divisor\(8) ) + ( \division_function|Remainder\(8) ) + ( \division_function|Add1~30\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111110000000000000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \division_function|ALT_INV_Divisor\(8),
	dataf => \division_function|ALT_INV_Remainder\(8),
	cin => \division_function|Add1~30\,
	sumout => \division_function|Add1~33_sumout\,
	cout => \division_function|Add1~34\);

\division_function|Add0~33\ : cyclonev_lcell_comb
-- Equation(s):
-- \division_function|Add0~33_sumout\ = SUM(( !\division_function|Remainder\(8) $ (\division_function|Divisor\(8)) ) + ( \division_function|Add0~31\ ) + ( \division_function|Add0~30\ ))
-- \division_function|Add0~34\ = CARRY(( !\division_function|Remainder\(8) $ (\division_function|Divisor\(8)) ) + ( \division_function|Add0~31\ ) + ( \division_function|Add0~30\ ))
-- \division_function|Add0~35\ = SHARE((\division_function|Remainder\(8) & !\division_function|Divisor\(8)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000011110000000000000000000000001111000000001111",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	datac => \division_function|ALT_INV_Remainder\(8),
	datad => \division_function|ALT_INV_Divisor\(8),
	cin => \division_function|Add0~30\,
	sharein => \division_function|Add0~31\,
	sumout => \division_function|Add0~33_sumout\,
	cout => \division_function|Add0~34\,
	shareout => \division_function|Add0~35\);

\division_function|Remainder[8]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \division_function|Add1~33_sumout\,
	asdata => \division_function|Add0~33_sumout\,
	clrn => \RST_main~input_o\,
	sload => \division_function|ALT_INV_state.s2~q\,
	ena => \division_function|Remainder[6]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division_function|Remainder\(8));

\division_function|Add1~37\ : cyclonev_lcell_comb
-- Equation(s):
-- \division_function|Add1~37_sumout\ = SUM(( \division_function|Divisor\(9) ) + ( \division_function|Remainder\(9) ) + ( \division_function|Add1~34\ ))
-- \division_function|Add1~38\ = CARRY(( \division_function|Divisor\(9) ) + ( \division_function|Remainder\(9) ) + ( \division_function|Add1~34\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111110000000000000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \division_function|ALT_INV_Divisor\(9),
	dataf => \division_function|ALT_INV_Remainder\(9),
	cin => \division_function|Add1~34\,
	sumout => \division_function|Add1~37_sumout\,
	cout => \division_function|Add1~38\);

\division_function|Add0~37\ : cyclonev_lcell_comb
-- Equation(s):
-- \division_function|Add0~37_sumout\ = SUM(( !\division_function|Remainder\(9) $ (\division_function|Divisor\(9)) ) + ( \division_function|Add0~35\ ) + ( \division_function|Add0~34\ ))
-- \division_function|Add0~38\ = CARRY(( !\division_function|Remainder\(9) $ (\division_function|Divisor\(9)) ) + ( \division_function|Add0~35\ ) + ( \division_function|Add0~34\ ))
-- \division_function|Add0~39\ = SHARE((\division_function|Remainder\(9) & !\division_function|Divisor\(9)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000011110000000000000000000000001111000000001111",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	datac => \division_function|ALT_INV_Remainder\(9),
	datad => \division_function|ALT_INV_Divisor\(9),
	cin => \division_function|Add0~34\,
	sharein => \division_function|Add0~35\,
	sumout => \division_function|Add0~37_sumout\,
	cout => \division_function|Add0~38\,
	shareout => \division_function|Add0~39\);

\division_function|Remainder[9]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \division_function|Add1~37_sumout\,
	asdata => \division_function|Add0~37_sumout\,
	clrn => \RST_main~input_o\,
	sload => \division_function|ALT_INV_state.s2~q\,
	ena => \division_function|Remainder[6]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division_function|Remainder\(9));

\division_function|Add1~41\ : cyclonev_lcell_comb
-- Equation(s):
-- \division_function|Add1~41_sumout\ = SUM(( \division_function|Remainder\(10) ) + ( GND ) + ( \division_function|Add1~38\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \division_function|ALT_INV_Remainder\(10),
	cin => \division_function|Add1~38\,
	sumout => \division_function|Add1~41_sumout\);

\division_function|Remainder~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \division_function|Remainder~1_combout\ = (\division_function|Remainder\(10) & \division_function|Add1~41_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \division_function|ALT_INV_Remainder\(10),
	datab => \division_function|ALT_INV_Add1~41_sumout\,
	combout => \division_function|Remainder~1_combout\);

\division_function|Add0~41\ : cyclonev_lcell_comb
-- Equation(s):
-- \division_function|Add0~41_sumout\ = SUM(( !\division_function|Remainder\(10) ) + ( \division_function|Add0~39\ ) + ( \division_function|Add0~38\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111100000000",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	datad => \division_function|ALT_INV_Remainder\(10),
	cin => \division_function|Add0~38\,
	sharein => \division_function|Add0~39\,
	sumout => \division_function|Add0~41_sumout\);

\division_function|Selector0~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \division_function|Selector0~0_combout\ = (!\division_function|LessThan0~5_combout\ & (((\division_function|Remainder\(10))))) # (\division_function|LessThan0~5_combout\ & ((!\division_function|state.s1~q\ & (\division_function|Remainder\(10))) # 
-- (\division_function|state.s1~q\ & ((\division_function|Add0~41_sumout\)))))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000111000011111000011100001111100001110000111110000111000011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \division_function|ALT_INV_LessThan0~5_combout\,
	datab => \division_function|ALT_INV_state.s1~q\,
	datac => \division_function|ALT_INV_Remainder\(10),
	datad => \division_function|ALT_INV_Add0~41_sumout\,
	combout => \division_function|Selector0~0_combout\);

\division_function|Remainder[10]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \division_function|Remainder~1_combout\,
	asdata => \division_function|Selector0~0_combout\,
	clrn => \RST_main~input_o\,
	sload => \division_function|ALT_INV_state.s2~q\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division_function|Remainder\(10));

\division_function|Quotient[0]~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \division_function|Quotient[0]~0_combout\ = !\division_function|Remainder\(10)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "1010101010101010101010101010101010101010101010101010101010101010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \division_function|ALT_INV_Remainder\(10),
	combout => \division_function|Quotient[0]~0_combout\);

\division_function|Quotient[0]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \division_function|Quotient[0]~0_combout\,
	clrn => \RST_main~input_o\,
	ena => \division_function|state.s2~q\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division_function|Quotient\(0));

\division_function|bit_counter[16]~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \division_function|bit_counter[16]~0_combout\ = (\division_function|state.s0~q\ & ((!\division_function|LessThan0~5_combout\) # (!\division_function|state.s1~q\)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0101010001010100010101000101010001010100010101000101010001010100",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \division_function|ALT_INV_state.s0~q\,
	datab => \division_function|ALT_INV_LessThan0~5_combout\,
	datac => \division_function|ALT_INV_state.s1~q\,
	combout => \division_function|bit_counter[16]~0_combout\);

\division_function|Q[0]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \division_function|Quotient\(0),
	clrn => \RST_main~input_o\,
	ena => \division_function|bit_counter[16]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division_function|Q\(0));

\Result[2]~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \Result[2]~0_combout\ = (\state~q\ & ((\Operation[1]~input_o\) # (\Operation[0]~input_o\)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001010100010101000101010001010100010101000101010001010100010101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_state~q\,
	datab => \ALT_INV_Operation[0]~input_o\,
	datac => \ALT_INV_Operation[1]~input_o\,
	combout => \Result[2]~0_combout\);

\Result[2]~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \Result[2]~1_combout\ = (\state~q\ & ((!\Operation[0]~input_o\) # (\Operation[1]~input_o\)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0100010101000101010001010100010101000101010001010100010101000101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_state~q\,
	datab => \ALT_INV_Operation[0]~input_o\,
	datac => \ALT_INV_Operation[1]~input_o\,
	combout => \Result[2]~1_combout\);

\multiplication_function|Data_A~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication_function|Data_A~0_combout\ = (!\Start_division~q\ & (Data_A_aas(0))) # (\Start_division~q\ & ((\multiplication_function|Data_A\(0))))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0100011101000111010001110100011101000111010001110100011101000111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => ALT_INV_Data_A_aas(0),
	datab => \ALT_INV_Start_division~q\,
	datac => \multiplication_function|ALT_INV_Data_A\(0),
	combout => \multiplication_function|Data_A~0_combout\);

\multiplication_function|Data_A[0]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \multiplication_function|Data_A~0_combout\,
	clrn => \RST_main~input_o\,
	sclr => \multiplication_function|state~q\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication_function|Data_A\(0));

\multiplication_function|Add0~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication_function|Add0~1_sumout\ = SUM(( \multiplication_function|Data_A\(0) ) + ( \multiplication_function|Data_Product\(0) ) + ( !VCC ))
-- \multiplication_function|Add0~2\ = CARRY(( \multiplication_function|Data_A\(0) ) + ( \multiplication_function|Data_Product\(0) ) + ( !VCC ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111110000000000000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \multiplication_function|ALT_INV_Data_A\(0),
	dataf => \multiplication_function|ALT_INV_Data_Product\(0),
	cin => GND,
	sumout => \multiplication_function|Add0~1_sumout\,
	cout => \multiplication_function|Add0~2\);

\multiplication_function|Data_B~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication_function|Data_B~0_combout\ = (Data_B_aas(4) & !\multiplication_function|state~q\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0100010001000100010001000100010001000100010001000100010001000100",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => ALT_INV_Data_B_aas(4),
	datab => \multiplication_function|ALT_INV_state~q\,
	combout => \multiplication_function|Data_B~0_combout\);

\multiplication_function|Data_B~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication_function|Data_B~1_combout\ = (!\multiplication_function|state~q\ & ((!\Start_division~q\))) # (\multiplication_function|state~q\ & (\multiplication_function|LessThan0~5_combout\))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "1011000110110001101100011011000110110001101100011011000110110001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \multiplication_function|ALT_INV_state~q\,
	datab => \multiplication_function|ALT_INV_LessThan0~5_combout\,
	datac => \ALT_INV_Start_division~q\,
	combout => \multiplication_function|Data_B~1_combout\);

\multiplication_function|Data_B[4]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \multiplication_function|Data_B~0_combout\,
	clrn => \RST_main~input_o\,
	ena => \multiplication_function|Data_B~1_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication_function|Data_B\(4));

\multiplication_function|Data_B~2\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication_function|Data_B~2_combout\ = (Data_B_aas(0) & !\multiplication_function|state~q\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0100010001000100010001000100010001000100010001000100010001000100",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => ALT_INV_Data_B_aas(0),
	datab => \multiplication_function|ALT_INV_state~q\,
	combout => \multiplication_function|Data_B~2_combout\);

\multiplication_function|Data_B[0]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \multiplication_function|Data_B~2_combout\,
	clrn => \RST_main~input_o\,
	ena => \multiplication_function|Data_B~1_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication_function|Data_B\(0));

\multiplication_function|Data_B~3\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication_function|Data_B~3_combout\ = (Data_B_aas(1) & !\multiplication_function|state~q\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0100010001000100010001000100010001000100010001000100010001000100",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => ALT_INV_Data_B_aas(1),
	datab => \multiplication_function|ALT_INV_state~q\,
	combout => \multiplication_function|Data_B~3_combout\);

\multiplication_function|Data_B[1]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \multiplication_function|Data_B~3_combout\,
	clrn => \RST_main~input_o\,
	ena => \multiplication_function|Data_B~1_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication_function|Data_B\(1));

\multiplication_function|Data_B~4\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication_function|Data_B~4_combout\ = (Data_B_aas(2) & !\multiplication_function|state~q\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0100010001000100010001000100010001000100010001000100010001000100",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => ALT_INV_Data_B_aas(2),
	datab => \multiplication_function|ALT_INV_state~q\,
	combout => \multiplication_function|Data_B~4_combout\);

\multiplication_function|Data_B[2]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \multiplication_function|Data_B~4_combout\,
	clrn => \RST_main~input_o\,
	ena => \multiplication_function|Data_B~1_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication_function|Data_B\(2));

\multiplication_function|Data_B~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication_function|Data_B~5_combout\ = (Data_B_aas(3) & !\multiplication_function|state~q\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0100010001000100010001000100010001000100010001000100010001000100",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => ALT_INV_Data_B_aas(3),
	datab => \multiplication_function|ALT_INV_state~q\,
	combout => \multiplication_function|Data_B~5_combout\);

\multiplication_function|Data_B[3]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \multiplication_function|Data_B~5_combout\,
	clrn => \RST_main~input_o\,
	ena => \multiplication_function|Data_B~1_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication_function|Data_B\(3));

\multiplication_function|Mux0~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication_function|Mux0~0_combout\ = ( \multiplication_function|bit_counter\(0) & ( \multiplication_function|bit_counter\(1) & ( !\multiplication_function|Data_B\(3) ) ) ) # ( !\multiplication_function|bit_counter\(0) & ( 
-- \multiplication_function|bit_counter\(1) & ( !\multiplication_function|Data_B\(2) ) ) ) # ( \multiplication_function|bit_counter\(0) & ( !\multiplication_function|bit_counter\(1) & ( !\multiplication_function|Data_B\(1) ) ) ) # ( 
-- !\multiplication_function|bit_counter\(0) & ( !\multiplication_function|bit_counter\(1) & ( !\multiplication_function|Data_B\(0) ) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "1010101010101010110011001100110011110000111100001111111100000000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \multiplication_function|ALT_INV_Data_B\(0),
	datab => \multiplication_function|ALT_INV_Data_B\(1),
	datac => \multiplication_function|ALT_INV_Data_B\(2),
	datad => \multiplication_function|ALT_INV_Data_B\(3),
	datae => \multiplication_function|ALT_INV_bit_counter\(0),
	dataf => \multiplication_function|ALT_INV_bit_counter\(1),
	combout => \multiplication_function|Mux0~0_combout\);

\multiplication_function|Data_Product[0]~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication_function|Data_Product[0]~0_combout\ = ( \multiplication_function|Mux0~0_combout\ & ( (\multiplication_function|state~q\ & (((\multiplication_function|bit_counter\(2) & \multiplication_function|Data_B\(4))) # 
-- (\multiplication_function|LessThan0~5_combout\))) ) ) # ( !\multiplication_function|Mux0~0_combout\ & ( (\multiplication_function|state~q\ & ((!\multiplication_function|bit_counter\(2)) # ((\multiplication_function|Data_B\(4)) # 
-- (\multiplication_function|LessThan0~5_combout\)))) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0100010101010101000001010001010101000101010101010000010100010101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \multiplication_function|ALT_INV_state~q\,
	datab => \multiplication_function|ALT_INV_bit_counter\(2),
	datac => \multiplication_function|ALT_INV_LessThan0~5_combout\,
	datad => \multiplication_function|ALT_INV_Data_B\(4),
	datae => \multiplication_function|ALT_INV_Mux0~0_combout\,
	combout => \multiplication_function|Data_Product[0]~0_combout\);

\multiplication_function|Data_Product[0]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \multiplication_function|Add0~1_sumout\,
	clrn => \RST_main~input_o\,
	sclr => \multiplication_function|LessThan0~5_combout\,
	ena => \multiplication_function|Data_Product[0]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication_function|Data_Product\(0));

\multiplication_function|R[9]~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication_function|R[9]~0_combout\ = (\multiplication_function|state~q\ & !\multiplication_function|LessThan0~5_combout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0100010001000100010001000100010001000100010001000100010001000100",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \multiplication_function|ALT_INV_state~q\,
	datab => \multiplication_function|ALT_INV_LessThan0~5_combout\,
	combout => \multiplication_function|R[9]~0_combout\);

\multiplication_function|R[0]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \multiplication_function|Data_Product\(0),
	clrn => \RST_main~input_o\,
	ena => \multiplication_function|R[9]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication_function|R\(0));

\Result~2\ : cyclonev_lcell_comb
-- Equation(s):
-- \Result~2_combout\ = ( Data_B_aas(0) & ( \multiplication_function|R\(0) & ( (!\Result[2]~0_combout\ & (\division_function|Q\(0) & (\Result[2]~1_combout\))) # (\Result[2]~0_combout\ & (((!\Result[2]~1_combout\) # (!Data_A_aas(0))))) ) ) ) # ( 
-- !Data_B_aas(0) & ( \multiplication_function|R\(0) & ( (!\Result[2]~0_combout\ & (\division_function|Q\(0) & (\Result[2]~1_combout\))) # (\Result[2]~0_combout\ & (((!\Result[2]~1_combout\) # (Data_A_aas(0))))) ) ) ) # ( Data_B_aas(0) & ( 
-- !\multiplication_function|R\(0) & ( (\Result[2]~1_combout\ & ((!\Result[2]~0_combout\ & (\division_function|Q\(0))) # (\Result[2]~0_combout\ & ((!Data_A_aas(0)))))) ) ) ) # ( !Data_B_aas(0) & ( !\multiplication_function|R\(0) & ( (\Result[2]~1_combout\ & 
-- ((!\Result[2]~0_combout\ & (\division_function|Q\(0))) # (\Result[2]~0_combout\ & ((Data_A_aas(0)))))) ) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000010000000111000001110000010000110100001101110011011100110100",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \division_function|ALT_INV_Q\(0),
	datab => \ALT_INV_Result[2]~0_combout\,
	datac => \ALT_INV_Result[2]~1_combout\,
	datad => ALT_INV_Data_A_aas(0),
	datae => ALT_INV_Data_B_aas(0),
	dataf => \multiplication_function|ALT_INV_R\(0),
	combout => \Result~2_combout\);

\Result[2]~3\ : cyclonev_lcell_comb
-- Equation(s):
-- \Result[2]~3_combout\ = (!\START_main~input_o\) # (\state~q\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "1101110111011101110111011101110111011101110111011101110111011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_state~q\,
	datab => \ALT_INV_START_main~input_o\,
	combout => \Result[2]~3_combout\);

\Result[0]~reg0\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \Result~2_combout\,
	clrn => \RST_main~input_o\,
	ena => \Result[2]~3_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \Result[0]~reg0_q\);

\division_function|Quotient[1]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \division_function|Quotient\(0),
	clrn => \RST_main~input_o\,
	ena => \division_function|state.s2~q\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division_function|Quotient\(1));

\division_function|Q[1]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \division_function|Quotient\(1),
	clrn => \RST_main~input_o\,
	ena => \division_function|bit_counter[16]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division_function|Q\(1));

\Mode~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \Mode~0_combout\ = ( \Mode~q\ & ( (!\state~q\) # ((!\Operation[0]~input_o\) # ((!\Operation[1]~input_o\) # (!\RST_main~input_o\))) ) ) # ( !\Mode~q\ & ( (\state~q\ & (!\Operation[0]~input_o\ & (\Operation[1]~input_o\ & \RST_main~input_o\))) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000100111111111111111000000000000001001111111111111110",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_state~q\,
	datab => \ALT_INV_Operation[0]~input_o\,
	datac => \ALT_INV_Operation[1]~input_o\,
	datad => \ALT_INV_RST_main~input_o\,
	datae => \ALT_INV_Mode~q\,
	combout => \Mode~0_combout\);

Mode : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \Mode~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \Mode~q\);

\addandsub_function|eq_compar:1:sum|sum\ : cyclonev_lcell_comb
-- Equation(s):
-- \addandsub_function|eq_compar:1:sum|sum~combout\ = ( Data_B_aas(1) & ( !Data_A_aas(1) $ (((Data_B_aas(0) & (!Data_A_aas(0) $ (!\Mode~q\))))) ) ) # ( !Data_B_aas(1) & ( !Data_A_aas(1) $ (((!Data_B_aas(0)) # (!Data_A_aas(0) $ (\Mode~q\)))) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001111000101101111000011101001000011110001011011110000111010010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => ALT_INV_Data_A_aas(0),
	datab => ALT_INV_Data_B_aas(0),
	datac => ALT_INV_Data_A_aas(1),
	datad => \ALT_INV_Mode~q\,
	datae => ALT_INV_Data_B_aas(1),
	combout => \addandsub_function|eq_compar:1:sum|sum~combout\);

\multiplication_function|Data_A~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication_function|Data_A~1_combout\ = (!\multiplication_function|state~q\ & (Data_A_aas(1))) # (\multiplication_function|state~q\ & (((!\multiplication_function|LessThan0~5_combout\ & \multiplication_function|Data_A\(0)))))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0100010001110100010001000111010001000100011101000100010001110100",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => ALT_INV_Data_A_aas(1),
	datab => \multiplication_function|ALT_INV_state~q\,
	datac => \multiplication_function|ALT_INV_LessThan0~5_combout\,
	datad => \multiplication_function|ALT_INV_Data_A\(0),
	combout => \multiplication_function|Data_A~1_combout\);

\multiplication_function|Data_A[4]~2\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication_function|Data_A[4]~2_combout\ = (!\Start_division~q\) # (\multiplication_function|state~q\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "1101110111011101110111011101110111011101110111011101110111011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \multiplication_function|ALT_INV_state~q\,
	datab => \ALT_INV_Start_division~q\,
	combout => \multiplication_function|Data_A[4]~2_combout\);

\multiplication_function|Data_A[1]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \multiplication_function|Data_A~1_combout\,
	clrn => \RST_main~input_o\,
	ena => \multiplication_function|Data_A[4]~2_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication_function|Data_A\(1));

\multiplication_function|Add0~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication_function|Add0~5_sumout\ = SUM(( \multiplication_function|Data_Product\(1) ) + ( \multiplication_function|Data_A\(1) ) + ( \multiplication_function|Add0~2\ ))
-- \multiplication_function|Add0~6\ = CARRY(( \multiplication_function|Data_Product\(1) ) + ( \multiplication_function|Data_A\(1) ) + ( \multiplication_function|Add0~2\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111110000000000000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \multiplication_function|ALT_INV_Data_Product\(1),
	dataf => \multiplication_function|ALT_INV_Data_A\(1),
	cin => \multiplication_function|Add0~2\,
	sumout => \multiplication_function|Add0~5_sumout\,
	cout => \multiplication_function|Add0~6\);

\multiplication_function|Data_Product[1]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \multiplication_function|Add0~5_sumout\,
	clrn => \RST_main~input_o\,
	sclr => \multiplication_function|LessThan0~5_combout\,
	ena => \multiplication_function|Data_Product[0]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication_function|Data_Product\(1));

\multiplication_function|R[1]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \multiplication_function|Data_Product\(1),
	clrn => \RST_main~input_o\,
	ena => \multiplication_function|R[9]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication_function|R\(1));

\Result~4\ : cyclonev_lcell_comb
-- Equation(s):
-- \Result~4_combout\ = ( \multiplication_function|R\(1) & ( (!\Result[2]~0_combout\ & (\Result[2]~1_combout\ & (\division_function|Q\(1)))) # (\Result[2]~0_combout\ & ((!\Result[2]~1_combout\) # ((\addandsub_function|eq_compar:1:sum|sum~combout\)))) ) ) # ( 
-- !\multiplication_function|R\(1) & ( (\Result[2]~1_combout\ & ((!\Result[2]~0_combout\ & (\division_function|Q\(1))) # (\Result[2]~0_combout\ & ((\addandsub_function|eq_compar:1:sum|sum~combout\))))) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000001000010011010001100101011100000010000100110100011001010111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_Result[2]~0_combout\,
	datab => \ALT_INV_Result[2]~1_combout\,
	datac => \division_function|ALT_INV_Q\(1),
	datad => \addandsub_function|eq_compar:1:sum|ALT_INV_sum~combout\,
	datae => \multiplication_function|ALT_INV_R\(1),
	combout => \Result~4_combout\);

\Result[1]~reg0\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \Result~4_combout\,
	clrn => \RST_main~input_o\,
	ena => \Result[2]~3_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \Result[1]~reg0_q\);

\division_function|Quotient[2]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \division_function|Quotient\(1),
	clrn => \RST_main~input_o\,
	ena => \division_function|state.s2~q\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division_function|Quotient\(2));

\division_function|Q[2]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \division_function|Quotient\(2),
	clrn => \RST_main~input_o\,
	ena => \division_function|bit_counter[16]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division_function|Q\(2));

\addandsub_function|eq_compar:1:sum|C_out\ : cyclonev_lcell_comb
-- Equation(s):
-- \addandsub_function|eq_compar:1:sum|C_out~combout\ = ( Data_B_aas(1) & ( (!Data_A_aas(0) & (Data_A_aas(1) & ((!Data_B_aas(0)) # (!\Mode~q\)))) # (Data_A_aas(0) & (((Data_B_aas(0) & !\Mode~q\)) # (Data_A_aas(1)))) ) ) # ( !Data_B_aas(1) & ( (!Data_A_aas(0) 
-- & (\Mode~q\ & ((!Data_B_aas(0)) # (Data_A_aas(1))))) # (Data_A_aas(0) & (((Data_B_aas(0) & Data_A_aas(1))) # (\Mode~q\))) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000111011111000111110000110100000001110111110001111100001101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => ALT_INV_Data_A_aas(0),
	datab => ALT_INV_Data_B_aas(0),
	datac => ALT_INV_Data_A_aas(1),
	datad => \ALT_INV_Mode~q\,
	datae => ALT_INV_Data_B_aas(1),
	combout => \addandsub_function|eq_compar:1:sum|C_out~combout\);

\addandsub_function|eq_compar:2:sum|sum\ : cyclonev_lcell_comb
-- Equation(s):
-- \addandsub_function|eq_compar:2:sum|sum~combout\ = !\Mode~q\ $ (!\addandsub_function|eq_compar:1:sum|C_out~combout\ $ (!Data_A_aas(2) $ (!Data_B_aas(2))))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0110100110010110011010011001011001101001100101100110100110010110",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_Mode~q\,
	datab => \addandsub_function|eq_compar:1:sum|ALT_INV_C_out~combout\,
	datac => ALT_INV_Data_A_aas(2),
	datad => ALT_INV_Data_B_aas(2),
	combout => \addandsub_function|eq_compar:2:sum|sum~combout\);

\multiplication_function|Data_A~3\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication_function|Data_A~3_combout\ = (!\multiplication_function|state~q\ & (Data_A_aas(2))) # (\multiplication_function|state~q\ & (((!\multiplication_function|LessThan0~5_combout\ & \multiplication_function|Data_A\(1)))))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0100010001110100010001000111010001000100011101000100010001110100",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => ALT_INV_Data_A_aas(2),
	datab => \multiplication_function|ALT_INV_state~q\,
	datac => \multiplication_function|ALT_INV_LessThan0~5_combout\,
	datad => \multiplication_function|ALT_INV_Data_A\(1),
	combout => \multiplication_function|Data_A~3_combout\);

\multiplication_function|Data_A[2]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \multiplication_function|Data_A~3_combout\,
	clrn => \RST_main~input_o\,
	ena => \multiplication_function|Data_A[4]~2_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication_function|Data_A\(2));

\multiplication_function|Add0~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication_function|Add0~9_sumout\ = SUM(( \multiplication_function|Data_Product\(2) ) + ( \multiplication_function|Data_A\(2) ) + ( \multiplication_function|Add0~6\ ))
-- \multiplication_function|Add0~10\ = CARRY(( \multiplication_function|Data_Product\(2) ) + ( \multiplication_function|Data_A\(2) ) + ( \multiplication_function|Add0~6\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111110000000000000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \multiplication_function|ALT_INV_Data_Product\(2),
	dataf => \multiplication_function|ALT_INV_Data_A\(2),
	cin => \multiplication_function|Add0~6\,
	sumout => \multiplication_function|Add0~9_sumout\,
	cout => \multiplication_function|Add0~10\);

\multiplication_function|Data_Product[2]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \multiplication_function|Add0~9_sumout\,
	clrn => \RST_main~input_o\,
	sclr => \multiplication_function|LessThan0~5_combout\,
	ena => \multiplication_function|Data_Product[0]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication_function|Data_Product\(2));

\multiplication_function|R[2]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \multiplication_function|Data_Product\(2),
	clrn => \RST_main~input_o\,
	ena => \multiplication_function|R[9]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication_function|R\(2));

\Result~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \Result~5_combout\ = ( \multiplication_function|R\(2) & ( (!\Result[2]~0_combout\ & (\Result[2]~1_combout\ & (\division_function|Q\(2)))) # (\Result[2]~0_combout\ & ((!\Result[2]~1_combout\) # ((\addandsub_function|eq_compar:2:sum|sum~combout\)))) ) ) # ( 
-- !\multiplication_function|R\(2) & ( (\Result[2]~1_combout\ & ((!\Result[2]~0_combout\ & (\division_function|Q\(2))) # (\Result[2]~0_combout\ & ((\addandsub_function|eq_compar:2:sum|sum~combout\))))) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000001000010011010001100101011100000010000100110100011001010111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_Result[2]~0_combout\,
	datab => \ALT_INV_Result[2]~1_combout\,
	datac => \division_function|ALT_INV_Q\(2),
	datad => \addandsub_function|eq_compar:2:sum|ALT_INV_sum~combout\,
	datae => \multiplication_function|ALT_INV_R\(2),
	combout => \Result~5_combout\);

\Result[2]~reg0\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \Result~5_combout\,
	clrn => \RST_main~input_o\,
	ena => \Result[2]~3_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \Result[2]~reg0_q\);

\division_function|Quotient[3]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \division_function|Quotient\(2),
	clrn => \RST_main~input_o\,
	ena => \division_function|state.s2~q\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division_function|Quotient\(3));

\division_function|Q[3]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \division_function|Quotient\(3),
	clrn => \RST_main~input_o\,
	ena => \division_function|bit_counter[16]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division_function|Q\(3));

\addandsub_function|eq_compar:2:sum|C_out\ : cyclonev_lcell_comb
-- Equation(s):
-- \addandsub_function|eq_compar:2:sum|C_out~combout\ = (!\addandsub_function|eq_compar:1:sum|C_out~combout\ & (Data_A_aas(2) & (!\Mode~q\ $ (!Data_B_aas(2))))) # (\addandsub_function|eq_compar:1:sum|C_out~combout\ & ((!\Mode~q\ $ (!Data_B_aas(2))) # 
-- (Data_A_aas(2))))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001011100101011000101110010101100010111001010110001011100101011",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_Mode~q\,
	datab => \addandsub_function|eq_compar:1:sum|ALT_INV_C_out~combout\,
	datac => ALT_INV_Data_A_aas(2),
	datad => ALT_INV_Data_B_aas(2),
	combout => \addandsub_function|eq_compar:2:sum|C_out~combout\);

\addandsub_function|eq_compar:3:sum|sum\ : cyclonev_lcell_comb
-- Equation(s):
-- \addandsub_function|eq_compar:3:sum|sum~combout\ = !\Mode~q\ $ (!\addandsub_function|eq_compar:2:sum|C_out~combout\ $ (!Data_A_aas(3) $ (!Data_B_aas(3))))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0110100110010110011010011001011001101001100101100110100110010110",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_Mode~q\,
	datab => \addandsub_function|eq_compar:2:sum|ALT_INV_C_out~combout\,
	datac => ALT_INV_Data_A_aas(3),
	datad => ALT_INV_Data_B_aas(3),
	combout => \addandsub_function|eq_compar:3:sum|sum~combout\);

\multiplication_function|Data_A~4\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication_function|Data_A~4_combout\ = (!\multiplication_function|state~q\ & (Data_A_aas(3))) # (\multiplication_function|state~q\ & (((!\multiplication_function|LessThan0~5_combout\ & \multiplication_function|Data_A\(2)))))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0100010001110100010001000111010001000100011101000100010001110100",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => ALT_INV_Data_A_aas(3),
	datab => \multiplication_function|ALT_INV_state~q\,
	datac => \multiplication_function|ALT_INV_LessThan0~5_combout\,
	datad => \multiplication_function|ALT_INV_Data_A\(2),
	combout => \multiplication_function|Data_A~4_combout\);

\multiplication_function|Data_A[3]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \multiplication_function|Data_A~4_combout\,
	clrn => \RST_main~input_o\,
	ena => \multiplication_function|Data_A[4]~2_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication_function|Data_A\(3));

\multiplication_function|Add0~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication_function|Add0~13_sumout\ = SUM(( \multiplication_function|Data_Product\(3) ) + ( \multiplication_function|Data_A\(3) ) + ( \multiplication_function|Add0~10\ ))
-- \multiplication_function|Add0~14\ = CARRY(( \multiplication_function|Data_Product\(3) ) + ( \multiplication_function|Data_A\(3) ) + ( \multiplication_function|Add0~10\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111110000000000000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \multiplication_function|ALT_INV_Data_Product\(3),
	dataf => \multiplication_function|ALT_INV_Data_A\(3),
	cin => \multiplication_function|Add0~10\,
	sumout => \multiplication_function|Add0~13_sumout\,
	cout => \multiplication_function|Add0~14\);

\multiplication_function|Data_Product[3]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \multiplication_function|Add0~13_sumout\,
	clrn => \RST_main~input_o\,
	sclr => \multiplication_function|LessThan0~5_combout\,
	ena => \multiplication_function|Data_Product[0]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication_function|Data_Product\(3));

\multiplication_function|R[3]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \multiplication_function|Data_Product\(3),
	clrn => \RST_main~input_o\,
	ena => \multiplication_function|R[9]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication_function|R\(3));

\Result~6\ : cyclonev_lcell_comb
-- Equation(s):
-- \Result~6_combout\ = ( \multiplication_function|R\(3) & ( (!\Result[2]~0_combout\ & (\Result[2]~1_combout\ & (\division_function|Q\(3)))) # (\Result[2]~0_combout\ & ((!\Result[2]~1_combout\) # ((\addandsub_function|eq_compar:3:sum|sum~combout\)))) ) ) # ( 
-- !\multiplication_function|R\(3) & ( (\Result[2]~1_combout\ & ((!\Result[2]~0_combout\ & (\division_function|Q\(3))) # (\Result[2]~0_combout\ & ((\addandsub_function|eq_compar:3:sum|sum~combout\))))) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000001000010011010001100101011100000010000100110100011001010111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_Result[2]~0_combout\,
	datab => \ALT_INV_Result[2]~1_combout\,
	datac => \division_function|ALT_INV_Q\(3),
	datad => \addandsub_function|eq_compar:3:sum|ALT_INV_sum~combout\,
	datae => \multiplication_function|ALT_INV_R\(3),
	combout => \Result~6_combout\);

\Result[3]~reg0\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \Result~6_combout\,
	clrn => \RST_main~input_o\,
	ena => \Result[2]~3_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \Result[3]~reg0_q\);

\division_function|Quotient[4]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \division_function|Quotient\(3),
	clrn => \RST_main~input_o\,
	ena => \division_function|state.s2~q\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division_function|Quotient\(4));

\division_function|Q[4]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \division_function|Quotient\(4),
	clrn => \RST_main~input_o\,
	ena => \division_function|bit_counter[16]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division_function|Q\(4));

\addandsub_function|eq_compar:3:sum|C_out\ : cyclonev_lcell_comb
-- Equation(s):
-- \addandsub_function|eq_compar:3:sum|C_out~combout\ = (!\addandsub_function|eq_compar:2:sum|C_out~combout\ & (Data_A_aas(3) & (!\Mode~q\ $ (!Data_B_aas(3))))) # (\addandsub_function|eq_compar:2:sum|C_out~combout\ & ((!\Mode~q\ $ (!Data_B_aas(3))) # 
-- (Data_A_aas(3))))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001011100101011000101110010101100010111001010110001011100101011",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_Mode~q\,
	datab => \addandsub_function|eq_compar:2:sum|ALT_INV_C_out~combout\,
	datac => ALT_INV_Data_A_aas(3),
	datad => ALT_INV_Data_B_aas(3),
	combout => \addandsub_function|eq_compar:3:sum|C_out~combout\);

\addandsub_function|eq_compar:4:sum|sum\ : cyclonev_lcell_comb
-- Equation(s):
-- \addandsub_function|eq_compar:4:sum|sum~combout\ = !\Mode~q\ $ (!\addandsub_function|eq_compar:3:sum|C_out~combout\ $ (!Data_A_aas(4) $ (!Data_B_aas(4))))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0110100110010110011010011001011001101001100101100110100110010110",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_Mode~q\,
	datab => \addandsub_function|eq_compar:3:sum|ALT_INV_C_out~combout\,
	datac => ALT_INV_Data_A_aas(4),
	datad => ALT_INV_Data_B_aas(4),
	combout => \addandsub_function|eq_compar:4:sum|sum~combout\);

\multiplication_function|Data_A~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication_function|Data_A~5_combout\ = (!\multiplication_function|state~q\ & (Data_A_aas(4))) # (\multiplication_function|state~q\ & (((!\multiplication_function|LessThan0~5_combout\ & \multiplication_function|Data_A\(3)))))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0100010001110100010001000111010001000100011101000100010001110100",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => ALT_INV_Data_A_aas(4),
	datab => \multiplication_function|ALT_INV_state~q\,
	datac => \multiplication_function|ALT_INV_LessThan0~5_combout\,
	datad => \multiplication_function|ALT_INV_Data_A\(3),
	combout => \multiplication_function|Data_A~5_combout\);

\multiplication_function|Data_A[4]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \multiplication_function|Data_A~5_combout\,
	clrn => \RST_main~input_o\,
	ena => \multiplication_function|Data_A[4]~2_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication_function|Data_A\(4));

\multiplication_function|Add0~17\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication_function|Add0~17_sumout\ = SUM(( \multiplication_function|Data_Product\(4) ) + ( \multiplication_function|Data_A\(4) ) + ( \multiplication_function|Add0~14\ ))
-- \multiplication_function|Add0~18\ = CARRY(( \multiplication_function|Data_Product\(4) ) + ( \multiplication_function|Data_A\(4) ) + ( \multiplication_function|Add0~14\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111110000000000000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \multiplication_function|ALT_INV_Data_Product\(4),
	dataf => \multiplication_function|ALT_INV_Data_A\(4),
	cin => \multiplication_function|Add0~14\,
	sumout => \multiplication_function|Add0~17_sumout\,
	cout => \multiplication_function|Add0~18\);

\multiplication_function|Data_Product[4]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \multiplication_function|Add0~17_sumout\,
	clrn => \RST_main~input_o\,
	sclr => \multiplication_function|LessThan0~5_combout\,
	ena => \multiplication_function|Data_Product[0]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication_function|Data_Product\(4));

\multiplication_function|R[4]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \multiplication_function|Data_Product\(4),
	clrn => \RST_main~input_o\,
	ena => \multiplication_function|R[9]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication_function|R\(4));

\Result~7\ : cyclonev_lcell_comb
-- Equation(s):
-- \Result~7_combout\ = ( \multiplication_function|R\(4) & ( (!\Result[2]~0_combout\ & (\Result[2]~1_combout\ & (\division_function|Q\(4)))) # (\Result[2]~0_combout\ & ((!\Result[2]~1_combout\) # ((\addandsub_function|eq_compar:4:sum|sum~combout\)))) ) ) # ( 
-- !\multiplication_function|R\(4) & ( (\Result[2]~1_combout\ & ((!\Result[2]~0_combout\ & (\division_function|Q\(4))) # (\Result[2]~0_combout\ & ((\addandsub_function|eq_compar:4:sum|sum~combout\))))) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000001000010011010001100101011100000010000100110100011001010111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_Result[2]~0_combout\,
	datab => \ALT_INV_Result[2]~1_combout\,
	datac => \division_function|ALT_INV_Q\(4),
	datad => \addandsub_function|eq_compar:4:sum|ALT_INV_sum~combout\,
	datae => \multiplication_function|ALT_INV_R\(4),
	combout => \Result~7_combout\);

\Result[4]~reg0\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \Result~7_combout\,
	clrn => \RST_main~input_o\,
	ena => \Result[2]~3_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \Result[4]~reg0_q\);

\addandsub_function|eq_compar:4:sum|C_out\ : cyclonev_lcell_comb
-- Equation(s):
-- \addandsub_function|eq_compar:4:sum|C_out~combout\ = (!\addandsub_function|eq_compar:3:sum|C_out~combout\ & (Data_A_aas(4) & (!\Mode~q\ $ (!Data_B_aas(4))))) # (\addandsub_function|eq_compar:3:sum|C_out~combout\ & ((!\Mode~q\ $ (!Data_B_aas(4))) # 
-- (Data_A_aas(4))))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001011100101011000101110010101100010111001010110001011100101011",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_Mode~q\,
	datab => \addandsub_function|eq_compar:3:sum|ALT_INV_C_out~combout\,
	datac => ALT_INV_Data_A_aas(4),
	datad => ALT_INV_Data_B_aas(4),
	combout => \addandsub_function|eq_compar:4:sum|C_out~combout\);

\Result~8\ : cyclonev_lcell_comb
-- Equation(s):
-- \Result~8_combout\ = ( \input_A[0]~input_o\ & ( \input_B[0]~input_o\ & ( (!\input_A[2]~input_o\ & (((!\input_A[1]~input_o\ & \input_B[1]~input_o\)) # (\input_B[2]~input_o\))) # (\input_A[2]~input_o\ & (\input_B[2]~input_o\ & (!\input_A[1]~input_o\ & 
-- \input_B[1]~input_o\))) ) ) ) # ( !\input_A[0]~input_o\ & ( \input_B[0]~input_o\ & ( (!\input_A[2]~input_o\ & (((!\input_A[1]~input_o\) # (\input_B[1]~input_o\)) # (\input_B[2]~input_o\))) # (\input_A[2]~input_o\ & (\input_B[2]~input_o\ & 
-- ((!\input_A[1]~input_o\) # (\input_B[1]~input_o\)))) ) ) ) # ( \input_A[0]~input_o\ & ( !\input_B[0]~input_o\ & ( (!\input_A[2]~input_o\ & (((!\input_A[1]~input_o\ & \input_B[1]~input_o\)) # (\input_B[2]~input_o\))) # (\input_A[2]~input_o\ & 
-- (\input_B[2]~input_o\ & (!\input_A[1]~input_o\ & \input_B[1]~input_o\))) ) ) ) # ( !\input_A[0]~input_o\ & ( !\input_B[0]~input_o\ & ( (!\input_A[2]~input_o\ & (((!\input_A[1]~input_o\ & \input_B[1]~input_o\)) # (\input_B[2]~input_o\))) # 
-- (\input_A[2]~input_o\ & (\input_B[2]~input_o\ & (!\input_A[1]~input_o\ & \input_B[1]~input_o\))) ) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001010110010001000101011001010110010101110110010001010110010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_input_A[2]~input_o\,
	datab => \ALT_INV_input_B[2]~input_o\,
	datac => \ALT_INV_input_A[1]~input_o\,
	datad => \ALT_INV_input_B[1]~input_o\,
	datae => \ALT_INV_input_A[0]~input_o\,
	dataf => \ALT_INV_input_B[0]~input_o\,
	combout => \Result~8_combout\);

\Result~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \Result~9_combout\ = ( \Result~8_combout\ & ( (!\input_A[4]~input_o\ & (((!\input_A[3]~input_o\) # (\input_B[3]~input_o\)) # (\input_B[4]~input_o\))) # (\input_A[4]~input_o\ & (\input_B[4]~input_o\ & ((!\input_A[3]~input_o\) # (\input_B[3]~input_o\)))) ) 
-- ) # ( !\Result~8_combout\ & ( (!\input_A[4]~input_o\ & (((!\input_A[3]~input_o\ & \input_B[3]~input_o\)) # (\input_B[4]~input_o\))) # (\input_A[4]~input_o\ & (\input_B[4]~input_o\ & (!\input_A[3]~input_o\ & \input_B[3]~input_o\))) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001010110010101100101011101100100010101100101011001010111011",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_input_A[4]~input_o\,
	datab => \ALT_INV_input_B[4]~input_o\,
	datac => \ALT_INV_input_A[3]~input_o\,
	datad => \ALT_INV_input_B[3]~input_o\,
	datae => \ALT_INV_Result~8_combout\,
	combout => \Result~9_combout\);

\Result~10\ : cyclonev_lcell_comb
-- Equation(s):
-- \Result~10_combout\ = (\Operation[1]~input_o\ & ((\Result~9_combout\) # (\Operation[0]~input_o\)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001001100010011000100110001001100010011000100110001001100010011",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_Operation[0]~input_o\,
	datab => \ALT_INV_Operation[1]~input_o\,
	datac => \ALT_INV_Result~9_combout\,
	combout => \Result~10_combout\);

\multiplication_function|Data_A[5]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \multiplication_function|Data_A\(4),
	clrn => \RST_main~input_o\,
	sclr => \multiplication_function|LessThan0~5_combout\,
	ena => \multiplication_function|state~q\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication_function|Data_A\(5));

\multiplication_function|Add0~21\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication_function|Add0~21_sumout\ = SUM(( \multiplication_function|Data_Product\(5) ) + ( \multiplication_function|Data_A\(5) ) + ( \multiplication_function|Add0~18\ ))
-- \multiplication_function|Add0~22\ = CARRY(( \multiplication_function|Data_Product\(5) ) + ( \multiplication_function|Data_A\(5) ) + ( \multiplication_function|Add0~18\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111110000000000000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \multiplication_function|ALT_INV_Data_Product\(5),
	dataf => \multiplication_function|ALT_INV_Data_A\(5),
	cin => \multiplication_function|Add0~18\,
	sumout => \multiplication_function|Add0~21_sumout\,
	cout => \multiplication_function|Add0~22\);

\multiplication_function|Data_Product[5]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \multiplication_function|Add0~21_sumout\,
	clrn => \RST_main~input_o\,
	sclr => \multiplication_function|LessThan0~5_combout\,
	ena => \multiplication_function|Data_Product[0]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication_function|Data_Product\(5));

\multiplication_function|R[5]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \multiplication_function|Data_Product\(5),
	clrn => \RST_main~input_o\,
	ena => \multiplication_function|R[9]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication_function|R\(5));

\Result~11\ : cyclonev_lcell_comb
-- Equation(s):
-- \Result~11_combout\ = ( \multiplication_function|R\(5) & ( (!\Operation[0]~input_o\ & (\Result[5]~reg0_q\ & ((!\Operation[1]~input_o\) # (!\Result~9_combout\)))) # (\Operation[0]~input_o\ & (((!\Operation[1]~input_o\)))) ) ) # ( 
-- !\multiplication_function|R\(5) & ( (\Result[5]~reg0_q\ & (!\Operation[0]~input_o\ & ((!\Operation[1]~input_o\) # (!\Result~9_combout\)))) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0100010001000000011101000111000001000100010000000111010001110000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_Result[5]~reg0_q\,
	datab => \ALT_INV_Operation[0]~input_o\,
	datac => \ALT_INV_Operation[1]~input_o\,
	datad => \ALT_INV_Result~9_combout\,
	datae => \multiplication_function|ALT_INV_R\(5),
	combout => \Result~11_combout\);

\Result~12\ : cyclonev_lcell_comb
-- Equation(s):
-- \Result~12_combout\ = ( \Result~10_combout\ & ( \Result~11_combout\ & ( ((\Result[5]~reg0_q\ & \START_main~input_o\)) # (\state~q\) ) ) ) # ( !\Result~10_combout\ & ( \Result~11_combout\ & ( ((\Result[5]~reg0_q\ & \START_main~input_o\)) # (\state~q\) ) ) 
-- ) # ( \Result~10_combout\ & ( !\Result~11_combout\ & ( (!\state~q\ & (\Result[5]~reg0_q\ & (\START_main~input_o\))) # (\state~q\ & (((\addandsub_function|eq_compar:4:sum|C_out~combout\)))) ) ) ) # ( !\Result~10_combout\ & ( !\Result~11_combout\ & ( 
-- (\Result[5]~reg0_q\ & (!\state~q\ & \START_main~input_o\)) ) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000010000000100000001000011011100110111001101110011011100110111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_Result[5]~reg0_q\,
	datab => \ALT_INV_state~q\,
	datac => \ALT_INV_START_main~input_o\,
	datad => \addandsub_function|eq_compar:4:sum|ALT_INV_C_out~combout\,
	datae => \ALT_INV_Result~10_combout\,
	dataf => \ALT_INV_Result~11_combout\,
	combout => \Result~12_combout\);

\Result[5]~reg0\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \Result~12_combout\,
	clrn => \RST_main~input_o\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \Result[5]~reg0_q\);

\multiplication_function|Data_A[6]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \multiplication_function|Data_A\(5),
	clrn => \RST_main~input_o\,
	sclr => \multiplication_function|LessThan0~5_combout\,
	ena => \multiplication_function|state~q\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication_function|Data_A\(6));

\multiplication_function|Add0~25\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication_function|Add0~25_sumout\ = SUM(( \multiplication_function|Data_Product\(6) ) + ( \multiplication_function|Data_A\(6) ) + ( \multiplication_function|Add0~22\ ))
-- \multiplication_function|Add0~26\ = CARRY(( \multiplication_function|Data_Product\(6) ) + ( \multiplication_function|Data_A\(6) ) + ( \multiplication_function|Add0~22\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111110000000000000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \multiplication_function|ALT_INV_Data_Product\(6),
	dataf => \multiplication_function|ALT_INV_Data_A\(6),
	cin => \multiplication_function|Add0~22\,
	sumout => \multiplication_function|Add0~25_sumout\,
	cout => \multiplication_function|Add0~26\);

\multiplication_function|Data_Product[6]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \multiplication_function|Add0~25_sumout\,
	clrn => \RST_main~input_o\,
	sclr => \multiplication_function|LessThan0~5_combout\,
	ena => \multiplication_function|Data_Product[0]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication_function|Data_Product\(6));

\multiplication_function|R[6]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \multiplication_function|Data_Product\(6),
	clrn => \RST_main~input_o\,
	ena => \multiplication_function|R[9]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication_function|R\(6));

\Result~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \Result~13_combout\ = (\state~q\ & \multiplication_function|R\(6))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_state~q\,
	datab => \multiplication_function|ALT_INV_R\(6),
	combout => \Result~13_combout\);

\Result~14\ : cyclonev_lcell_comb
-- Equation(s):
-- \Result~14_combout\ = (!\state~q\ & (((!\START_main~input_o\)))) # (\state~q\ & (\Operation[0]~input_o\ & (!\Operation[1]~input_o\)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "1011101000010000101110100001000010111010000100001011101000010000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_state~q\,
	datab => \ALT_INV_Operation[0]~input_o\,
	datac => \ALT_INV_Operation[1]~input_o\,
	datad => \ALT_INV_START_main~input_o\,
	combout => \Result~14_combout\);

\Result[6]~reg0\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \Result~13_combout\,
	clrn => \RST_main~input_o\,
	ena => \Result~14_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \Result[6]~reg0_q\);

\multiplication_function|Data_A[7]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \multiplication_function|Data_A\(6),
	clrn => \RST_main~input_o\,
	sclr => \multiplication_function|LessThan0~5_combout\,
	ena => \multiplication_function|state~q\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication_function|Data_A\(7));

\multiplication_function|Add0~29\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication_function|Add0~29_sumout\ = SUM(( \multiplication_function|Data_Product\(7) ) + ( \multiplication_function|Data_A\(7) ) + ( \multiplication_function|Add0~26\ ))
-- \multiplication_function|Add0~30\ = CARRY(( \multiplication_function|Data_Product\(7) ) + ( \multiplication_function|Data_A\(7) ) + ( \multiplication_function|Add0~26\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111110000000000000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \multiplication_function|ALT_INV_Data_Product\(7),
	dataf => \multiplication_function|ALT_INV_Data_A\(7),
	cin => \multiplication_function|Add0~26\,
	sumout => \multiplication_function|Add0~29_sumout\,
	cout => \multiplication_function|Add0~30\);

\multiplication_function|Data_Product[7]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \multiplication_function|Add0~29_sumout\,
	clrn => \RST_main~input_o\,
	sclr => \multiplication_function|LessThan0~5_combout\,
	ena => \multiplication_function|Data_Product[0]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication_function|Data_Product\(7));

\multiplication_function|R[7]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \multiplication_function|Data_Product\(7),
	clrn => \RST_main~input_o\,
	ena => \multiplication_function|R[9]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication_function|R\(7));

\Result~15\ : cyclonev_lcell_comb
-- Equation(s):
-- \Result~15_combout\ = (\state~q\ & \multiplication_function|R\(7))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_state~q\,
	datab => \multiplication_function|ALT_INV_R\(7),
	combout => \Result~15_combout\);

\Result[7]~reg0\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \Result~15_combout\,
	clrn => \RST_main~input_o\,
	ena => \Result~14_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \Result[7]~reg0_q\);

\multiplication_function|Data_A[8]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \multiplication_function|Data_A\(7),
	clrn => \RST_main~input_o\,
	sclr => \multiplication_function|LessThan0~5_combout\,
	ena => \multiplication_function|state~q\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication_function|Data_A\(8));

\multiplication_function|Add0~33\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication_function|Add0~33_sumout\ = SUM(( \multiplication_function|Data_Product\(8) ) + ( \multiplication_function|Data_A\(8) ) + ( \multiplication_function|Add0~30\ ))
-- \multiplication_function|Add0~34\ = CARRY(( \multiplication_function|Data_Product\(8) ) + ( \multiplication_function|Data_A\(8) ) + ( \multiplication_function|Add0~30\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111110000000000000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \multiplication_function|ALT_INV_Data_Product\(8),
	dataf => \multiplication_function|ALT_INV_Data_A\(8),
	cin => \multiplication_function|Add0~30\,
	sumout => \multiplication_function|Add0~33_sumout\,
	cout => \multiplication_function|Add0~34\);

\multiplication_function|Data_Product[8]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \multiplication_function|Add0~33_sumout\,
	clrn => \RST_main~input_o\,
	sclr => \multiplication_function|LessThan0~5_combout\,
	ena => \multiplication_function|Data_Product[0]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication_function|Data_Product\(8));

\multiplication_function|R[8]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \multiplication_function|Data_Product\(8),
	clrn => \RST_main~input_o\,
	ena => \multiplication_function|R[9]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication_function|R\(8));

\Result~16\ : cyclonev_lcell_comb
-- Equation(s):
-- \Result~16_combout\ = (\state~q\ & \multiplication_function|R\(8))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_state~q\,
	datab => \multiplication_function|ALT_INV_R\(8),
	combout => \Result~16_combout\);

\Result[8]~reg0\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \Result~16_combout\,
	clrn => \RST_main~input_o\,
	ena => \Result~14_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \Result[8]~reg0_q\);

\multiplication_function|Data_A[9]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \multiplication_function|Data_A\(8),
	clrn => \RST_main~input_o\,
	sclr => \multiplication_function|LessThan0~5_combout\,
	ena => \multiplication_function|state~q\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication_function|Data_A\(9));

\multiplication_function|Add0~37\ : cyclonev_lcell_comb
-- Equation(s):
-- \multiplication_function|Add0~37_sumout\ = SUM(( \multiplication_function|Data_Product\(9) ) + ( \multiplication_function|Data_A\(9) ) + ( \multiplication_function|Add0~34\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111110000000000000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \multiplication_function|ALT_INV_Data_Product\(9),
	dataf => \multiplication_function|ALT_INV_Data_A\(9),
	cin => \multiplication_function|Add0~34\,
	sumout => \multiplication_function|Add0~37_sumout\);

\multiplication_function|Data_Product[9]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \multiplication_function|Add0~37_sumout\,
	clrn => \RST_main~input_o\,
	sclr => \multiplication_function|LessThan0~5_combout\,
	ena => \multiplication_function|Data_Product[0]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication_function|Data_Product\(9));

\multiplication_function|R[9]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \multiplication_function|Data_Product\(9),
	clrn => \RST_main~input_o\,
	ena => \multiplication_function|R[9]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \multiplication_function|R\(9));

\Result~17\ : cyclonev_lcell_comb
-- Equation(s):
-- \Result~17_combout\ = (\state~q\ & \multiplication_function|R\(9))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_state~q\,
	datab => \multiplication_function|ALT_INV_R\(9),
	combout => \Result~17_combout\);

\Result[9]~reg0\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \Result~17_combout\,
	clrn => \RST_main~input_o\,
	ena => \Result~14_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \Result[9]~reg0_q\);

\division_function|R[0]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \division_function|Remainder\(0),
	clrn => \RST_main~input_o\,
	ena => \division_function|bit_counter[16]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division_function|R\(0));

\Remainder~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \Remainder~0_combout\ = (!\state~q\ & (((!\START_main~input_o\)))) # (\state~q\ & (!\Operation[0]~input_o\ & (!\Operation[1]~input_o\)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "1110101001000000111010100100000011101010010000001110101001000000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_state~q\,
	datab => \ALT_INV_Operation[0]~input_o\,
	datac => \ALT_INV_Operation[1]~input_o\,
	datad => \ALT_INV_START_main~input_o\,
	combout => \Remainder~0_combout\);

\Remainder[0]~reg0\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \division_function|R\(0),
	clrn => \RST_main~input_o\,
	sclr => \ALT_INV_state~q\,
	ena => \Remainder~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \Remainder[0]~reg0_q\);

\division_function|R[1]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \division_function|Remainder\(1),
	clrn => \RST_main~input_o\,
	ena => \division_function|bit_counter[16]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division_function|R\(1));

\Remainder[1]~reg0\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \division_function|R\(1),
	clrn => \RST_main~input_o\,
	sclr => \ALT_INV_state~q\,
	ena => \Remainder~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \Remainder[1]~reg0_q\);

\division_function|R[2]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \division_function|Remainder\(2),
	clrn => \RST_main~input_o\,
	ena => \division_function|bit_counter[16]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division_function|R\(2));

\Remainder[2]~reg0\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \division_function|R\(2),
	clrn => \RST_main~input_o\,
	sclr => \ALT_INV_state~q\,
	ena => \Remainder~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \Remainder[2]~reg0_q\);

\division_function|R[3]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \division_function|Remainder\(3),
	clrn => \RST_main~input_o\,
	ena => \division_function|bit_counter[16]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division_function|R\(3));

\Remainder[3]~reg0\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \division_function|R\(3),
	clrn => \RST_main~input_o\,
	sclr => \ALT_INV_state~q\,
	ena => \Remainder~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \Remainder[3]~reg0_q\);

\division_function|R[4]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \division_function|Remainder\(4),
	clrn => \RST_main~input_o\,
	ena => \division_function|bit_counter[16]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division_function|R\(4));

\Remainder[4]~reg0\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \division_function|R\(4),
	clrn => \RST_main~input_o\,
	sclr => \ALT_INV_state~q\,
	ena => \Remainder~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \Remainder[4]~reg0_q\);

\division_function|R[5]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \division_function|Remainder\(5),
	clrn => \RST_main~input_o\,
	ena => \division_function|bit_counter[16]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division_function|R\(5));

\Remainder[5]~reg0\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \division_function|R\(5),
	clrn => \RST_main~input_o\,
	sclr => \ALT_INV_state~q\,
	ena => \Remainder~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \Remainder[5]~reg0_q\);

\division_function|R[6]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \division_function|Remainder\(6),
	clrn => \RST_main~input_o\,
	ena => \division_function|bit_counter[16]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division_function|R\(6));

\Remainder[6]~reg0\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \division_function|R\(6),
	clrn => \RST_main~input_o\,
	sclr => \ALT_INV_state~q\,
	ena => \Remainder~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \Remainder[6]~reg0_q\);

\division_function|R[7]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \division_function|Remainder\(7),
	clrn => \RST_main~input_o\,
	ena => \division_function|bit_counter[16]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division_function|R\(7));

\Remainder[7]~reg0\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \division_function|R\(7),
	clrn => \RST_main~input_o\,
	sclr => \ALT_INV_state~q\,
	ena => \Remainder~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \Remainder[7]~reg0_q\);

\division_function|R[8]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \division_function|Remainder\(8),
	clrn => \RST_main~input_o\,
	ena => \division_function|bit_counter[16]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division_function|R\(8));

\Remainder[8]~reg0\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \division_function|R\(8),
	clrn => \RST_main~input_o\,
	sclr => \ALT_INV_state~q\,
	ena => \Remainder~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \Remainder[8]~reg0_q\);

\division_function|R[9]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \division_function|Remainder\(9),
	clrn => \RST_main~input_o\,
	ena => \division_function|bit_counter[16]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \division_function|R\(9));

\Remainder[9]~reg0\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \division_function|R\(9),
	clrn => \RST_main~input_o\,
	sclr => \ALT_INV_state~q\,
	ena => \Remainder~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \Remainder[9]~reg0_q\);

\convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[0]~17\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[0]~17_sumout\ = SUM(( \Result[6]~reg0_q\ ) + ( !VCC ) + ( !VCC ))
-- \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[0]~18\ = CARRY(( \Result[6]~reg0_q\ ) + ( !VCC ) + ( !VCC ))
-- \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[0]~19\ = SHARE(VCC)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	datad => \ALT_INV_Result[6]~reg0_q\,
	cin => GND,
	sharein => GND,
	sumout => \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[0]~17_sumout\,
	cout => \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[0]~18\,
	shareout => \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[0]~19\);

\convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[1]~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[1]~13_sumout\ = SUM(( \Result[7]~reg0_q\ ) + ( \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[0]~19\ ) + ( 
-- \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[0]~18\ ))
-- \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[1]~14\ = CARRY(( \Result[7]~reg0_q\ ) + ( \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[0]~19\ ) + ( 
-- \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[0]~18\ ))
-- \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[1]~15\ = SHARE(GND)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000011111111",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	datad => \ALT_INV_Result[7]~reg0_q\,
	cin => \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[0]~18\,
	sharein => \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[0]~19\,
	sumout => \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[1]~13_sumout\,
	cout => \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[1]~14\,
	shareout => \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[1]~15\);

\convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[2]~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[2]~9_sumout\ = SUM(( !\Result[8]~reg0_q\ ) + ( \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[1]~15\ ) + ( 
-- \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[1]~14\ ))
-- \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[2]~10\ = CARRY(( !\Result[8]~reg0_q\ ) + ( \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[1]~15\ ) + ( 
-- \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[1]~14\ ))
-- \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[2]~11\ = SHARE(\Result[8]~reg0_q\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000001111111100000000000000001111111100000000",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	datad => \ALT_INV_Result[8]~reg0_q\,
	cin => \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[1]~14\,
	sharein => \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[1]~15\,
	sumout => \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[2]~9_sumout\,
	cout => \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[2]~10\,
	shareout => \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[2]~11\);

\convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[3]~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[3]~1_sumout\ = SUM(( \Result[9]~reg0_q\ ) + ( \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[2]~11\ ) + ( 
-- \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[2]~10\ ))
-- \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[3]~2\ = CARRY(( \Result[9]~reg0_q\ ) + ( \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[2]~11\ ) + ( 
-- \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[2]~10\ ))
-- \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[3]~3\ = SHARE(GND)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000011111111",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	datad => \ALT_INV_Result[9]~reg0_q\,
	cin => \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[2]~10\,
	sharein => \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[2]~11\,
	sumout => \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[3]~1_sumout\,
	cout => \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[3]~2\,
	shareout => \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[3]~3\);

\convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[4]~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[4]~5_sumout\ = SUM(( VCC ) + ( \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[3]~3\ ) + ( 
-- \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[3]~2\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[3]~2\,
	sharein => \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[3]~3\,
	sumout => \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[4]~5_sumout\);

\convert_binary|Mod0|auto_generated|divider|divider|StageOut[33]~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|StageOut[33]~9_combout\ = (\convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[3]~1_sumout\ & !\convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[4]~5_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0100010001000100010001000100010001000100010001000100010001000100",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[3]~1_sumout\,
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~5_sumout\,
	combout => \convert_binary|Mod0|auto_generated|divider|divider|StageOut[33]~9_combout\);

\convert_binary|Mod0|auto_generated|divider|divider|StageOut[33]~10\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|StageOut[33]~10_combout\ = (\Result[9]~reg0_q\ & \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[4]~5_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_Result[9]~reg0_q\,
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~5_sumout\,
	combout => \convert_binary|Mod0|auto_generated|divider|divider|StageOut[33]~10_combout\);

\convert_binary|Mod0|auto_generated|divider|divider|StageOut[31]~30\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|StageOut[31]~30_combout\ = (!\convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[4]~5_sumout\ & 
-- \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[1]~13_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~5_sumout\,
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[1]~13_sumout\,
	combout => \convert_binary|Mod0|auto_generated|divider|divider|StageOut[31]~30_combout\);

\convert_binary|Mod0|auto_generated|divider|divider|StageOut[31]~31\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|StageOut[31]~31_combout\ = (\Result[7]~reg0_q\ & \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[4]~5_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_Result[7]~reg0_q\,
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~5_sumout\,
	combout => \convert_binary|Mod0|auto_generated|divider|divider|StageOut[31]~31_combout\);

\convert_binary|Mod0|auto_generated|divider|divider|op_5~26\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|op_5~26_cout\ = CARRY(( VCC ) + ( VCC ) + ( !VCC ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => GND,
	cout => \convert_binary|Mod0|auto_generated|divider|divider|op_5~26_cout\);

\convert_binary|Mod0|auto_generated|divider|divider|op_5~21\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|op_5~21_sumout\ = SUM(( \Result[5]~reg0_q\ ) + ( VCC ) + ( \convert_binary|Mod0|auto_generated|divider|divider|op_5~26_cout\ ))
-- \convert_binary|Mod0|auto_generated|divider|divider|op_5~22\ = CARRY(( \Result[5]~reg0_q\ ) + ( VCC ) + ( \convert_binary|Mod0|auto_generated|divider|divider|op_5~26_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \ALT_INV_Result[5]~reg0_q\,
	cin => \convert_binary|Mod0|auto_generated|divider|divider|op_5~26_cout\,
	sumout => \convert_binary|Mod0|auto_generated|divider|divider|op_5~21_sumout\,
	cout => \convert_binary|Mod0|auto_generated|divider|divider|op_5~22\);

\convert_binary|Mod0|auto_generated|divider|divider|op_5~17\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|op_5~17_sumout\ = SUM(( (!\convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[4]~5_sumout\ & 
-- ((\convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[0]~17_sumout\))) # (\convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[4]~5_sumout\ & (\Result[6]~reg0_q\)) ) + ( GND ) + ( 
-- \convert_binary|Mod0|auto_generated|divider|divider|op_5~22\ ))
-- \convert_binary|Mod0|auto_generated|divider|divider|op_5~18\ = CARRY(( (!\convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[4]~5_sumout\ & ((\convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[0]~17_sumout\))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[4]~5_sumout\ & (\Result[6]~reg0_q\)) ) + ( GND ) + ( \convert_binary|Mod0|auto_generated|divider|divider|op_5~22\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000010111110101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_Result[6]~reg0_q\,
	datac => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~5_sumout\,
	datad => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[0]~17_sumout\,
	cin => \convert_binary|Mod0|auto_generated|divider|divider|op_5~22\,
	sumout => \convert_binary|Mod0|auto_generated|divider|divider|op_5~17_sumout\,
	cout => \convert_binary|Mod0|auto_generated|divider|divider|op_5~18\);

\convert_binary|Mod0|auto_generated|divider|divider|op_5~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|op_5~13_sumout\ = SUM(( (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[31]~31_combout\) # (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[31]~30_combout\) ) + ( VCC ) + ( 
-- \convert_binary|Mod0|auto_generated|divider|divider|op_5~18\ ))
-- \convert_binary|Mod0|auto_generated|divider|divider|op_5~14\ = CARRY(( (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[31]~31_combout\) # (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[31]~30_combout\) ) + ( VCC ) + ( 
-- \convert_binary|Mod0|auto_generated|divider|divider|op_5~18\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000011001111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[31]~30_combout\,
	datad => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[31]~31_combout\,
	cin => \convert_binary|Mod0|auto_generated|divider|divider|op_5~18\,
	sumout => \convert_binary|Mod0|auto_generated|divider|divider|op_5~13_sumout\,
	cout => \convert_binary|Mod0|auto_generated|divider|divider|op_5~14\);

\convert_binary|Mod0|auto_generated|divider|divider|op_5~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|op_5~9_sumout\ = SUM(( (!\convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[4]~5_sumout\ & ((\convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[2]~9_sumout\))) 
-- # (\convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[4]~5_sumout\ & (\Result[8]~reg0_q\)) ) + ( GND ) + ( \convert_binary|Mod0|auto_generated|divider|divider|op_5~14\ ))
-- \convert_binary|Mod0|auto_generated|divider|divider|op_5~10\ = CARRY(( (!\convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[4]~5_sumout\ & ((\convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[2]~9_sumout\))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[4]~5_sumout\ & (\Result[8]~reg0_q\)) ) + ( GND ) + ( \convert_binary|Mod0|auto_generated|divider|divider|op_5~14\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000010111110101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_Result[8]~reg0_q\,
	datac => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~5_sumout\,
	datad => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[2]~9_sumout\,
	cin => \convert_binary|Mod0|auto_generated|divider|divider|op_5~14\,
	sumout => \convert_binary|Mod0|auto_generated|divider|divider|op_5~9_sumout\,
	cout => \convert_binary|Mod0|auto_generated|divider|divider|op_5~10\);

\convert_binary|Mod0|auto_generated|divider|divider|op_5~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|op_5~5_sumout\ = SUM(( (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[33]~10_combout\) # (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[33]~9_combout\) ) + ( VCC ) + ( 
-- \convert_binary|Mod0|auto_generated|divider|divider|op_5~10\ ))
-- \convert_binary|Mod0|auto_generated|divider|divider|op_5~6\ = CARRY(( (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[33]~10_combout\) # (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[33]~9_combout\) ) + ( VCC ) + ( 
-- \convert_binary|Mod0|auto_generated|divider|divider|op_5~10\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000011001111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[33]~9_combout\,
	datad => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[33]~10_combout\,
	cin => \convert_binary|Mod0|auto_generated|divider|divider|op_5~10\,
	sumout => \convert_binary|Mod0|auto_generated|divider|divider|op_5~5_sumout\,
	cout => \convert_binary|Mod0|auto_generated|divider|divider|op_5~6\);

\convert_binary|Mod0|auto_generated|divider|divider|op_5~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|op_5~1_sumout\ = SUM(( VCC ) + ( GND ) + ( \convert_binary|Mod0|auto_generated|divider|divider|op_5~6\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Mod0|auto_generated|divider|divider|op_5~6\,
	sumout => \convert_binary|Mod0|auto_generated|divider|divider|op_5~1_sumout\);

\convert_binary|Mod0|auto_generated|divider|divider|StageOut[32]~17\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|StageOut[32]~17_combout\ = (!\convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[4]~5_sumout\ & \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[2]~9_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~5_sumout\,
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[2]~9_sumout\,
	combout => \convert_binary|Mod0|auto_generated|divider|divider|StageOut[32]~17_combout\);

\convert_binary|Mod0|auto_generated|divider|divider|StageOut[32]~18\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|StageOut[32]~18_combout\ = (\Result[8]~reg0_q\ & \convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[4]~5_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_Result[8]~reg0_q\,
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~5_sumout\,
	combout => \convert_binary|Mod0|auto_generated|divider|divider|StageOut[32]~18_combout\);

\convert_binary|Mod0|auto_generated|divider|divider|StageOut[31]~25\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|StageOut[31]~25_combout\ = (!\convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[4]~5_sumout\ & 
-- ((\convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[1]~13_sumout\))) # (\convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[4]~5_sumout\ & (\Result[7]~reg0_q\))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001110100011101000111010001110100011101000111010001110100011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_Result[7]~reg0_q\,
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~5_sumout\,
	datac => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[1]~13_sumout\,
	combout => \convert_binary|Mod0|auto_generated|divider|divider|StageOut[31]~25_combout\);

\convert_binary|Mod0|auto_generated|divider|divider|StageOut[30]~34\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|StageOut[30]~34_combout\ = (!\convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[4]~5_sumout\ & 
-- ((\convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[0]~17_sumout\))) # (\convert_binary|Mod0|auto_generated|divider|divider|add_sub_3_result_int[4]~5_sumout\ & (\Result[6]~reg0_q\))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001110100011101000111010001110100011101000111010001110100011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_Result[6]~reg0_q\,
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~5_sumout\,
	datac => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[0]~17_sumout\,
	combout => \convert_binary|Mod0|auto_generated|divider|divider|StageOut[30]~34_combout\);

\convert_binary|Mod0|auto_generated|divider|divider|op_6~30\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|op_6~30_cout\ = CARRY(( VCC ) + ( VCC ) + ( !VCC ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => GND,
	cout => \convert_binary|Mod0|auto_generated|divider|divider|op_6~30_cout\);

\convert_binary|Mod0|auto_generated|divider|divider|op_6~25\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|op_6~25_sumout\ = SUM(( \Result[4]~reg0_q\ ) + ( VCC ) + ( \convert_binary|Mod0|auto_generated|divider|divider|op_6~30_cout\ ))
-- \convert_binary|Mod0|auto_generated|divider|divider|op_6~26\ = CARRY(( \Result[4]~reg0_q\ ) + ( VCC ) + ( \convert_binary|Mod0|auto_generated|divider|divider|op_6~30_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \ALT_INV_Result[4]~reg0_q\,
	cin => \convert_binary|Mod0|auto_generated|divider|divider|op_6~30_cout\,
	sumout => \convert_binary|Mod0|auto_generated|divider|divider|op_6~25_sumout\,
	cout => \convert_binary|Mod0|auto_generated|divider|divider|op_6~26\);

\convert_binary|Mod0|auto_generated|divider|divider|op_6~21\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|op_6~21_sumout\ = SUM(( (!\convert_binary|Mod0|auto_generated|divider|divider|op_5~1_sumout\ & ((\convert_binary|Mod0|auto_generated|divider|divider|op_5~21_sumout\))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_5~1_sumout\ & (\Result[5]~reg0_q\)) ) + ( GND ) + ( \convert_binary|Mod0|auto_generated|divider|divider|op_6~26\ ))
-- \convert_binary|Mod0|auto_generated|divider|divider|op_6~22\ = CARRY(( (!\convert_binary|Mod0|auto_generated|divider|divider|op_5~1_sumout\ & ((\convert_binary|Mod0|auto_generated|divider|divider|op_5~21_sumout\))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_5~1_sumout\ & (\Result[5]~reg0_q\)) ) + ( GND ) + ( \convert_binary|Mod0|auto_generated|divider|divider|op_6~26\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000001000111011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_Result[5]~reg0_q\,
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\,
	datad => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_5~21_sumout\,
	cin => \convert_binary|Mod0|auto_generated|divider|divider|op_6~26\,
	sumout => \convert_binary|Mod0|auto_generated|divider|divider|op_6~21_sumout\,
	cout => \convert_binary|Mod0|auto_generated|divider|divider|op_6~22\);

\convert_binary|Mod0|auto_generated|divider|divider|op_6~17\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|op_6~17_sumout\ = SUM(( (!\convert_binary|Mod0|auto_generated|divider|divider|op_5~1_sumout\ & ((\convert_binary|Mod0|auto_generated|divider|divider|op_5~17_sumout\))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_5~1_sumout\ & (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[30]~34_combout\)) ) + ( VCC ) + ( \convert_binary|Mod0|auto_generated|divider|divider|op_6~22\ ))
-- \convert_binary|Mod0|auto_generated|divider|divider|op_6~18\ = CARRY(( (!\convert_binary|Mod0|auto_generated|divider|divider|op_5~1_sumout\ & ((\convert_binary|Mod0|auto_generated|divider|divider|op_5~17_sumout\))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_5~1_sumout\ & (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[30]~34_combout\)) ) + ( VCC ) + ( \convert_binary|Mod0|auto_generated|divider|divider|op_6~22\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000001111001111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\,
	datac => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[30]~34_combout\,
	datad => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_5~17_sumout\,
	cin => \convert_binary|Mod0|auto_generated|divider|divider|op_6~22\,
	sumout => \convert_binary|Mod0|auto_generated|divider|divider|op_6~17_sumout\,
	cout => \convert_binary|Mod0|auto_generated|divider|divider|op_6~18\);

\convert_binary|Mod0|auto_generated|divider|divider|op_6~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|op_6~13_sumout\ = SUM(( (!\convert_binary|Mod0|auto_generated|divider|divider|op_5~1_sumout\ & ((\convert_binary|Mod0|auto_generated|divider|divider|op_5~13_sumout\))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_5~1_sumout\ & (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[31]~25_combout\)) ) + ( GND ) + ( \convert_binary|Mod0|auto_generated|divider|divider|op_6~18\ ))
-- \convert_binary|Mod0|auto_generated|divider|divider|op_6~14\ = CARRY(( (!\convert_binary|Mod0|auto_generated|divider|divider|op_5~1_sumout\ & ((\convert_binary|Mod0|auto_generated|divider|divider|op_5~13_sumout\))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_5~1_sumout\ & (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[31]~25_combout\)) ) + ( GND ) + ( \convert_binary|Mod0|auto_generated|divider|divider|op_6~18\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\,
	datac => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[31]~25_combout\,
	datad => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_5~13_sumout\,
	cin => \convert_binary|Mod0|auto_generated|divider|divider|op_6~18\,
	sumout => \convert_binary|Mod0|auto_generated|divider|divider|op_6~13_sumout\,
	cout => \convert_binary|Mod0|auto_generated|divider|divider|op_6~14\);

\convert_binary|Mod0|auto_generated|divider|divider|op_6~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|op_6~9_sumout\ = SUM(( (!\convert_binary|Mod0|auto_generated|divider|divider|op_5~1_sumout\ & (((\convert_binary|Mod0|auto_generated|divider|divider|op_5~9_sumout\)))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_5~1_sumout\ & (((\convert_binary|Mod0|auto_generated|divider|divider|StageOut[32]~18_combout\)) # (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[32]~17_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod0|auto_generated|divider|divider|op_6~14\ ))
-- \convert_binary|Mod0|auto_generated|divider|divider|op_6~10\ = CARRY(( (!\convert_binary|Mod0|auto_generated|divider|divider|op_5~1_sumout\ & (((\convert_binary|Mod0|auto_generated|divider|divider|op_5~9_sumout\)))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_5~1_sumout\ & (((\convert_binary|Mod0|auto_generated|divider|divider|StageOut[32]~18_combout\)) # (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[32]~17_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod0|auto_generated|divider|divider|op_6~14\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\,
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[32]~17_combout\,
	datac => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_5~9_sumout\,
	datad => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[32]~18_combout\,
	cin => \convert_binary|Mod0|auto_generated|divider|divider|op_6~14\,
	sumout => \convert_binary|Mod0|auto_generated|divider|divider|op_6~9_sumout\,
	cout => \convert_binary|Mod0|auto_generated|divider|divider|op_6~10\);

\convert_binary|Mod0|auto_generated|divider|divider|op_6~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|op_6~5_sumout\ = SUM(( (!\convert_binary|Mod0|auto_generated|divider|divider|op_5~1_sumout\ & (((\convert_binary|Mod0|auto_generated|divider|divider|op_5~5_sumout\)))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_5~1_sumout\ & (((\convert_binary|Mod0|auto_generated|divider|divider|StageOut[33]~9_combout\)) # (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[33]~10_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod0|auto_generated|divider|divider|op_6~10\ ))
-- \convert_binary|Mod0|auto_generated|divider|divider|op_6~6\ = CARRY(( (!\convert_binary|Mod0|auto_generated|divider|divider|op_5~1_sumout\ & (((\convert_binary|Mod0|auto_generated|divider|divider|op_5~5_sumout\)))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_5~1_sumout\ & (((\convert_binary|Mod0|auto_generated|divider|divider|StageOut[33]~9_combout\)) # (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[33]~10_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod0|auto_generated|divider|divider|op_6~10\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001010110111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\,
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[33]~10_combout\,
	datac => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[33]~9_combout\,
	datad => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_5~5_sumout\,
	cin => \convert_binary|Mod0|auto_generated|divider|divider|op_6~10\,
	sumout => \convert_binary|Mod0|auto_generated|divider|divider|op_6~5_sumout\,
	cout => \convert_binary|Mod0|auto_generated|divider|divider|op_6~6\);

\convert_binary|Mod0|auto_generated|divider|divider|op_6~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|op_6~1_sumout\ = SUM(( VCC ) + ( GND ) + ( \convert_binary|Mod0|auto_generated|divider|divider|op_6~6\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Mod0|auto_generated|divider|divider|op_6~6\,
	sumout => \convert_binary|Mod0|auto_generated|divider|divider|op_6~1_sumout\);

\convert_binary|Mod0|auto_generated|divider|divider|StageOut[44]~8\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|StageOut[44]~8_combout\ = (!\convert_binary|Mod0|auto_generated|divider|divider|op_5~1_sumout\ & \convert_binary|Mod0|auto_generated|divider|divider|op_5~5_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\,
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_5~5_sumout\,
	combout => \convert_binary|Mod0|auto_generated|divider|divider|StageOut[44]~8_combout\);

\convert_binary|Mod0|auto_generated|divider|divider|StageOut[44]~11\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|StageOut[44]~11_combout\ = (\convert_binary|Mod0|auto_generated|divider|divider|op_5~1_sumout\ & ((\convert_binary|Mod0|auto_generated|divider|divider|StageOut[33]~10_combout\) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[33]~9_combout\)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000011100000111000001110000011100000111000001110000011100000111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[33]~9_combout\,
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[33]~10_combout\,
	datac => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\,
	combout => \convert_binary|Mod0|auto_generated|divider|divider|StageOut[44]~11_combout\);

\convert_binary|Mod0|auto_generated|divider|divider|StageOut[43]~19\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|StageOut[43]~19_combout\ = (!\convert_binary|Mod0|auto_generated|divider|divider|op_5~1_sumout\ & (((\convert_binary|Mod0|auto_generated|divider|divider|op_5~9_sumout\)))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_5~1_sumout\ & (((\convert_binary|Mod0|auto_generated|divider|divider|StageOut[32]~18_combout\)) # (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[32]~17_combout\)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001101101011111000110110101111100011011010111110001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\,
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[32]~17_combout\,
	datac => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_5~9_sumout\,
	datad => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[32]~18_combout\,
	combout => \convert_binary|Mod0|auto_generated|divider|divider|StageOut[43]~19_combout\);

\convert_binary|Mod0|auto_generated|divider|divider|StageOut[42]~24\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|StageOut[42]~24_combout\ = (!\convert_binary|Mod0|auto_generated|divider|divider|op_5~1_sumout\ & \convert_binary|Mod0|auto_generated|divider|divider|op_5~13_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\,
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_5~13_sumout\,
	combout => \convert_binary|Mod0|auto_generated|divider|divider|StageOut[42]~24_combout\);

\convert_binary|Mod0|auto_generated|divider|divider|StageOut[42]~26\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|StageOut[42]~26_combout\ = (\convert_binary|Mod0|auto_generated|divider|divider|op_5~1_sumout\ & \convert_binary|Mod0|auto_generated|divider|divider|StageOut[31]~25_combout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\,
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[31]~25_combout\,
	combout => \convert_binary|Mod0|auto_generated|divider|divider|StageOut[42]~26_combout\);

\convert_binary|Mod0|auto_generated|divider|divider|StageOut[41]~35\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|StageOut[41]~35_combout\ = (!\convert_binary|Mod0|auto_generated|divider|divider|op_5~1_sumout\ & ((\convert_binary|Mod0|auto_generated|divider|divider|op_5~17_sumout\))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_5~1_sumout\ & (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[30]~34_combout\))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001101100011011000110110001101100011011000110110001101100011011",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\,
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[30]~34_combout\,
	datac => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_5~17_sumout\,
	combout => \convert_binary|Mod0|auto_generated|divider|divider|StageOut[41]~35_combout\);

\convert_binary|Mod0|auto_generated|divider|divider|StageOut[40]~40\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|StageOut[40]~40_combout\ = (!\convert_binary|Mod0|auto_generated|divider|divider|op_5~1_sumout\ & ((\convert_binary|Mod0|auto_generated|divider|divider|op_5~21_sumout\))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_5~1_sumout\ & (\Result[5]~reg0_q\))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001110100011101000111010001110100011101000111010001110100011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_Result[5]~reg0_q\,
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\,
	datac => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_5~21_sumout\,
	combout => \convert_binary|Mod0|auto_generated|divider|divider|StageOut[40]~40_combout\);

\convert_binary|Mod0|auto_generated|divider|divider|op_7~14\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|op_7~14_cout\ = CARRY(( VCC ) + ( VCC ) + ( !VCC ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => GND,
	cout => \convert_binary|Mod0|auto_generated|divider|divider|op_7~14_cout\);

\convert_binary|Mod0|auto_generated|divider|divider|op_7~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|op_7~5_sumout\ = SUM(( \Result[3]~reg0_q\ ) + ( VCC ) + ( \convert_binary|Mod0|auto_generated|divider|divider|op_7~14_cout\ ))
-- \convert_binary|Mod0|auto_generated|divider|divider|op_7~6\ = CARRY(( \Result[3]~reg0_q\ ) + ( VCC ) + ( \convert_binary|Mod0|auto_generated|divider|divider|op_7~14_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \ALT_INV_Result[3]~reg0_q\,
	cin => \convert_binary|Mod0|auto_generated|divider|divider|op_7~14_cout\,
	sumout => \convert_binary|Mod0|auto_generated|divider|divider|op_7~5_sumout\,
	cout => \convert_binary|Mod0|auto_generated|divider|divider|op_7~6\);

\convert_binary|Mod0|auto_generated|divider|divider|op_7~33\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|op_7~33_sumout\ = SUM(( (!\convert_binary|Mod0|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Mod0|auto_generated|divider|divider|op_6~25_sumout\))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_6~1_sumout\ & (\Result[4]~reg0_q\)) ) + ( GND ) + ( \convert_binary|Mod0|auto_generated|divider|divider|op_7~6\ ))
-- \convert_binary|Mod0|auto_generated|divider|divider|op_7~34\ = CARRY(( (!\convert_binary|Mod0|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Mod0|auto_generated|divider|divider|op_6~25_sumout\))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_6~1_sumout\ & (\Result[4]~reg0_q\)) ) + ( GND ) + ( \convert_binary|Mod0|auto_generated|divider|divider|op_7~6\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000001000111011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_Result[4]~reg0_q\,
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datad => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_6~25_sumout\,
	cin => \convert_binary|Mod0|auto_generated|divider|divider|op_7~6\,
	sumout => \convert_binary|Mod0|auto_generated|divider|divider|op_7~33_sumout\,
	cout => \convert_binary|Mod0|auto_generated|divider|divider|op_7~34\);

\convert_binary|Mod0|auto_generated|divider|divider|op_7~29\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|op_7~29_sumout\ = SUM(( (!\convert_binary|Mod0|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Mod0|auto_generated|divider|divider|op_6~21_sumout\))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_6~1_sumout\ & (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[40]~40_combout\)) ) + ( VCC ) + ( \convert_binary|Mod0|auto_generated|divider|divider|op_7~34\ ))
-- \convert_binary|Mod0|auto_generated|divider|divider|op_7~30\ = CARRY(( (!\convert_binary|Mod0|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Mod0|auto_generated|divider|divider|op_6~21_sumout\))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_6~1_sumout\ & (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[40]~40_combout\)) ) + ( VCC ) + ( \convert_binary|Mod0|auto_generated|divider|divider|op_7~34\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000001111001111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datac => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[40]~40_combout\,
	datad => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_6~21_sumout\,
	cin => \convert_binary|Mod0|auto_generated|divider|divider|op_7~34\,
	sumout => \convert_binary|Mod0|auto_generated|divider|divider|op_7~29_sumout\,
	cout => \convert_binary|Mod0|auto_generated|divider|divider|op_7~30\);

\convert_binary|Mod0|auto_generated|divider|divider|op_7~25\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|op_7~25_sumout\ = SUM(( (!\convert_binary|Mod0|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Mod0|auto_generated|divider|divider|op_6~17_sumout\))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_6~1_sumout\ & (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[41]~35_combout\)) ) + ( GND ) + ( \convert_binary|Mod0|auto_generated|divider|divider|op_7~30\ ))
-- \convert_binary|Mod0|auto_generated|divider|divider|op_7~26\ = CARRY(( (!\convert_binary|Mod0|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Mod0|auto_generated|divider|divider|op_6~17_sumout\))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_6~1_sumout\ & (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[41]~35_combout\)) ) + ( GND ) + ( \convert_binary|Mod0|auto_generated|divider|divider|op_7~30\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datac => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[41]~35_combout\,
	datad => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_6~17_sumout\,
	cin => \convert_binary|Mod0|auto_generated|divider|divider|op_7~30\,
	sumout => \convert_binary|Mod0|auto_generated|divider|divider|op_7~25_sumout\,
	cout => \convert_binary|Mod0|auto_generated|divider|divider|op_7~26\);

\convert_binary|Mod0|auto_generated|divider|divider|op_7~21\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|op_7~21_sumout\ = SUM(( (!\convert_binary|Mod0|auto_generated|divider|divider|op_6~1_sumout\ & (((\convert_binary|Mod0|auto_generated|divider|divider|op_6~13_sumout\)))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_6~1_sumout\ & (((\convert_binary|Mod0|auto_generated|divider|divider|StageOut[42]~26_combout\)) # (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[42]~24_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod0|auto_generated|divider|divider|op_7~26\ ))
-- \convert_binary|Mod0|auto_generated|divider|divider|op_7~22\ = CARRY(( (!\convert_binary|Mod0|auto_generated|divider|divider|op_6~1_sumout\ & (((\convert_binary|Mod0|auto_generated|divider|divider|op_6~13_sumout\)))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_6~1_sumout\ & (((\convert_binary|Mod0|auto_generated|divider|divider|StageOut[42]~26_combout\)) # (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[42]~24_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod0|auto_generated|divider|divider|op_7~26\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[42]~24_combout\,
	datac => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_6~13_sumout\,
	datad => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[42]~26_combout\,
	cin => \convert_binary|Mod0|auto_generated|divider|divider|op_7~26\,
	sumout => \convert_binary|Mod0|auto_generated|divider|divider|op_7~21_sumout\,
	cout => \convert_binary|Mod0|auto_generated|divider|divider|op_7~22\);

\convert_binary|Mod0|auto_generated|divider|divider|op_7~17\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|op_7~17_sumout\ = SUM(( (!\convert_binary|Mod0|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Mod0|auto_generated|divider|divider|op_6~9_sumout\))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_6~1_sumout\ & (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[43]~19_combout\)) ) + ( VCC ) + ( \convert_binary|Mod0|auto_generated|divider|divider|op_7~22\ ))
-- \convert_binary|Mod0|auto_generated|divider|divider|op_7~18\ = CARRY(( (!\convert_binary|Mod0|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Mod0|auto_generated|divider|divider|op_6~9_sumout\))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_6~1_sumout\ & (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[43]~19_combout\)) ) + ( VCC ) + ( \convert_binary|Mod0|auto_generated|divider|divider|op_7~22\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datac => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[43]~19_combout\,
	datad => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_6~9_sumout\,
	cin => \convert_binary|Mod0|auto_generated|divider|divider|op_7~22\,
	sumout => \convert_binary|Mod0|auto_generated|divider|divider|op_7~17_sumout\,
	cout => \convert_binary|Mod0|auto_generated|divider|divider|op_7~18\);

\convert_binary|Mod0|auto_generated|divider|divider|op_7~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|op_7~9_sumout\ = SUM(( (!\convert_binary|Mod0|auto_generated|divider|divider|op_6~1_sumout\ & (((\convert_binary|Mod0|auto_generated|divider|divider|op_6~5_sumout\)))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_6~1_sumout\ & (((\convert_binary|Mod0|auto_generated|divider|divider|StageOut[44]~11_combout\)) # (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[44]~8_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod0|auto_generated|divider|divider|op_7~18\ ))
-- \convert_binary|Mod0|auto_generated|divider|divider|op_7~10\ = CARRY(( (!\convert_binary|Mod0|auto_generated|divider|divider|op_6~1_sumout\ & (((\convert_binary|Mod0|auto_generated|divider|divider|op_6~5_sumout\)))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_6~1_sumout\ & (((\convert_binary|Mod0|auto_generated|divider|divider|StageOut[44]~11_combout\)) # (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[44]~8_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod0|auto_generated|divider|divider|op_7~18\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[44]~8_combout\,
	datac => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_6~5_sumout\,
	datad => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[44]~11_combout\,
	cin => \convert_binary|Mod0|auto_generated|divider|divider|op_7~18\,
	sumout => \convert_binary|Mod0|auto_generated|divider|divider|op_7~9_sumout\,
	cout => \convert_binary|Mod0|auto_generated|divider|divider|op_7~10\);

\convert_binary|Mod0|auto_generated|divider|divider|op_7~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|op_7~1_sumout\ = SUM(( VCC ) + ( GND ) + ( \convert_binary|Mod0|auto_generated|divider|divider|op_7~10\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Mod0|auto_generated|divider|divider|op_7~10\,
	sumout => \convert_binary|Mod0|auto_generated|divider|divider|op_7~1_sumout\);

\convert_binary|Mod0|auto_generated|divider|divider|StageOut[55]~7\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|StageOut[55]~7_combout\ = (!\convert_binary|Mod0|auto_generated|divider|divider|op_6~1_sumout\ & \convert_binary|Mod0|auto_generated|divider|divider|op_6~5_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_6~5_sumout\,
	combout => \convert_binary|Mod0|auto_generated|divider|divider|StageOut[55]~7_combout\);

\convert_binary|Mod0|auto_generated|divider|divider|StageOut[55]~12\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|StageOut[55]~12_combout\ = (\convert_binary|Mod0|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Mod0|auto_generated|divider|divider|StageOut[44]~11_combout\) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[44]~8_combout\)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001010100010101000101010001010100010101000101010001010100010101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[44]~8_combout\,
	datac => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[44]~11_combout\,
	combout => \convert_binary|Mod0|auto_generated|divider|divider|StageOut[55]~12_combout\);

\convert_binary|Mod0|auto_generated|divider|divider|StageOut[54]~16\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|StageOut[54]~16_combout\ = (!\convert_binary|Mod0|auto_generated|divider|divider|op_6~1_sumout\ & \convert_binary|Mod0|auto_generated|divider|divider|op_6~9_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_6~9_sumout\,
	combout => \convert_binary|Mod0|auto_generated|divider|divider|StageOut[54]~16_combout\);

\convert_binary|Mod0|auto_generated|divider|divider|StageOut[54]~20\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|StageOut[54]~20_combout\ = (\convert_binary|Mod0|auto_generated|divider|divider|op_6~1_sumout\ & \convert_binary|Mod0|auto_generated|divider|divider|StageOut[43]~19_combout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[43]~19_combout\,
	combout => \convert_binary|Mod0|auto_generated|divider|divider|StageOut[54]~20_combout\);

\convert_binary|Mod0|auto_generated|divider|divider|StageOut[53]~27\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|StageOut[53]~27_combout\ = (!\convert_binary|Mod0|auto_generated|divider|divider|op_6~1_sumout\ & (((\convert_binary|Mod0|auto_generated|divider|divider|op_6~13_sumout\)))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_6~1_sumout\ & (((\convert_binary|Mod0|auto_generated|divider|divider|StageOut[42]~26_combout\)) # (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[42]~24_combout\)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001101101011111000110110101111100011011010111110001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[42]~24_combout\,
	datac => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_6~13_sumout\,
	datad => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[42]~26_combout\,
	combout => \convert_binary|Mod0|auto_generated|divider|divider|StageOut[53]~27_combout\);

\convert_binary|Mod0|auto_generated|divider|divider|StageOut[52]~33\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|StageOut[52]~33_combout\ = (!\convert_binary|Mod0|auto_generated|divider|divider|op_6~1_sumout\ & \convert_binary|Mod0|auto_generated|divider|divider|op_6~17_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_6~17_sumout\,
	combout => \convert_binary|Mod0|auto_generated|divider|divider|StageOut[52]~33_combout\);

\convert_binary|Mod0|auto_generated|divider|divider|StageOut[52]~36\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|StageOut[52]~36_combout\ = (\convert_binary|Mod0|auto_generated|divider|divider|op_6~1_sumout\ & \convert_binary|Mod0|auto_generated|divider|divider|StageOut[41]~35_combout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[41]~35_combout\,
	combout => \convert_binary|Mod0|auto_generated|divider|divider|StageOut[52]~36_combout\);

\convert_binary|Mod0|auto_generated|divider|divider|StageOut[51]~41\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|StageOut[51]~41_combout\ = (!\convert_binary|Mod0|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Mod0|auto_generated|divider|divider|op_6~21_sumout\))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_6~1_sumout\ & (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[40]~40_combout\))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001101100011011000110110001101100011011000110110001101100011011",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[40]~40_combout\,
	datac => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_6~21_sumout\,
	combout => \convert_binary|Mod0|auto_generated|divider|divider|StageOut[51]~41_combout\);

\convert_binary|Mod0|auto_generated|divider|divider|StageOut[50]~45\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|StageOut[50]~45_combout\ = (!\convert_binary|Mod0|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Mod0|auto_generated|divider|divider|op_6~25_sumout\))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_6~1_sumout\ & (\Result[4]~reg0_q\))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001110100011101000111010001110100011101000111010001110100011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_Result[4]~reg0_q\,
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datac => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_6~25_sumout\,
	combout => \convert_binary|Mod0|auto_generated|divider|divider|StageOut[50]~45_combout\);

\convert_binary|Mod0|auto_generated|divider|divider|op_8~18\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|op_8~18_cout\ = CARRY(( VCC ) + ( VCC ) + ( !VCC ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => GND,
	cout => \convert_binary|Mod0|auto_generated|divider|divider|op_8~18_cout\);

\convert_binary|Mod0|auto_generated|divider|divider|op_8~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|op_8~5_sumout\ = SUM(( \Result[2]~reg0_q\ ) + ( VCC ) + ( \convert_binary|Mod0|auto_generated|divider|divider|op_8~18_cout\ ))
-- \convert_binary|Mod0|auto_generated|divider|divider|op_8~6\ = CARRY(( \Result[2]~reg0_q\ ) + ( VCC ) + ( \convert_binary|Mod0|auto_generated|divider|divider|op_8~18_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \ALT_INV_Result[2]~reg0_q\,
	cin => \convert_binary|Mod0|auto_generated|divider|divider|op_8~18_cout\,
	sumout => \convert_binary|Mod0|auto_generated|divider|divider|op_8~5_sumout\,
	cout => \convert_binary|Mod0|auto_generated|divider|divider|op_8~6\);

\convert_binary|Mod0|auto_generated|divider|divider|op_8~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|op_8~9_sumout\ = SUM(( (!\convert_binary|Mod0|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Mod0|auto_generated|divider|divider|op_7~5_sumout\))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_7~1_sumout\ & (\Result[3]~reg0_q\)) ) + ( GND ) + ( \convert_binary|Mod0|auto_generated|divider|divider|op_8~6\ ))
-- \convert_binary|Mod0|auto_generated|divider|divider|op_8~10\ = CARRY(( (!\convert_binary|Mod0|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Mod0|auto_generated|divider|divider|op_7~5_sumout\))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_7~1_sumout\ & (\Result[3]~reg0_q\)) ) + ( GND ) + ( \convert_binary|Mod0|auto_generated|divider|divider|op_8~6\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000001000111011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_Result[3]~reg0_q\,
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datad => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_7~5_sumout\,
	cin => \convert_binary|Mod0|auto_generated|divider|divider|op_8~6\,
	sumout => \convert_binary|Mod0|auto_generated|divider|divider|op_8~9_sumout\,
	cout => \convert_binary|Mod0|auto_generated|divider|divider|op_8~10\);

\convert_binary|Mod0|auto_generated|divider|divider|op_8~37\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|op_8~37_sumout\ = SUM(( (!\convert_binary|Mod0|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Mod0|auto_generated|divider|divider|op_7~33_sumout\))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_7~1_sumout\ & (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[50]~45_combout\)) ) + ( VCC ) + ( \convert_binary|Mod0|auto_generated|divider|divider|op_8~10\ ))
-- \convert_binary|Mod0|auto_generated|divider|divider|op_8~38\ = CARRY(( (!\convert_binary|Mod0|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Mod0|auto_generated|divider|divider|op_7~33_sumout\))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_7~1_sumout\ & (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[50]~45_combout\)) ) + ( VCC ) + ( \convert_binary|Mod0|auto_generated|divider|divider|op_8~10\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000001111001111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datac => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[50]~45_combout\,
	datad => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_7~33_sumout\,
	cin => \convert_binary|Mod0|auto_generated|divider|divider|op_8~10\,
	sumout => \convert_binary|Mod0|auto_generated|divider|divider|op_8~37_sumout\,
	cout => \convert_binary|Mod0|auto_generated|divider|divider|op_8~38\);

\convert_binary|Mod0|auto_generated|divider|divider|op_8~33\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|op_8~33_sumout\ = SUM(( (!\convert_binary|Mod0|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Mod0|auto_generated|divider|divider|op_7~29_sumout\))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_7~1_sumout\ & (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[51]~41_combout\)) ) + ( GND ) + ( \convert_binary|Mod0|auto_generated|divider|divider|op_8~38\ ))
-- \convert_binary|Mod0|auto_generated|divider|divider|op_8~34\ = CARRY(( (!\convert_binary|Mod0|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Mod0|auto_generated|divider|divider|op_7~29_sumout\))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_7~1_sumout\ & (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[51]~41_combout\)) ) + ( GND ) + ( \convert_binary|Mod0|auto_generated|divider|divider|op_8~38\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datac => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[51]~41_combout\,
	datad => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_7~29_sumout\,
	cin => \convert_binary|Mod0|auto_generated|divider|divider|op_8~38\,
	sumout => \convert_binary|Mod0|auto_generated|divider|divider|op_8~33_sumout\,
	cout => \convert_binary|Mod0|auto_generated|divider|divider|op_8~34\);

\convert_binary|Mod0|auto_generated|divider|divider|op_8~29\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|op_8~29_sumout\ = SUM(( (!\convert_binary|Mod0|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod0|auto_generated|divider|divider|op_7~25_sumout\)))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod0|auto_generated|divider|divider|StageOut[52]~36_combout\)) # (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[52]~33_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod0|auto_generated|divider|divider|op_8~34\ ))
-- \convert_binary|Mod0|auto_generated|divider|divider|op_8~30\ = CARRY(( (!\convert_binary|Mod0|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod0|auto_generated|divider|divider|op_7~25_sumout\)))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod0|auto_generated|divider|divider|StageOut[52]~36_combout\)) # (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[52]~33_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod0|auto_generated|divider|divider|op_8~34\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[52]~33_combout\,
	datac => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_7~25_sumout\,
	datad => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[52]~36_combout\,
	cin => \convert_binary|Mod0|auto_generated|divider|divider|op_8~34\,
	sumout => \convert_binary|Mod0|auto_generated|divider|divider|op_8~29_sumout\,
	cout => \convert_binary|Mod0|auto_generated|divider|divider|op_8~30\);

\convert_binary|Mod0|auto_generated|divider|divider|op_8~25\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|op_8~25_sumout\ = SUM(( (!\convert_binary|Mod0|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Mod0|auto_generated|divider|divider|op_7~21_sumout\))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_7~1_sumout\ & (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[53]~27_combout\)) ) + ( VCC ) + ( \convert_binary|Mod0|auto_generated|divider|divider|op_8~30\ ))
-- \convert_binary|Mod0|auto_generated|divider|divider|op_8~26\ = CARRY(( (!\convert_binary|Mod0|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Mod0|auto_generated|divider|divider|op_7~21_sumout\))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_7~1_sumout\ & (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[53]~27_combout\)) ) + ( VCC ) + ( \convert_binary|Mod0|auto_generated|divider|divider|op_8~30\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datac => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[53]~27_combout\,
	datad => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_7~21_sumout\,
	cin => \convert_binary|Mod0|auto_generated|divider|divider|op_8~30\,
	sumout => \convert_binary|Mod0|auto_generated|divider|divider|op_8~25_sumout\,
	cout => \convert_binary|Mod0|auto_generated|divider|divider|op_8~26\);

\convert_binary|Mod0|auto_generated|divider|divider|op_8~21\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|op_8~21_sumout\ = SUM(( (!\convert_binary|Mod0|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod0|auto_generated|divider|divider|op_7~17_sumout\)))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod0|auto_generated|divider|divider|StageOut[54]~20_combout\)) # (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[54]~16_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod0|auto_generated|divider|divider|op_8~26\ ))
-- \convert_binary|Mod0|auto_generated|divider|divider|op_8~22\ = CARRY(( (!\convert_binary|Mod0|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod0|auto_generated|divider|divider|op_7~17_sumout\)))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod0|auto_generated|divider|divider|StageOut[54]~20_combout\)) # (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[54]~16_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod0|auto_generated|divider|divider|op_8~26\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[54]~16_combout\,
	datac => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_7~17_sumout\,
	datad => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[54]~20_combout\,
	cin => \convert_binary|Mod0|auto_generated|divider|divider|op_8~26\,
	sumout => \convert_binary|Mod0|auto_generated|divider|divider|op_8~21_sumout\,
	cout => \convert_binary|Mod0|auto_generated|divider|divider|op_8~22\);

\convert_binary|Mod0|auto_generated|divider|divider|op_8~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|op_8~13_sumout\ = SUM(( (!\convert_binary|Mod0|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod0|auto_generated|divider|divider|op_7~9_sumout\)))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod0|auto_generated|divider|divider|StageOut[55]~12_combout\)) # (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[55]~7_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod0|auto_generated|divider|divider|op_8~22\ ))
-- \convert_binary|Mod0|auto_generated|divider|divider|op_8~14\ = CARRY(( (!\convert_binary|Mod0|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod0|auto_generated|divider|divider|op_7~9_sumout\)))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod0|auto_generated|divider|divider|StageOut[55]~12_combout\)) # (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[55]~7_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod0|auto_generated|divider|divider|op_8~22\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[55]~7_combout\,
	datac => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_7~9_sumout\,
	datad => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[55]~12_combout\,
	cin => \convert_binary|Mod0|auto_generated|divider|divider|op_8~22\,
	sumout => \convert_binary|Mod0|auto_generated|divider|divider|op_8~13_sumout\,
	cout => \convert_binary|Mod0|auto_generated|divider|divider|op_8~14\);

\convert_binary|Mod0|auto_generated|divider|divider|op_8~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|op_8~1_sumout\ = SUM(( VCC ) + ( GND ) + ( \convert_binary|Mod0|auto_generated|divider|divider|op_8~14\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Mod0|auto_generated|divider|divider|op_8~14\,
	sumout => \convert_binary|Mod0|auto_generated|divider|divider|op_8~1_sumout\);

\convert_binary|Mod0|auto_generated|divider|divider|StageOut[66]~6\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|StageOut[66]~6_combout\ = (!\convert_binary|Mod0|auto_generated|divider|divider|op_7~1_sumout\ & \convert_binary|Mod0|auto_generated|divider|divider|op_7~9_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_7~9_sumout\,
	combout => \convert_binary|Mod0|auto_generated|divider|divider|StageOut[66]~6_combout\);

\convert_binary|Mod0|auto_generated|divider|divider|StageOut[66]~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|StageOut[66]~13_combout\ = (\convert_binary|Mod0|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Mod0|auto_generated|divider|divider|StageOut[55]~12_combout\) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[55]~7_combout\)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001010100010101000101010001010100010101000101010001010100010101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[55]~7_combout\,
	datac => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[55]~12_combout\,
	combout => \convert_binary|Mod0|auto_generated|divider|divider|StageOut[66]~13_combout\);

\convert_binary|Mod0|auto_generated|divider|divider|StageOut[65]~21\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|StageOut[65]~21_combout\ = (!\convert_binary|Mod0|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod0|auto_generated|divider|divider|op_7~17_sumout\)))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod0|auto_generated|divider|divider|StageOut[54]~20_combout\)) # (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[54]~16_combout\)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001101101011111000110110101111100011011010111110001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[54]~16_combout\,
	datac => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_7~17_sumout\,
	datad => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[54]~20_combout\,
	combout => \convert_binary|Mod0|auto_generated|divider|divider|StageOut[65]~21_combout\);

\convert_binary|Mod0|auto_generated|divider|divider|StageOut[64]~23\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|StageOut[64]~23_combout\ = (!\convert_binary|Mod0|auto_generated|divider|divider|op_7~1_sumout\ & \convert_binary|Mod0|auto_generated|divider|divider|op_7~21_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_7~21_sumout\,
	combout => \convert_binary|Mod0|auto_generated|divider|divider|StageOut[64]~23_combout\);

\convert_binary|Mod0|auto_generated|divider|divider|StageOut[64]~28\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|StageOut[64]~28_combout\ = (\convert_binary|Mod0|auto_generated|divider|divider|op_7~1_sumout\ & \convert_binary|Mod0|auto_generated|divider|divider|StageOut[53]~27_combout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[53]~27_combout\,
	combout => \convert_binary|Mod0|auto_generated|divider|divider|StageOut[64]~28_combout\);

\convert_binary|Mod0|auto_generated|divider|divider|StageOut[63]~37\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|StageOut[63]~37_combout\ = (!\convert_binary|Mod0|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod0|auto_generated|divider|divider|op_7~25_sumout\)))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod0|auto_generated|divider|divider|StageOut[52]~36_combout\)) # (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[52]~33_combout\)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001101101011111000110110101111100011011010111110001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[52]~33_combout\,
	datac => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_7~25_sumout\,
	datad => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[52]~36_combout\,
	combout => \convert_binary|Mod0|auto_generated|divider|divider|StageOut[63]~37_combout\);

\convert_binary|Mod0|auto_generated|divider|divider|StageOut[62]~39\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|StageOut[62]~39_combout\ = (!\convert_binary|Mod0|auto_generated|divider|divider|op_7~1_sumout\ & \convert_binary|Mod0|auto_generated|divider|divider|op_7~29_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_7~29_sumout\,
	combout => \convert_binary|Mod0|auto_generated|divider|divider|StageOut[62]~39_combout\);

\convert_binary|Mod0|auto_generated|divider|divider|StageOut[62]~42\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|StageOut[62]~42_combout\ = (\convert_binary|Mod0|auto_generated|divider|divider|op_7~1_sumout\ & \convert_binary|Mod0|auto_generated|divider|divider|StageOut[51]~41_combout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[51]~41_combout\,
	combout => \convert_binary|Mod0|auto_generated|divider|divider|StageOut[62]~42_combout\);

\convert_binary|Mod0|auto_generated|divider|divider|StageOut[61]~46\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|StageOut[61]~46_combout\ = (!\convert_binary|Mod0|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Mod0|auto_generated|divider|divider|op_7~33_sumout\))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_7~1_sumout\ & (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[50]~45_combout\))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001101100011011000110110001101100011011000110110001101100011011",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[50]~45_combout\,
	datac => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_7~33_sumout\,
	combout => \convert_binary|Mod0|auto_generated|divider|divider|StageOut[61]~46_combout\);

\convert_binary|Mod0|auto_generated|divider|divider|StageOut[60]~3\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|StageOut[60]~3_combout\ = (!\convert_binary|Mod0|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Mod0|auto_generated|divider|divider|op_7~5_sumout\))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_7~1_sumout\ & (\Result[3]~reg0_q\))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001110100011101000111010001110100011101000111010001110100011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_Result[3]~reg0_q\,
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datac => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_7~5_sumout\,
	combout => \convert_binary|Mod0|auto_generated|divider|divider|StageOut[60]~3_combout\);

\convert_binary|Mod0|auto_generated|divider|divider|op_9~22\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|op_9~22_cout\ = CARRY(( VCC ) + ( VCC ) + ( !VCC ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => GND,
	cout => \convert_binary|Mod0|auto_generated|divider|divider|op_9~22_cout\);

\convert_binary|Mod0|auto_generated|divider|divider|op_9~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|op_9~5_sumout\ = SUM(( \Result[1]~reg0_q\ ) + ( VCC ) + ( \convert_binary|Mod0|auto_generated|divider|divider|op_9~22_cout\ ))
-- \convert_binary|Mod0|auto_generated|divider|divider|op_9~6\ = CARRY(( \Result[1]~reg0_q\ ) + ( VCC ) + ( \convert_binary|Mod0|auto_generated|divider|divider|op_9~22_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \ALT_INV_Result[1]~reg0_q\,
	cin => \convert_binary|Mod0|auto_generated|divider|divider|op_9~22_cout\,
	sumout => \convert_binary|Mod0|auto_generated|divider|divider|op_9~5_sumout\,
	cout => \convert_binary|Mod0|auto_generated|divider|divider|op_9~6\);

\convert_binary|Mod0|auto_generated|divider|divider|op_9~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|op_9~9_sumout\ = SUM(( (!\convert_binary|Mod0|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod0|auto_generated|divider|divider|op_8~5_sumout\))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_8~1_sumout\ & (\Result[2]~reg0_q\)) ) + ( GND ) + ( \convert_binary|Mod0|auto_generated|divider|divider|op_9~6\ ))
-- \convert_binary|Mod0|auto_generated|divider|divider|op_9~10\ = CARRY(( (!\convert_binary|Mod0|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod0|auto_generated|divider|divider|op_8~5_sumout\))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_8~1_sumout\ & (\Result[2]~reg0_q\)) ) + ( GND ) + ( \convert_binary|Mod0|auto_generated|divider|divider|op_9~6\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000001000111011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_Result[2]~reg0_q\,
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datad => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_8~5_sumout\,
	cin => \convert_binary|Mod0|auto_generated|divider|divider|op_9~6\,
	sumout => \convert_binary|Mod0|auto_generated|divider|divider|op_9~9_sumout\,
	cout => \convert_binary|Mod0|auto_generated|divider|divider|op_9~10\);

\convert_binary|Mod0|auto_generated|divider|divider|op_9~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|op_9~13_sumout\ = SUM(( (!\convert_binary|Mod0|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod0|auto_generated|divider|divider|op_8~9_sumout\))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[60]~3_combout\)) ) + ( VCC ) + ( \convert_binary|Mod0|auto_generated|divider|divider|op_9~10\ ))
-- \convert_binary|Mod0|auto_generated|divider|divider|op_9~14\ = CARRY(( (!\convert_binary|Mod0|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod0|auto_generated|divider|divider|op_8~9_sumout\))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[60]~3_combout\)) ) + ( VCC ) + ( \convert_binary|Mod0|auto_generated|divider|divider|op_9~10\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000001111001111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datac => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[60]~3_combout\,
	datad => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_8~9_sumout\,
	cin => \convert_binary|Mod0|auto_generated|divider|divider|op_9~10\,
	sumout => \convert_binary|Mod0|auto_generated|divider|divider|op_9~13_sumout\,
	cout => \convert_binary|Mod0|auto_generated|divider|divider|op_9~14\);

\convert_binary|Mod0|auto_generated|divider|divider|op_9~41\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|op_9~41_sumout\ = SUM(( (!\convert_binary|Mod0|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod0|auto_generated|divider|divider|op_8~37_sumout\))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[61]~46_combout\)) ) + ( GND ) + ( \convert_binary|Mod0|auto_generated|divider|divider|op_9~14\ ))
-- \convert_binary|Mod0|auto_generated|divider|divider|op_9~42\ = CARRY(( (!\convert_binary|Mod0|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod0|auto_generated|divider|divider|op_8~37_sumout\))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[61]~46_combout\)) ) + ( GND ) + ( \convert_binary|Mod0|auto_generated|divider|divider|op_9~14\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datac => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[61]~46_combout\,
	datad => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_8~37_sumout\,
	cin => \convert_binary|Mod0|auto_generated|divider|divider|op_9~14\,
	sumout => \convert_binary|Mod0|auto_generated|divider|divider|op_9~41_sumout\,
	cout => \convert_binary|Mod0|auto_generated|divider|divider|op_9~42\);

\convert_binary|Mod0|auto_generated|divider|divider|op_9~37\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|op_9~37_sumout\ = SUM(( (!\convert_binary|Mod0|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod0|auto_generated|divider|divider|op_8~33_sumout\)))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod0|auto_generated|divider|divider|StageOut[62]~42_combout\)) # (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[62]~39_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod0|auto_generated|divider|divider|op_9~42\ ))
-- \convert_binary|Mod0|auto_generated|divider|divider|op_9~38\ = CARRY(( (!\convert_binary|Mod0|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod0|auto_generated|divider|divider|op_8~33_sumout\)))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod0|auto_generated|divider|divider|StageOut[62]~42_combout\)) # (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[62]~39_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod0|auto_generated|divider|divider|op_9~42\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[62]~39_combout\,
	datac => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_8~33_sumout\,
	datad => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[62]~42_combout\,
	cin => \convert_binary|Mod0|auto_generated|divider|divider|op_9~42\,
	sumout => \convert_binary|Mod0|auto_generated|divider|divider|op_9~37_sumout\,
	cout => \convert_binary|Mod0|auto_generated|divider|divider|op_9~38\);

\convert_binary|Mod0|auto_generated|divider|divider|op_9~33\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|op_9~33_sumout\ = SUM(( (!\convert_binary|Mod0|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod0|auto_generated|divider|divider|op_8~29_sumout\))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[63]~37_combout\)) ) + ( VCC ) + ( \convert_binary|Mod0|auto_generated|divider|divider|op_9~38\ ))
-- \convert_binary|Mod0|auto_generated|divider|divider|op_9~34\ = CARRY(( (!\convert_binary|Mod0|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod0|auto_generated|divider|divider|op_8~29_sumout\))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[63]~37_combout\)) ) + ( VCC ) + ( \convert_binary|Mod0|auto_generated|divider|divider|op_9~38\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datac => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[63]~37_combout\,
	datad => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_8~29_sumout\,
	cin => \convert_binary|Mod0|auto_generated|divider|divider|op_9~38\,
	sumout => \convert_binary|Mod0|auto_generated|divider|divider|op_9~33_sumout\,
	cout => \convert_binary|Mod0|auto_generated|divider|divider|op_9~34\);

\convert_binary|Mod0|auto_generated|divider|divider|op_9~29\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|op_9~29_sumout\ = SUM(( (!\convert_binary|Mod0|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod0|auto_generated|divider|divider|op_8~25_sumout\)))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod0|auto_generated|divider|divider|StageOut[64]~28_combout\)) # (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[64]~23_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod0|auto_generated|divider|divider|op_9~34\ ))
-- \convert_binary|Mod0|auto_generated|divider|divider|op_9~30\ = CARRY(( (!\convert_binary|Mod0|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod0|auto_generated|divider|divider|op_8~25_sumout\)))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod0|auto_generated|divider|divider|StageOut[64]~28_combout\)) # (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[64]~23_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod0|auto_generated|divider|divider|op_9~34\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[64]~23_combout\,
	datac => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_8~25_sumout\,
	datad => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[64]~28_combout\,
	cin => \convert_binary|Mod0|auto_generated|divider|divider|op_9~34\,
	sumout => \convert_binary|Mod0|auto_generated|divider|divider|op_9~29_sumout\,
	cout => \convert_binary|Mod0|auto_generated|divider|divider|op_9~30\);

\convert_binary|Mod0|auto_generated|divider|divider|op_9~25\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|op_9~25_sumout\ = SUM(( (!\convert_binary|Mod0|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod0|auto_generated|divider|divider|op_8~21_sumout\))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[65]~21_combout\)) ) + ( VCC ) + ( \convert_binary|Mod0|auto_generated|divider|divider|op_9~30\ ))
-- \convert_binary|Mod0|auto_generated|divider|divider|op_9~26\ = CARRY(( (!\convert_binary|Mod0|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod0|auto_generated|divider|divider|op_8~21_sumout\))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[65]~21_combout\)) ) + ( VCC ) + ( \convert_binary|Mod0|auto_generated|divider|divider|op_9~30\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datac => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[65]~21_combout\,
	datad => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_8~21_sumout\,
	cin => \convert_binary|Mod0|auto_generated|divider|divider|op_9~30\,
	sumout => \convert_binary|Mod0|auto_generated|divider|divider|op_9~25_sumout\,
	cout => \convert_binary|Mod0|auto_generated|divider|divider|op_9~26\);

\convert_binary|Mod0|auto_generated|divider|divider|op_9~17\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|op_9~17_sumout\ = SUM(( (!\convert_binary|Mod0|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod0|auto_generated|divider|divider|op_8~13_sumout\)))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod0|auto_generated|divider|divider|StageOut[66]~13_combout\)) # (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[66]~6_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod0|auto_generated|divider|divider|op_9~26\ ))
-- \convert_binary|Mod0|auto_generated|divider|divider|op_9~18\ = CARRY(( (!\convert_binary|Mod0|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod0|auto_generated|divider|divider|op_8~13_sumout\)))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod0|auto_generated|divider|divider|StageOut[66]~13_combout\)) # (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[66]~6_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod0|auto_generated|divider|divider|op_9~26\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[66]~6_combout\,
	datac => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_8~13_sumout\,
	datad => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[66]~13_combout\,
	cin => \convert_binary|Mod0|auto_generated|divider|divider|op_9~26\,
	sumout => \convert_binary|Mod0|auto_generated|divider|divider|op_9~17_sumout\,
	cout => \convert_binary|Mod0|auto_generated|divider|divider|op_9~18\);

\convert_binary|Mod0|auto_generated|divider|divider|op_9~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|op_9~1_sumout\ = SUM(( VCC ) + ( GND ) + ( \convert_binary|Mod0|auto_generated|divider|divider|op_9~18\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Mod0|auto_generated|divider|divider|op_9~18\,
	sumout => \convert_binary|Mod0|auto_generated|divider|divider|op_9~1_sumout\);

\convert_binary|Mod0|auto_generated|divider|divider|StageOut[77]~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|StageOut[77]~5_combout\ = (!\convert_binary|Mod0|auto_generated|divider|divider|op_8~1_sumout\ & \convert_binary|Mod0|auto_generated|divider|divider|op_8~13_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_8~13_sumout\,
	combout => \convert_binary|Mod0|auto_generated|divider|divider|StageOut[77]~5_combout\);

\convert_binary|Mod0|auto_generated|divider|divider|StageOut[77]~14\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|StageOut[77]~14_combout\ = (\convert_binary|Mod0|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod0|auto_generated|divider|divider|StageOut[66]~13_combout\) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[66]~6_combout\)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001010100010101000101010001010100010101000101010001010100010101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[66]~6_combout\,
	datac => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[66]~13_combout\,
	combout => \convert_binary|Mod0|auto_generated|divider|divider|StageOut[77]~14_combout\);

\convert_binary|Mod0|auto_generated|divider|divider|StageOut[76]~15\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|StageOut[76]~15_combout\ = (!\convert_binary|Mod0|auto_generated|divider|divider|op_8~1_sumout\ & \convert_binary|Mod0|auto_generated|divider|divider|op_8~21_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_8~21_sumout\,
	combout => \convert_binary|Mod0|auto_generated|divider|divider|StageOut[76]~15_combout\);

\convert_binary|Mod0|auto_generated|divider|divider|StageOut[76]~22\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|StageOut[76]~22_combout\ = (\convert_binary|Mod0|auto_generated|divider|divider|op_8~1_sumout\ & \convert_binary|Mod0|auto_generated|divider|divider|StageOut[65]~21_combout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[65]~21_combout\,
	combout => \convert_binary|Mod0|auto_generated|divider|divider|StageOut[76]~22_combout\);

\convert_binary|Mod0|auto_generated|divider|divider|StageOut[75]~29\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|StageOut[75]~29_combout\ = (!\convert_binary|Mod0|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod0|auto_generated|divider|divider|op_8~25_sumout\)))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod0|auto_generated|divider|divider|StageOut[64]~28_combout\)) # (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[64]~23_combout\)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001101101011111000110110101111100011011010111110001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[64]~23_combout\,
	datac => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_8~25_sumout\,
	datad => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[64]~28_combout\,
	combout => \convert_binary|Mod0|auto_generated|divider|divider|StageOut[75]~29_combout\);

\convert_binary|Mod0|auto_generated|divider|divider|StageOut[74]~32\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|StageOut[74]~32_combout\ = (!\convert_binary|Mod0|auto_generated|divider|divider|op_8~1_sumout\ & \convert_binary|Mod0|auto_generated|divider|divider|op_8~29_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_8~29_sumout\,
	combout => \convert_binary|Mod0|auto_generated|divider|divider|StageOut[74]~32_combout\);

\convert_binary|Mod0|auto_generated|divider|divider|StageOut[74]~38\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|StageOut[74]~38_combout\ = (\convert_binary|Mod0|auto_generated|divider|divider|op_8~1_sumout\ & \convert_binary|Mod0|auto_generated|divider|divider|StageOut[63]~37_combout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[63]~37_combout\,
	combout => \convert_binary|Mod0|auto_generated|divider|divider|StageOut[74]~38_combout\);

\convert_binary|Mod0|auto_generated|divider|divider|StageOut[73]~43\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|StageOut[73]~43_combout\ = (!\convert_binary|Mod0|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod0|auto_generated|divider|divider|op_8~33_sumout\)))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod0|auto_generated|divider|divider|StageOut[62]~42_combout\)) # (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[62]~39_combout\)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001101101011111000110110101111100011011010111110001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[62]~39_combout\,
	datac => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_8~33_sumout\,
	datad => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[62]~42_combout\,
	combout => \convert_binary|Mod0|auto_generated|divider|divider|StageOut[73]~43_combout\);

\convert_binary|Mod0|auto_generated|divider|divider|StageOut[72]~44\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|StageOut[72]~44_combout\ = (!\convert_binary|Mod0|auto_generated|divider|divider|op_8~1_sumout\ & \convert_binary|Mod0|auto_generated|divider|divider|op_8~37_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_8~37_sumout\,
	combout => \convert_binary|Mod0|auto_generated|divider|divider|StageOut[72]~44_combout\);

\convert_binary|Mod0|auto_generated|divider|divider|StageOut[72]~47\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|StageOut[72]~47_combout\ = (\convert_binary|Mod0|auto_generated|divider|divider|op_8~1_sumout\ & \convert_binary|Mod0|auto_generated|divider|divider|StageOut[61]~46_combout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[61]~46_combout\,
	combout => \convert_binary|Mod0|auto_generated|divider|divider|StageOut[72]~47_combout\);

\convert_binary|Mod0|auto_generated|divider|divider|StageOut[71]~4\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|StageOut[71]~4_combout\ = (!\convert_binary|Mod0|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod0|auto_generated|divider|divider|op_8~9_sumout\))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[60]~3_combout\))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001101100011011000110110001101100011011000110110001101100011011",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[60]~3_combout\,
	datac => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_8~9_sumout\,
	combout => \convert_binary|Mod0|auto_generated|divider|divider|StageOut[71]~4_combout\);

\convert_binary|Mod0|auto_generated|divider|divider|StageOut[70]~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|StageOut[70]~1_combout\ = (!\convert_binary|Mod0|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod0|auto_generated|divider|divider|op_8~5_sumout\))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_8~1_sumout\ & (\Result[2]~reg0_q\))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001110100011101000111010001110100011101000111010001110100011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_Result[2]~reg0_q\,
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datac => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_8~5_sumout\,
	combout => \convert_binary|Mod0|auto_generated|divider|divider|StageOut[70]~1_combout\);

\convert_binary|Mod0|auto_generated|divider|divider|op_10~26\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|op_10~26_cout\ = CARRY(( VCC ) + ( VCC ) + ( !VCC ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => GND,
	cout => \convert_binary|Mod0|auto_generated|divider|divider|op_10~26_cout\);

\convert_binary|Mod0|auto_generated|divider|divider|op_10~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|op_10~5_sumout\ = SUM(( \Result[0]~reg0_q\ ) + ( VCC ) + ( \convert_binary|Mod0|auto_generated|divider|divider|op_10~26_cout\ ))
-- \convert_binary|Mod0|auto_generated|divider|divider|op_10~6\ = CARRY(( \Result[0]~reg0_q\ ) + ( VCC ) + ( \convert_binary|Mod0|auto_generated|divider|divider|op_10~26_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \ALT_INV_Result[0]~reg0_q\,
	cin => \convert_binary|Mod0|auto_generated|divider|divider|op_10~26_cout\,
	sumout => \convert_binary|Mod0|auto_generated|divider|divider|op_10~5_sumout\,
	cout => \convert_binary|Mod0|auto_generated|divider|divider|op_10~6\);

\convert_binary|Mod0|auto_generated|divider|divider|op_10~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|op_10~9_sumout\ = SUM(( (!\convert_binary|Mod0|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Mod0|auto_generated|divider|divider|op_9~5_sumout\))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_9~1_sumout\ & (\Result[1]~reg0_q\)) ) + ( GND ) + ( \convert_binary|Mod0|auto_generated|divider|divider|op_10~6\ ))
-- \convert_binary|Mod0|auto_generated|divider|divider|op_10~10\ = CARRY(( (!\convert_binary|Mod0|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Mod0|auto_generated|divider|divider|op_9~5_sumout\))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_9~1_sumout\ & (\Result[1]~reg0_q\)) ) + ( GND ) + ( \convert_binary|Mod0|auto_generated|divider|divider|op_10~6\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000001000111011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_Result[1]~reg0_q\,
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datad => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_9~5_sumout\,
	cin => \convert_binary|Mod0|auto_generated|divider|divider|op_10~6\,
	sumout => \convert_binary|Mod0|auto_generated|divider|divider|op_10~9_sumout\,
	cout => \convert_binary|Mod0|auto_generated|divider|divider|op_10~10\);

\convert_binary|Mod0|auto_generated|divider|divider|op_10~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|op_10~13_sumout\ = SUM(( (!\convert_binary|Mod0|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Mod0|auto_generated|divider|divider|op_9~9_sumout\))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_9~1_sumout\ & (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[70]~1_combout\)) ) + ( VCC ) + ( \convert_binary|Mod0|auto_generated|divider|divider|op_10~10\ ))
-- \convert_binary|Mod0|auto_generated|divider|divider|op_10~14\ = CARRY(( (!\convert_binary|Mod0|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Mod0|auto_generated|divider|divider|op_9~9_sumout\))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_9~1_sumout\ & (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[70]~1_combout\)) ) + ( VCC ) + ( \convert_binary|Mod0|auto_generated|divider|divider|op_10~10\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000001111001111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datac => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[70]~1_combout\,
	datad => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_9~9_sumout\,
	cin => \convert_binary|Mod0|auto_generated|divider|divider|op_10~10\,
	sumout => \convert_binary|Mod0|auto_generated|divider|divider|op_10~13_sumout\,
	cout => \convert_binary|Mod0|auto_generated|divider|divider|op_10~14\);

\convert_binary|Mod0|auto_generated|divider|divider|op_10~17\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|op_10~17_sumout\ = SUM(( (!\convert_binary|Mod0|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Mod0|auto_generated|divider|divider|op_9~13_sumout\))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_9~1_sumout\ & (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[71]~4_combout\)) ) + ( GND ) + ( \convert_binary|Mod0|auto_generated|divider|divider|op_10~14\ ))
-- \convert_binary|Mod0|auto_generated|divider|divider|op_10~18\ = CARRY(( (!\convert_binary|Mod0|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Mod0|auto_generated|divider|divider|op_9~13_sumout\))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_9~1_sumout\ & (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[71]~4_combout\)) ) + ( GND ) + ( \convert_binary|Mod0|auto_generated|divider|divider|op_10~14\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datac => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[71]~4_combout\,
	datad => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_9~13_sumout\,
	cin => \convert_binary|Mod0|auto_generated|divider|divider|op_10~14\,
	sumout => \convert_binary|Mod0|auto_generated|divider|divider|op_10~17_sumout\,
	cout => \convert_binary|Mod0|auto_generated|divider|divider|op_10~18\);

\convert_binary|Mod0|auto_generated|divider|divider|op_10~46\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|op_10~46_cout\ = CARRY(( (!\convert_binary|Mod0|auto_generated|divider|divider|op_9~1_sumout\ & (((\convert_binary|Mod0|auto_generated|divider|divider|op_9~41_sumout\)))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_9~1_sumout\ & (((\convert_binary|Mod0|auto_generated|divider|divider|StageOut[72]~47_combout\)) # (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[72]~44_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod0|auto_generated|divider|divider|op_10~18\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[72]~44_combout\,
	datac => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_9~41_sumout\,
	datad => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[72]~47_combout\,
	cin => \convert_binary|Mod0|auto_generated|divider|divider|op_10~18\,
	cout => \convert_binary|Mod0|auto_generated|divider|divider|op_10~46_cout\);

\convert_binary|Mod0|auto_generated|divider|divider|op_10~42\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|op_10~42_cout\ = CARRY(( (!\convert_binary|Mod0|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Mod0|auto_generated|divider|divider|op_9~37_sumout\))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_9~1_sumout\ & (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[73]~43_combout\)) ) + ( VCC ) + ( \convert_binary|Mod0|auto_generated|divider|divider|op_10~46_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datac => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[73]~43_combout\,
	datad => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_9~37_sumout\,
	cin => \convert_binary|Mod0|auto_generated|divider|divider|op_10~46_cout\,
	cout => \convert_binary|Mod0|auto_generated|divider|divider|op_10~42_cout\);

\convert_binary|Mod0|auto_generated|divider|divider|op_10~38\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|op_10~38_cout\ = CARRY(( (!\convert_binary|Mod0|auto_generated|divider|divider|op_9~1_sumout\ & (((\convert_binary|Mod0|auto_generated|divider|divider|op_9~33_sumout\)))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_9~1_sumout\ & (((\convert_binary|Mod0|auto_generated|divider|divider|StageOut[74]~38_combout\)) # (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[74]~32_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod0|auto_generated|divider|divider|op_10~42_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[74]~32_combout\,
	datac => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_9~33_sumout\,
	datad => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[74]~38_combout\,
	cin => \convert_binary|Mod0|auto_generated|divider|divider|op_10~42_cout\,
	cout => \convert_binary|Mod0|auto_generated|divider|divider|op_10~38_cout\);

\convert_binary|Mod0|auto_generated|divider|divider|op_10~34\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|op_10~34_cout\ = CARRY(( (!\convert_binary|Mod0|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Mod0|auto_generated|divider|divider|op_9~29_sumout\))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_9~1_sumout\ & (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[75]~29_combout\)) ) + ( VCC ) + ( \convert_binary|Mod0|auto_generated|divider|divider|op_10~38_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datac => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[75]~29_combout\,
	datad => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_9~29_sumout\,
	cin => \convert_binary|Mod0|auto_generated|divider|divider|op_10~38_cout\,
	cout => \convert_binary|Mod0|auto_generated|divider|divider|op_10~34_cout\);

\convert_binary|Mod0|auto_generated|divider|divider|op_10~30\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|op_10~30_cout\ = CARRY(( (!\convert_binary|Mod0|auto_generated|divider|divider|op_9~1_sumout\ & (((\convert_binary|Mod0|auto_generated|divider|divider|op_9~25_sumout\)))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_9~1_sumout\ & (((\convert_binary|Mod0|auto_generated|divider|divider|StageOut[76]~22_combout\)) # (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[76]~15_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod0|auto_generated|divider|divider|op_10~34_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[76]~15_combout\,
	datac => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_9~25_sumout\,
	datad => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[76]~22_combout\,
	cin => \convert_binary|Mod0|auto_generated|divider|divider|op_10~34_cout\,
	cout => \convert_binary|Mod0|auto_generated|divider|divider|op_10~30_cout\);

\convert_binary|Mod0|auto_generated|divider|divider|op_10~22\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|op_10~22_cout\ = CARRY(( (!\convert_binary|Mod0|auto_generated|divider|divider|op_9~1_sumout\ & (((\convert_binary|Mod0|auto_generated|divider|divider|op_9~17_sumout\)))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_9~1_sumout\ & (((\convert_binary|Mod0|auto_generated|divider|divider|StageOut[77]~14_combout\)) # (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[77]~5_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod0|auto_generated|divider|divider|op_10~30_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[77]~5_combout\,
	datac => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_9~17_sumout\,
	datad => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[77]~14_combout\,
	cin => \convert_binary|Mod0|auto_generated|divider|divider|op_10~30_cout\,
	cout => \convert_binary|Mod0|auto_generated|divider|divider|op_10~22_cout\);

\convert_binary|Mod0|auto_generated|divider|divider|op_10~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|op_10~1_sumout\ = SUM(( VCC ) + ( GND ) + ( \convert_binary|Mod0|auto_generated|divider|divider|op_10~22_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Mod0|auto_generated|divider|divider|op_10~22_cout\,
	sumout => \convert_binary|Mod0|auto_generated|divider|divider|op_10~1_sumout\);

\convert_binary|Mod0|auto_generated|divider|divider|StageOut[90]~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|StageOut[90]~0_combout\ = (!\convert_binary|Mod0|auto_generated|divider|divider|op_10~1_sumout\ & ((\convert_binary|Mod0|auto_generated|divider|divider|op_10~5_sumout\))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_10~1_sumout\ & (\Result[0]~reg0_q\))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001110100011101000111010001110100011101000111010001110100011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_Result[0]~reg0_q\,
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_10~1_sumout\,
	datac => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_10~5_sumout\,
	combout => \convert_binary|Mod0|auto_generated|divider|divider|StageOut[90]~0_combout\);

\COUT~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \COUT~0_combout\ = ( \addandsub_function|eq_compar:4:sum|C_out~combout\ & ( ((\state~q\ & (\Operation[1]~input_o\ & \RST_main~input_o\))) # (\COUT~reg0_q\) ) ) # ( !\addandsub_function|eq_compar:4:sum|C_out~combout\ & ( (\COUT~reg0_q\ & ((!\state~q\) # 
-- ((!\Operation[1]~input_o\) # (!\RST_main~input_o\)))) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0101010101010100010101010101011101010101010101000101010101010111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_COUT~reg0_q\,
	datab => \ALT_INV_state~q\,
	datac => \ALT_INV_Operation[1]~input_o\,
	datad => \ALT_INV_RST_main~input_o\,
	datae => \addandsub_function|eq_compar:4:sum|ALT_INV_C_out~combout\,
	combout => \COUT~0_combout\);

\COUT~reg0\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \COUT~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \COUT~reg0_q\);

\Op[1]~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \Op[1]~1_combout\ = (!\state~q\ & (\RST_main~input_o\ & !\START_main~input_o\))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010000000100000001000000010000000100000001000000010000000100000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_state~q\,
	datab => \ALT_INV_RST_main~input_o\,
	datac => \ALT_INV_START_main~input_o\,
	combout => \Op[1]~1_combout\);

\Op[1]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \Operation[1]~input_o\,
	ena => \Op[1]~1_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => Op(1));

\Op[0]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \Operation[0]~input_o\,
	ena => \Op[1]~1_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => Op(0));

\check_zero_divisor~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \check_zero_divisor~0_combout\ = (\state~q\ & (!\Operation[0]~input_o\ & !\Operation[1]~input_o\))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0100000001000000010000000100000001000000010000000100000001000000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_state~q\,
	datab => \ALT_INV_Operation[0]~input_o\,
	datac => \ALT_INV_Operation[1]~input_o\,
	combout => \check_zero_divisor~0_combout\);

\check_zero_divisor~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \check_zero_divisor~1_combout\ = (!\input_B[3]~input_o\ & (!\input_B[2]~input_o\ & (!\input_B[1]~input_o\ & !\input_B[0]~input_o\)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "1000000000000000100000000000000010000000000000001000000000000000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_input_B[3]~input_o\,
	datab => \ALT_INV_input_B[2]~input_o\,
	datac => \ALT_INV_input_B[1]~input_o\,
	datad => \ALT_INV_input_B[0]~input_o\,
	combout => \check_zero_divisor~1_combout\);

\check_zero_divisor~2\ : cyclonev_lcell_comb
-- Equation(s):
-- \check_zero_divisor~2_combout\ = ((!\input_B[4]~input_o\ & (\check_zero_divisor~0_combout\ & \check_zero_divisor~1_combout\))) # (\check_zero_divisor~q\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0011001100111011001100110011101100110011001110110011001100111011",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_input_B[4]~input_o\,
	datab => \ALT_INV_check_zero_divisor~q\,
	datac => \ALT_INV_check_zero_divisor~0_combout\,
	datad => \ALT_INV_check_zero_divisor~1_combout\,
	combout => \check_zero_divisor~2_combout\);

check_zero_divisor : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \check_zero_divisor~2_combout\,
	clrn => \RST_main~input_o\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \check_zero_divisor~q\);

\convert_binary|int_r_2[2]~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|int_r_2[2]~0_combout\ = (!Op(0) & ((!Op(1) & ((\check_zero_divisor~q\))) # (Op(1) & (!\COUT~reg0_q\))))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010000011100000001000001110000000100000111000000010000011100000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_COUT~reg0_q\,
	datab => ALT_INV_Op(1),
	datac => ALT_INV_Op(0),
	datad => \ALT_INV_check_zero_divisor~q\,
	combout => \convert_binary|int_r_2[2]~0_combout\);

\convert_binary|int_data_1[0]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \convert_binary|Mod0|auto_generated|divider|divider|StageOut[90]~0_combout\,
	clrn => \RST_main~input_o\,
	sclr => \convert_binary|int_r_2[2]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \convert_binary|int_data_1\(0));

\convert_binary|int_data_1~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|int_data_1~0_combout\ = ( \convert_binary|int_r_2[2]~0_combout\ & ( \convert_binary|Mod0|auto_generated|divider|divider|op_10~9_sumout\ ) ) # ( !\convert_binary|int_r_2[2]~0_combout\ & ( 
-- \convert_binary|Mod0|auto_generated|divider|divider|op_10~9_sumout\ & ( (!\convert_binary|Mod0|auto_generated|divider|divider|op_10~1_sumout\) # ((!\convert_binary|Mod0|auto_generated|divider|divider|op_9~1_sumout\ & 
-- ((\convert_binary|Mod0|auto_generated|divider|divider|op_9~5_sumout\))) # (\convert_binary|Mod0|auto_generated|divider|divider|op_9~1_sumout\ & (\Result[1]~reg0_q\))) ) ) ) # ( \convert_binary|int_r_2[2]~0_combout\ & ( 
-- !\convert_binary|Mod0|auto_generated|divider|divider|op_10~9_sumout\ ) ) # ( !\convert_binary|int_r_2[2]~0_combout\ & ( !\convert_binary|Mod0|auto_generated|divider|divider|op_10~9_sumout\ & ( 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_10~1_sumout\ & ((!\convert_binary|Mod0|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Mod0|auto_generated|divider|divider|op_9~5_sumout\))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_9~1_sumout\ & (\Result[1]~reg0_q\)))) ) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000011101111111111111111111111111000111011111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_Result[1]~reg0_q\,
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datac => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_9~5_sumout\,
	datad => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_10~1_sumout\,
	datae => \convert_binary|ALT_INV_int_r_2[2]~0_combout\,
	dataf => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_10~9_sumout\,
	combout => \convert_binary|int_data_1~0_combout\);

\convert_binary|int_data_1[1]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \convert_binary|int_data_1~0_combout\,
	clrn => \RST_main~input_o\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \convert_binary|int_data_1\(1));

\convert_binary|Mod0|auto_generated|divider|divider|StageOut[92]~2\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod0|auto_generated|divider|divider|StageOut[92]~2_combout\ = ( \convert_binary|Mod0|auto_generated|divider|divider|op_10~13_sumout\ & ( (!\convert_binary|Mod0|auto_generated|divider|divider|op_10~1_sumout\) # 
-- ((!\convert_binary|Mod0|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Mod0|auto_generated|divider|divider|op_9~9_sumout\))) # (\convert_binary|Mod0|auto_generated|divider|divider|op_9~1_sumout\ & 
-- (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[70]~1_combout\))) ) ) # ( !\convert_binary|Mod0|auto_generated|divider|divider|op_10~13_sumout\ & ( (\convert_binary|Mod0|auto_generated|divider|divider|op_10~1_sumout\ & 
-- ((!\convert_binary|Mod0|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Mod0|auto_generated|divider|divider|op_9~9_sumout\))) # (\convert_binary|Mod0|auto_generated|divider|divider|op_9~1_sumout\ & 
-- (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[70]~1_combout\)))) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000011011111111110001101100000000000110111111111100011011",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[70]~1_combout\,
	datac => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_9~9_sumout\,
	datad => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_10~1_sumout\,
	datae => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_10~13_sumout\,
	combout => \convert_binary|Mod0|auto_generated|divider|divider|StageOut[92]~2_combout\);

\convert_binary|int_data_1[2]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \convert_binary|Mod0|auto_generated|divider|divider|StageOut[92]~2_combout\,
	clrn => \RST_main~input_o\,
	sclr => \convert_binary|int_r_2[2]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \convert_binary|int_data_1\(2));

\convert_binary|int_data_1~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|int_data_1~1_combout\ = ( \convert_binary|int_r_2[2]~0_combout\ & ( \convert_binary|Mod0|auto_generated|divider|divider|op_10~17_sumout\ ) ) # ( !\convert_binary|int_r_2[2]~0_combout\ & ( 
-- \convert_binary|Mod0|auto_generated|divider|divider|op_10~17_sumout\ & ( (!\convert_binary|Mod0|auto_generated|divider|divider|op_10~1_sumout\) # ((!\convert_binary|Mod0|auto_generated|divider|divider|op_9~1_sumout\ & 
-- ((\convert_binary|Mod0|auto_generated|divider|divider|op_9~13_sumout\))) # (\convert_binary|Mod0|auto_generated|divider|divider|op_9~1_sumout\ & (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[71]~4_combout\))) ) ) ) # ( 
-- \convert_binary|int_r_2[2]~0_combout\ & ( !\convert_binary|Mod0|auto_generated|divider|divider|op_10~17_sumout\ ) ) # ( !\convert_binary|int_r_2[2]~0_combout\ & ( !\convert_binary|Mod0|auto_generated|divider|divider|op_10~17_sumout\ & ( 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_10~1_sumout\ & ((!\convert_binary|Mod0|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Mod0|auto_generated|divider|divider|op_9~13_sumout\))) # 
-- (\convert_binary|Mod0|auto_generated|divider|divider|op_9~1_sumout\ & (\convert_binary|Mod0|auto_generated|divider|divider|StageOut[71]~4_combout\)))) ) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000011011111111111111111111111111000110111111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datab => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_StageOut[71]~4_combout\,
	datac => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_9~13_sumout\,
	datad => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_10~1_sumout\,
	datae => \convert_binary|ALT_INV_int_r_2[2]~0_combout\,
	dataf => \convert_binary|Mod0|auto_generated|divider|divider|ALT_INV_op_10~17_sumout\,
	combout => \convert_binary|int_data_1~1_combout\);

\convert_binary|int_data_1[3]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \convert_binary|int_data_1~1_combout\,
	clrn => \RST_main~input_o\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \convert_binary|int_data_1\(3));

\seven_seg_display_1|Mux6~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \seven_seg_display_1|Mux6~0_combout\ = (!\convert_binary|int_data_1\(1) & (!\convert_binary|int_data_1\(3) & (!\convert_binary|int_data_1\(0) $ (!\convert_binary|int_data_1\(2)))))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0100100000000000010010000000000001001000000000000100100000000000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|ALT_INV_int_data_1\(0),
	datab => \convert_binary|ALT_INV_int_data_1\(1),
	datac => \convert_binary|ALT_INV_int_data_1\(2),
	datad => \convert_binary|ALT_INV_int_data_1\(3),
	combout => \seven_seg_display_1|Mux6~0_combout\);

\seven_seg_display_1|seven_seg[0]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \seven_seg_display_1|Mux6~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \seven_seg_display_1|seven_seg\(0));

\seven_seg_display_1|Mux5~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \seven_seg_display_1|Mux5~0_combout\ = (!\convert_binary|int_data_1\(2) & (((\convert_binary|int_data_1\(1) & \convert_binary|int_data_1\(3))))) # (\convert_binary|int_data_1\(2) & ((!\convert_binary|int_data_1\(0) $ (!\convert_binary|int_data_1\(1))) # 
-- (\convert_binary|int_data_1\(3))))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000011000111111000001100011111100000110001111110000011000111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|ALT_INV_int_data_1\(0),
	datab => \convert_binary|ALT_INV_int_data_1\(1),
	datac => \convert_binary|ALT_INV_int_data_1\(2),
	datad => \convert_binary|ALT_INV_int_data_1\(3),
	combout => \seven_seg_display_1|Mux5~0_combout\);

\seven_seg_display_1|seven_seg[1]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \seven_seg_display_1|Mux5~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \seven_seg_display_1|seven_seg\(1));

\seven_seg_display_1|Mux4~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \seven_seg_display_1|Mux4~0_combout\ = (!\convert_binary|int_data_1\(2) & (\convert_binary|int_data_1\(1) & ((!\convert_binary|int_data_1\(0)) # (\convert_binary|int_data_1\(3))))) # (\convert_binary|int_data_1\(2) & (((\convert_binary|int_data_1\(3)))))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010000000111111001000000011111100100000001111110010000000111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|ALT_INV_int_data_1\(0),
	datab => \convert_binary|ALT_INV_int_data_1\(1),
	datac => \convert_binary|ALT_INV_int_data_1\(2),
	datad => \convert_binary|ALT_INV_int_data_1\(3),
	combout => \seven_seg_display_1|Mux4~0_combout\);

\seven_seg_display_1|seven_seg[2]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \seven_seg_display_1|Mux4~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \seven_seg_display_1|seven_seg\(2));

\seven_seg_display_1|Mux3~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \seven_seg_display_1|Mux3~0_combout\ = (!\convert_binary|int_data_1\(3) & ((!\convert_binary|int_data_1\(0) & (!\convert_binary|int_data_1\(1) & \convert_binary|int_data_1\(2))) # (\convert_binary|int_data_1\(0) & (!\convert_binary|int_data_1\(1) $ 
-- (\convert_binary|int_data_1\(2))))))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0100100100000000010010010000000001001001000000000100100100000000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|ALT_INV_int_data_1\(0),
	datab => \convert_binary|ALT_INV_int_data_1\(1),
	datac => \convert_binary|ALT_INV_int_data_1\(2),
	datad => \convert_binary|ALT_INV_int_data_1\(3),
	combout => \seven_seg_display_1|Mux3~0_combout\);

\seven_seg_display_1|seven_seg[3]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \seven_seg_display_1|Mux3~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \seven_seg_display_1|seven_seg\(3));

\seven_seg_display_1|Mux2~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \seven_seg_display_1|Mux2~0_combout\ = (!\convert_binary|int_data_1\(1) & ((!\convert_binary|int_data_1\(2) & (\convert_binary|int_data_1\(0))) # (\convert_binary|int_data_1\(2) & ((!\convert_binary|int_data_1\(3)))))) # (\convert_binary|int_data_1\(1) & 
-- (\convert_binary|int_data_1\(0) & ((!\convert_binary|int_data_1\(3)))))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0101110101000000010111010100000001011101010000000101110101000000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|ALT_INV_int_data_1\(0),
	datab => \convert_binary|ALT_INV_int_data_1\(1),
	datac => \convert_binary|ALT_INV_int_data_1\(2),
	datad => \convert_binary|ALT_INV_int_data_1\(3),
	combout => \seven_seg_display_1|Mux2~0_combout\);

\seven_seg_display_1|seven_seg[4]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \seven_seg_display_1|Mux2~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \seven_seg_display_1|seven_seg\(4));

\seven_seg_display_1|Mux1~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \seven_seg_display_1|Mux1~0_combout\ = (!\convert_binary|int_data_1\(3) & ((!\convert_binary|int_data_1\(0) & (\convert_binary|int_data_1\(1) & !\convert_binary|int_data_1\(2))) # (\convert_binary|int_data_1\(0) & ((!\convert_binary|int_data_1\(2)) # 
-- (\convert_binary|int_data_1\(1))))))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0111000100000000011100010000000001110001000000000111000100000000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|ALT_INV_int_data_1\(0),
	datab => \convert_binary|ALT_INV_int_data_1\(1),
	datac => \convert_binary|ALT_INV_int_data_1\(2),
	datad => \convert_binary|ALT_INV_int_data_1\(3),
	combout => \seven_seg_display_1|Mux1~0_combout\);

\seven_seg_display_1|seven_seg[5]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \seven_seg_display_1|Mux1~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \seven_seg_display_1|seven_seg\(5));

\seven_seg_display_1|Mux0~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \seven_seg_display_1|Mux0~0_combout\ = (!\convert_binary|int_data_1\(3) & ((!\convert_binary|int_data_1\(1) & ((!\convert_binary|int_data_1\(2)))) # (\convert_binary|int_data_1\(1) & (\convert_binary|int_data_1\(0) & \convert_binary|int_data_1\(2)))))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "1100000100000000110000010000000011000001000000001100000100000000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|ALT_INV_int_data_1\(0),
	datab => \convert_binary|ALT_INV_int_data_1\(1),
	datac => \convert_binary|ALT_INV_int_data_1\(2),
	datad => \convert_binary|ALT_INV_int_data_1\(3),
	combout => \seven_seg_display_1|Mux0~0_combout\);

\seven_seg_display_1|seven_seg[6]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \seven_seg_display_1|Mux0~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \seven_seg_display_1|seven_seg\(6));

\convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[0]~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[0]~5_sumout\ = SUM(( \Result[6]~reg0_q\ ) + ( !VCC ) + ( !VCC ))
-- \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[0]~6\ = CARRY(( \Result[6]~reg0_q\ ) + ( !VCC ) + ( !VCC ))
-- \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[0]~7\ = SHARE(VCC)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	datad => \ALT_INV_Result[6]~reg0_q\,
	cin => GND,
	sharein => GND,
	sumout => \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[0]~5_sumout\,
	cout => \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[0]~6\,
	shareout => \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[0]~7\);

\convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[1]~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[1]~9_sumout\ = SUM(( \Result[7]~reg0_q\ ) + ( \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[0]~7\ ) + ( 
-- \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[0]~6\ ))
-- \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[1]~10\ = CARRY(( \Result[7]~reg0_q\ ) + ( \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[0]~7\ ) + ( 
-- \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[0]~6\ ))
-- \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[1]~11\ = SHARE(GND)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000011111111",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	datad => \ALT_INV_Result[7]~reg0_q\,
	cin => \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[0]~6\,
	sharein => \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[0]~7\,
	sumout => \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[1]~9_sumout\,
	cout => \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[1]~10\,
	shareout => \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[1]~11\);

\convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[2]~17\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[2]~17_sumout\ = SUM(( !\Result[8]~reg0_q\ ) + ( \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[1]~11\ ) + ( 
-- \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[1]~10\ ))
-- \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[2]~18\ = CARRY(( !\Result[8]~reg0_q\ ) + ( \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[1]~11\ ) + ( 
-- \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[1]~10\ ))
-- \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[2]~19\ = SHARE(\Result[8]~reg0_q\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000001111111100000000000000001111111100000000",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	datad => \ALT_INV_Result[8]~reg0_q\,
	cin => \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[1]~10\,
	sharein => \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[1]~11\,
	sumout => \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[2]~17_sumout\,
	cout => \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[2]~18\,
	shareout => \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[2]~19\);

\convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[3]~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[3]~13_sumout\ = SUM(( \Result[9]~reg0_q\ ) + ( \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[2]~19\ ) + ( 
-- \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[2]~18\ ))
-- \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[3]~14\ = CARRY(( \Result[9]~reg0_q\ ) + ( \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[2]~19\ ) + ( 
-- \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[2]~18\ ))
-- \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[3]~15\ = SHARE(GND)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000011111111",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	datad => \ALT_INV_Result[9]~reg0_q\,
	cin => \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[2]~18\,
	sharein => \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[2]~19\,
	sumout => \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[3]~13_sumout\,
	cout => \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[3]~14\,
	shareout => \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[3]~15\);

\convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[4]~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\ = SUM(( VCC ) + ( \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[3]~15\ ) + ( 
-- \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[3]~14\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[3]~14\,
	sharein => \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[3]~15\,
	sumout => \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\);

\convert_binary|Div0|auto_generated|divider|divider|StageOut[18]~22\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|StageOut[18]~22_combout\ = (!\convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\ & 
-- \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[3]~13_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~1_sumout\,
	datab => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[3]~13_sumout\,
	combout => \convert_binary|Div0|auto_generated|divider|divider|StageOut[18]~22_combout\);

\convert_binary|Div0|auto_generated|divider|divider|StageOut[18]~23\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|StageOut[18]~23_combout\ = (\Result[9]~reg0_q\ & \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_Result[9]~reg0_q\,
	datab => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~1_sumout\,
	combout => \convert_binary|Div0|auto_generated|divider|divider|StageOut[18]~23_combout\);

\convert_binary|Div0|auto_generated|divider|divider|StageOut[16]~17\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|StageOut[16]~17_combout\ = (!\convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\ & \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[1]~9_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~1_sumout\,
	datab => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[1]~9_sumout\,
	combout => \convert_binary|Div0|auto_generated|divider|divider|StageOut[16]~17_combout\);

\convert_binary|Div0|auto_generated|divider|divider|StageOut[16]~18\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|StageOut[16]~18_combout\ = (\Result[7]~reg0_q\ & \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_Result[7]~reg0_q\,
	datab => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~1_sumout\,
	combout => \convert_binary|Div0|auto_generated|divider|divider|StageOut[16]~18_combout\);

\convert_binary|Div0|auto_generated|divider|divider|op_5~22\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|op_5~22_cout\ = CARRY(( VCC ) + ( VCC ) + ( !VCC ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => GND,
	cout => \convert_binary|Div0|auto_generated|divider|divider|op_5~22_cout\);

\convert_binary|Div0|auto_generated|divider|divider|op_5~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|op_5~5_sumout\ = SUM(( \Result[5]~reg0_q\ ) + ( VCC ) + ( \convert_binary|Div0|auto_generated|divider|divider|op_5~22_cout\ ))
-- \convert_binary|Div0|auto_generated|divider|divider|op_5~6\ = CARRY(( \Result[5]~reg0_q\ ) + ( VCC ) + ( \convert_binary|Div0|auto_generated|divider|divider|op_5~22_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \ALT_INV_Result[5]~reg0_q\,
	cin => \convert_binary|Div0|auto_generated|divider|divider|op_5~22_cout\,
	sumout => \convert_binary|Div0|auto_generated|divider|divider|op_5~5_sumout\,
	cout => \convert_binary|Div0|auto_generated|divider|divider|op_5~6\);

\convert_binary|Div0|auto_generated|divider|divider|op_5~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|op_5~9_sumout\ = SUM(( (!\convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\ & ((\convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[0]~5_sumout\))) 
-- # (\convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\ & (\Result[6]~reg0_q\)) ) + ( GND ) + ( \convert_binary|Div0|auto_generated|divider|divider|op_5~6\ ))
-- \convert_binary|Div0|auto_generated|divider|divider|op_5~10\ = CARRY(( (!\convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\ & ((\convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[0]~5_sumout\))) # 
-- (\convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\ & (\Result[6]~reg0_q\)) ) + ( GND ) + ( \convert_binary|Div0|auto_generated|divider|divider|op_5~6\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000010111110101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_Result[6]~reg0_q\,
	datac => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~1_sumout\,
	datad => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[0]~5_sumout\,
	cin => \convert_binary|Div0|auto_generated|divider|divider|op_5~6\,
	sumout => \convert_binary|Div0|auto_generated|divider|divider|op_5~9_sumout\,
	cout => \convert_binary|Div0|auto_generated|divider|divider|op_5~10\);

\convert_binary|Div0|auto_generated|divider|divider|op_5~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|op_5~13_sumout\ = SUM(( (\convert_binary|Div0|auto_generated|divider|divider|StageOut[16]~18_combout\) # (\convert_binary|Div0|auto_generated|divider|divider|StageOut[16]~17_combout\) ) + ( VCC ) + ( 
-- \convert_binary|Div0|auto_generated|divider|divider|op_5~10\ ))
-- \convert_binary|Div0|auto_generated|divider|divider|op_5~14\ = CARRY(( (\convert_binary|Div0|auto_generated|divider|divider|StageOut[16]~18_combout\) # (\convert_binary|Div0|auto_generated|divider|divider|StageOut[16]~17_combout\) ) + ( VCC ) + ( 
-- \convert_binary|Div0|auto_generated|divider|divider|op_5~10\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000011001111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datab => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[16]~17_combout\,
	datad => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[16]~18_combout\,
	cin => \convert_binary|Div0|auto_generated|divider|divider|op_5~10\,
	sumout => \convert_binary|Div0|auto_generated|divider|divider|op_5~13_sumout\,
	cout => \convert_binary|Div0|auto_generated|divider|divider|op_5~14\);

\convert_binary|Div0|auto_generated|divider|divider|op_5~25\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|op_5~25_sumout\ = SUM(( (!\convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\ & 
-- ((\convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[2]~17_sumout\))) # (\convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\ & (\Result[8]~reg0_q\)) ) + ( GND ) + ( 
-- \convert_binary|Div0|auto_generated|divider|divider|op_5~14\ ))
-- \convert_binary|Div0|auto_generated|divider|divider|op_5~26\ = CARRY(( (!\convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\ & ((\convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[2]~17_sumout\))) # 
-- (\convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\ & (\Result[8]~reg0_q\)) ) + ( GND ) + ( \convert_binary|Div0|auto_generated|divider|divider|op_5~14\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000010111110101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_Result[8]~reg0_q\,
	datac => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~1_sumout\,
	datad => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[2]~17_sumout\,
	cin => \convert_binary|Div0|auto_generated|divider|divider|op_5~14\,
	sumout => \convert_binary|Div0|auto_generated|divider|divider|op_5~25_sumout\,
	cout => \convert_binary|Div0|auto_generated|divider|divider|op_5~26\);

\convert_binary|Div0|auto_generated|divider|divider|op_5~18\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|op_5~18_cout\ = CARRY(( (\convert_binary|Div0|auto_generated|divider|divider|StageOut[18]~23_combout\) # (\convert_binary|Div0|auto_generated|divider|divider|StageOut[18]~22_combout\) ) + ( VCC ) + ( 
-- \convert_binary|Div0|auto_generated|divider|divider|op_5~26\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000011001111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datab => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[18]~22_combout\,
	datad => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[18]~23_combout\,
	cin => \convert_binary|Div0|auto_generated|divider|divider|op_5~26\,
	cout => \convert_binary|Div0|auto_generated|divider|divider|op_5~18_cout\);

\convert_binary|Div0|auto_generated|divider|divider|op_5~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|op_5~1_sumout\ = SUM(( VCC ) + ( GND ) + ( \convert_binary|Div0|auto_generated|divider|divider|op_5~18_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Div0|auto_generated|divider|divider|op_5~18_cout\,
	sumout => \convert_binary|Div0|auto_generated|divider|divider|op_5~1_sumout\);

\convert_binary|Div0|auto_generated|divider|divider|StageOut[17]~19\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|StageOut[17]~19_combout\ = (!\convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\ & 
-- \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[2]~17_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~1_sumout\,
	datab => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[2]~17_sumout\,
	combout => \convert_binary|Div0|auto_generated|divider|divider|StageOut[17]~19_combout\);

\convert_binary|Div0|auto_generated|divider|divider|StageOut[17]~20\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|StageOut[17]~20_combout\ = (\Result[8]~reg0_q\ & \convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_Result[8]~reg0_q\,
	datab => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~1_sumout\,
	combout => \convert_binary|Div0|auto_generated|divider|divider|StageOut[17]~20_combout\);

\convert_binary|Div0|auto_generated|divider|divider|StageOut[16]~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|StageOut[16]~13_combout\ = (!\convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\ & 
-- ((\convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[1]~9_sumout\))) # (\convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\ & (\Result[7]~reg0_q\))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001110100011101000111010001110100011101000111010001110100011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_Result[7]~reg0_q\,
	datab => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~1_sumout\,
	datac => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[1]~9_sumout\,
	combout => \convert_binary|Div0|auto_generated|divider|divider|StageOut[16]~13_combout\);

\convert_binary|Div0|auto_generated|divider|divider|StageOut[15]~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|StageOut[15]~9_combout\ = (!\convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\ & 
-- ((\convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[0]~5_sumout\))) # (\convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\ & (\Result[6]~reg0_q\))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001110100011101000111010001110100011101000111010001110100011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_Result[6]~reg0_q\,
	datab => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~1_sumout\,
	datac => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[0]~5_sumout\,
	combout => \convert_binary|Div0|auto_generated|divider|divider|StageOut[15]~9_combout\);

\convert_binary|Div0|auto_generated|divider|divider|op_6~26\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|op_6~26_cout\ = CARRY(( VCC ) + ( VCC ) + ( !VCC ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => GND,
	cout => \convert_binary|Div0|auto_generated|divider|divider|op_6~26_cout\);

\convert_binary|Div0|auto_generated|divider|divider|op_6~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|op_6~5_sumout\ = SUM(( \Result[4]~reg0_q\ ) + ( VCC ) + ( \convert_binary|Div0|auto_generated|divider|divider|op_6~26_cout\ ))
-- \convert_binary|Div0|auto_generated|divider|divider|op_6~6\ = CARRY(( \Result[4]~reg0_q\ ) + ( VCC ) + ( \convert_binary|Div0|auto_generated|divider|divider|op_6~26_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \ALT_INV_Result[4]~reg0_q\,
	cin => \convert_binary|Div0|auto_generated|divider|divider|op_6~26_cout\,
	sumout => \convert_binary|Div0|auto_generated|divider|divider|op_6~5_sumout\,
	cout => \convert_binary|Div0|auto_generated|divider|divider|op_6~6\);

\convert_binary|Div0|auto_generated|divider|divider|op_6~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|op_6~9_sumout\ = SUM(( (!\convert_binary|Div0|auto_generated|divider|divider|op_5~1_sumout\ & ((\convert_binary|Div0|auto_generated|divider|divider|op_5~5_sumout\))) # 
-- (\convert_binary|Div0|auto_generated|divider|divider|op_5~1_sumout\ & (\Result[5]~reg0_q\)) ) + ( GND ) + ( \convert_binary|Div0|auto_generated|divider|divider|op_6~6\ ))
-- \convert_binary|Div0|auto_generated|divider|divider|op_6~10\ = CARRY(( (!\convert_binary|Div0|auto_generated|divider|divider|op_5~1_sumout\ & ((\convert_binary|Div0|auto_generated|divider|divider|op_5~5_sumout\))) # 
-- (\convert_binary|Div0|auto_generated|divider|divider|op_5~1_sumout\ & (\Result[5]~reg0_q\)) ) + ( GND ) + ( \convert_binary|Div0|auto_generated|divider|divider|op_6~6\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000001000111011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_Result[5]~reg0_q\,
	datab => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\,
	datad => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_5~5_sumout\,
	cin => \convert_binary|Div0|auto_generated|divider|divider|op_6~6\,
	sumout => \convert_binary|Div0|auto_generated|divider|divider|op_6~9_sumout\,
	cout => \convert_binary|Div0|auto_generated|divider|divider|op_6~10\);

\convert_binary|Div0|auto_generated|divider|divider|op_6~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|op_6~13_sumout\ = SUM(( (!\convert_binary|Div0|auto_generated|divider|divider|op_5~1_sumout\ & ((\convert_binary|Div0|auto_generated|divider|divider|op_5~9_sumout\))) # 
-- (\convert_binary|Div0|auto_generated|divider|divider|op_5~1_sumout\ & (\convert_binary|Div0|auto_generated|divider|divider|StageOut[15]~9_combout\)) ) + ( VCC ) + ( \convert_binary|Div0|auto_generated|divider|divider|op_6~10\ ))
-- \convert_binary|Div0|auto_generated|divider|divider|op_6~14\ = CARRY(( (!\convert_binary|Div0|auto_generated|divider|divider|op_5~1_sumout\ & ((\convert_binary|Div0|auto_generated|divider|divider|op_5~9_sumout\))) # 
-- (\convert_binary|Div0|auto_generated|divider|divider|op_5~1_sumout\ & (\convert_binary|Div0|auto_generated|divider|divider|StageOut[15]~9_combout\)) ) + ( VCC ) + ( \convert_binary|Div0|auto_generated|divider|divider|op_6~10\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000001111001111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datab => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\,
	datac => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[15]~9_combout\,
	datad => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_5~9_sumout\,
	cin => \convert_binary|Div0|auto_generated|divider|divider|op_6~10\,
	sumout => \convert_binary|Div0|auto_generated|divider|divider|op_6~13_sumout\,
	cout => \convert_binary|Div0|auto_generated|divider|divider|op_6~14\);

\convert_binary|Div0|auto_generated|divider|divider|op_6~17\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|op_6~17_sumout\ = SUM(( (!\convert_binary|Div0|auto_generated|divider|divider|op_5~1_sumout\ & ((\convert_binary|Div0|auto_generated|divider|divider|op_5~13_sumout\))) # 
-- (\convert_binary|Div0|auto_generated|divider|divider|op_5~1_sumout\ & (\convert_binary|Div0|auto_generated|divider|divider|StageOut[16]~13_combout\)) ) + ( GND ) + ( \convert_binary|Div0|auto_generated|divider|divider|op_6~14\ ))
-- \convert_binary|Div0|auto_generated|divider|divider|op_6~18\ = CARRY(( (!\convert_binary|Div0|auto_generated|divider|divider|op_5~1_sumout\ & ((\convert_binary|Div0|auto_generated|divider|divider|op_5~13_sumout\))) # 
-- (\convert_binary|Div0|auto_generated|divider|divider|op_5~1_sumout\ & (\convert_binary|Div0|auto_generated|divider|divider|StageOut[16]~13_combout\)) ) + ( GND ) + ( \convert_binary|Div0|auto_generated|divider|divider|op_6~14\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\,
	datac => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[16]~13_combout\,
	datad => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_5~13_sumout\,
	cin => \convert_binary|Div0|auto_generated|divider|divider|op_6~14\,
	sumout => \convert_binary|Div0|auto_generated|divider|divider|op_6~17_sumout\,
	cout => \convert_binary|Div0|auto_generated|divider|divider|op_6~18\);

\convert_binary|Div0|auto_generated|divider|divider|op_6~22\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|op_6~22_cout\ = CARRY(( (!\convert_binary|Div0|auto_generated|divider|divider|op_5~1_sumout\ & (((\convert_binary|Div0|auto_generated|divider|divider|op_5~25_sumout\)))) # 
-- (\convert_binary|Div0|auto_generated|divider|divider|op_5~1_sumout\ & (((\convert_binary|Div0|auto_generated|divider|divider|StageOut[17]~20_combout\)) # (\convert_binary|Div0|auto_generated|divider|divider|StageOut[17]~19_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Div0|auto_generated|divider|divider|op_6~18\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\,
	datab => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[17]~19_combout\,
	datac => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_5~25_sumout\,
	datad => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[17]~20_combout\,
	cin => \convert_binary|Div0|auto_generated|divider|divider|op_6~18\,
	cout => \convert_binary|Div0|auto_generated|divider|divider|op_6~22_cout\);

\convert_binary|Div0|auto_generated|divider|divider|op_6~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|op_6~1_sumout\ = SUM(( VCC ) + ( GND ) + ( \convert_binary|Div0|auto_generated|divider|divider|op_6~22_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Div0|auto_generated|divider|divider|op_6~22_cout\,
	sumout => \convert_binary|Div0|auto_generated|divider|divider|op_6~1_sumout\);

\convert_binary|Div0|auto_generated|divider|divider|StageOut[22]~12\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|StageOut[22]~12_combout\ = (!\convert_binary|Div0|auto_generated|divider|divider|op_5~1_sumout\ & \convert_binary|Div0|auto_generated|divider|divider|op_5~13_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\,
	datab => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_5~13_sumout\,
	combout => \convert_binary|Div0|auto_generated|divider|divider|StageOut[22]~12_combout\);

\convert_binary|Div0|auto_generated|divider|divider|StageOut[22]~14\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|StageOut[22]~14_combout\ = (\convert_binary|Div0|auto_generated|divider|divider|op_5~1_sumout\ & \convert_binary|Div0|auto_generated|divider|divider|StageOut[16]~13_combout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\,
	datab => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[16]~13_combout\,
	combout => \convert_binary|Div0|auto_generated|divider|divider|StageOut[22]~14_combout\);

\convert_binary|Div0|auto_generated|divider|divider|StageOut[21]~10\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|StageOut[21]~10_combout\ = (!\convert_binary|Div0|auto_generated|divider|divider|op_5~1_sumout\ & ((\convert_binary|Div0|auto_generated|divider|divider|op_5~9_sumout\))) # 
-- (\convert_binary|Div0|auto_generated|divider|divider|op_5~1_sumout\ & (\convert_binary|Div0|auto_generated|divider|divider|StageOut[15]~9_combout\))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001101100011011000110110001101100011011000110110001101100011011",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\,
	datab => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[15]~9_combout\,
	datac => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_5~9_sumout\,
	combout => \convert_binary|Div0|auto_generated|divider|divider|StageOut[21]~10_combout\);

\convert_binary|Div0|auto_generated|divider|divider|StageOut[20]~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|StageOut[20]~5_combout\ = (!\convert_binary|Div0|auto_generated|divider|divider|op_5~1_sumout\ & ((\convert_binary|Div0|auto_generated|divider|divider|op_5~5_sumout\))) # 
-- (\convert_binary|Div0|auto_generated|divider|divider|op_5~1_sumout\ & (\Result[5]~reg0_q\))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001110100011101000111010001110100011101000111010001110100011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_Result[5]~reg0_q\,
	datab => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\,
	datac => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_5~5_sumout\,
	combout => \convert_binary|Div0|auto_generated|divider|divider|StageOut[20]~5_combout\);

\convert_binary|Div0|auto_generated|divider|divider|op_7~26\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|op_7~26_cout\ = CARRY(( VCC ) + ( VCC ) + ( !VCC ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => GND,
	cout => \convert_binary|Div0|auto_generated|divider|divider|op_7~26_cout\);

\convert_binary|Div0|auto_generated|divider|divider|op_7~21\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|op_7~21_sumout\ = SUM(( \Result[3]~reg0_q\ ) + ( VCC ) + ( \convert_binary|Div0|auto_generated|divider|divider|op_7~26_cout\ ))
-- \convert_binary|Div0|auto_generated|divider|divider|op_7~22\ = CARRY(( \Result[3]~reg0_q\ ) + ( VCC ) + ( \convert_binary|Div0|auto_generated|divider|divider|op_7~26_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \ALT_INV_Result[3]~reg0_q\,
	cin => \convert_binary|Div0|auto_generated|divider|divider|op_7~26_cout\,
	sumout => \convert_binary|Div0|auto_generated|divider|divider|op_7~21_sumout\,
	cout => \convert_binary|Div0|auto_generated|divider|divider|op_7~22\);

\convert_binary|Div0|auto_generated|divider|divider|op_7~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|op_7~9_sumout\ = SUM(( (!\convert_binary|Div0|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Div0|auto_generated|divider|divider|op_6~5_sumout\))) # 
-- (\convert_binary|Div0|auto_generated|divider|divider|op_6~1_sumout\ & (\Result[4]~reg0_q\)) ) + ( GND ) + ( \convert_binary|Div0|auto_generated|divider|divider|op_7~22\ ))
-- \convert_binary|Div0|auto_generated|divider|divider|op_7~10\ = CARRY(( (!\convert_binary|Div0|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Div0|auto_generated|divider|divider|op_6~5_sumout\))) # 
-- (\convert_binary|Div0|auto_generated|divider|divider|op_6~1_sumout\ & (\Result[4]~reg0_q\)) ) + ( GND ) + ( \convert_binary|Div0|auto_generated|divider|divider|op_7~22\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000001000111011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_Result[4]~reg0_q\,
	datab => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datad => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_6~5_sumout\,
	cin => \convert_binary|Div0|auto_generated|divider|divider|op_7~22\,
	sumout => \convert_binary|Div0|auto_generated|divider|divider|op_7~9_sumout\,
	cout => \convert_binary|Div0|auto_generated|divider|divider|op_7~10\);

\convert_binary|Div0|auto_generated|divider|divider|op_7~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|op_7~13_sumout\ = SUM(( (!\convert_binary|Div0|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Div0|auto_generated|divider|divider|op_6~9_sumout\))) # 
-- (\convert_binary|Div0|auto_generated|divider|divider|op_6~1_sumout\ & (\convert_binary|Div0|auto_generated|divider|divider|StageOut[20]~5_combout\)) ) + ( VCC ) + ( \convert_binary|Div0|auto_generated|divider|divider|op_7~10\ ))
-- \convert_binary|Div0|auto_generated|divider|divider|op_7~14\ = CARRY(( (!\convert_binary|Div0|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Div0|auto_generated|divider|divider|op_6~9_sumout\))) # 
-- (\convert_binary|Div0|auto_generated|divider|divider|op_6~1_sumout\ & (\convert_binary|Div0|auto_generated|divider|divider|StageOut[20]~5_combout\)) ) + ( VCC ) + ( \convert_binary|Div0|auto_generated|divider|divider|op_7~10\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000001111001111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datab => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datac => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[20]~5_combout\,
	datad => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_6~9_sumout\,
	cin => \convert_binary|Div0|auto_generated|divider|divider|op_7~10\,
	sumout => \convert_binary|Div0|auto_generated|divider|divider|op_7~13_sumout\,
	cout => \convert_binary|Div0|auto_generated|divider|divider|op_7~14\);

\convert_binary|Div0|auto_generated|divider|divider|op_7~17\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|op_7~17_sumout\ = SUM(( (!\convert_binary|Div0|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Div0|auto_generated|divider|divider|op_6~13_sumout\))) # 
-- (\convert_binary|Div0|auto_generated|divider|divider|op_6~1_sumout\ & (\convert_binary|Div0|auto_generated|divider|divider|StageOut[21]~10_combout\)) ) + ( GND ) + ( \convert_binary|Div0|auto_generated|divider|divider|op_7~14\ ))
-- \convert_binary|Div0|auto_generated|divider|divider|op_7~18\ = CARRY(( (!\convert_binary|Div0|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Div0|auto_generated|divider|divider|op_6~13_sumout\))) # 
-- (\convert_binary|Div0|auto_generated|divider|divider|op_6~1_sumout\ & (\convert_binary|Div0|auto_generated|divider|divider|StageOut[21]~10_combout\)) ) + ( GND ) + ( \convert_binary|Div0|auto_generated|divider|divider|op_7~14\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datac => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[21]~10_combout\,
	datad => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_6~13_sumout\,
	cin => \convert_binary|Div0|auto_generated|divider|divider|op_7~14\,
	sumout => \convert_binary|Div0|auto_generated|divider|divider|op_7~17_sumout\,
	cout => \convert_binary|Div0|auto_generated|divider|divider|op_7~18\);

\convert_binary|Div0|auto_generated|divider|divider|op_7~6\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|op_7~6_cout\ = CARRY(( (!\convert_binary|Div0|auto_generated|divider|divider|op_6~1_sumout\ & (((\convert_binary|Div0|auto_generated|divider|divider|op_6~17_sumout\)))) # 
-- (\convert_binary|Div0|auto_generated|divider|divider|op_6~1_sumout\ & (((\convert_binary|Div0|auto_generated|divider|divider|StageOut[22]~14_combout\)) # (\convert_binary|Div0|auto_generated|divider|divider|StageOut[22]~12_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Div0|auto_generated|divider|divider|op_7~18\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datab => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[22]~12_combout\,
	datac => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_6~17_sumout\,
	datad => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[22]~14_combout\,
	cin => \convert_binary|Div0|auto_generated|divider|divider|op_7~18\,
	cout => \convert_binary|Div0|auto_generated|divider|divider|op_7~6_cout\);

\convert_binary|Div0|auto_generated|divider|divider|op_7~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|op_7~1_sumout\ = SUM(( VCC ) + ( GND ) + ( \convert_binary|Div0|auto_generated|divider|divider|op_7~6_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Div0|auto_generated|divider|divider|op_7~6_cout\,
	sumout => \convert_binary|Div0|auto_generated|divider|divider|op_7~1_sumout\);

\convert_binary|Div0|auto_generated|divider|divider|StageOut[27]~8\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|StageOut[27]~8_combout\ = (!\convert_binary|Div0|auto_generated|divider|divider|op_6~1_sumout\ & \convert_binary|Div0|auto_generated|divider|divider|op_6~13_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datab => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_6~13_sumout\,
	combout => \convert_binary|Div0|auto_generated|divider|divider|StageOut[27]~8_combout\);

\convert_binary|Div0|auto_generated|divider|divider|StageOut[27]~11\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|StageOut[27]~11_combout\ = (\convert_binary|Div0|auto_generated|divider|divider|op_6~1_sumout\ & \convert_binary|Div0|auto_generated|divider|divider|StageOut[21]~10_combout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datab => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[21]~10_combout\,
	combout => \convert_binary|Div0|auto_generated|divider|divider|StageOut[27]~11_combout\);

\convert_binary|Div0|auto_generated|divider|divider|StageOut[26]~6\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|StageOut[26]~6_combout\ = (!\convert_binary|Div0|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Div0|auto_generated|divider|divider|op_6~9_sumout\))) # 
-- (\convert_binary|Div0|auto_generated|divider|divider|op_6~1_sumout\ & (\convert_binary|Div0|auto_generated|divider|divider|StageOut[20]~5_combout\))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001101100011011000110110001101100011011000110110001101100011011",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datab => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[20]~5_combout\,
	datac => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_6~9_sumout\,
	combout => \convert_binary|Div0|auto_generated|divider|divider|StageOut[26]~6_combout\);

\convert_binary|Div0|auto_generated|divider|divider|StageOut[25]~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|StageOut[25]~1_combout\ = (!\convert_binary|Div0|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Div0|auto_generated|divider|divider|op_6~5_sumout\))) # 
-- (\convert_binary|Div0|auto_generated|divider|divider|op_6~1_sumout\ & (\Result[4]~reg0_q\))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001110100011101000111010001110100011101000111010001110100011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_Result[4]~reg0_q\,
	datab => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datac => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_6~5_sumout\,
	combout => \convert_binary|Div0|auto_generated|divider|divider|StageOut[25]~1_combout\);

\convert_binary|Div0|auto_generated|divider|divider|op_8~26\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|op_8~26_cout\ = CARRY(( VCC ) + ( VCC ) + ( !VCC ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => GND,
	cout => \convert_binary|Div0|auto_generated|divider|divider|op_8~26_cout\);

\convert_binary|Div0|auto_generated|divider|divider|op_8~21\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|op_8~21_sumout\ = SUM(( \Result[2]~reg0_q\ ) + ( VCC ) + ( \convert_binary|Div0|auto_generated|divider|divider|op_8~26_cout\ ))
-- \convert_binary|Div0|auto_generated|divider|divider|op_8~22\ = CARRY(( \Result[2]~reg0_q\ ) + ( VCC ) + ( \convert_binary|Div0|auto_generated|divider|divider|op_8~26_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \ALT_INV_Result[2]~reg0_q\,
	cin => \convert_binary|Div0|auto_generated|divider|divider|op_8~26_cout\,
	sumout => \convert_binary|Div0|auto_generated|divider|divider|op_8~21_sumout\,
	cout => \convert_binary|Div0|auto_generated|divider|divider|op_8~22\);

\convert_binary|Div0|auto_generated|divider|divider|op_8~17\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|op_8~17_sumout\ = SUM(( (!\convert_binary|Div0|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Div0|auto_generated|divider|divider|op_7~21_sumout\))) # 
-- (\convert_binary|Div0|auto_generated|divider|divider|op_7~1_sumout\ & (\Result[3]~reg0_q\)) ) + ( GND ) + ( \convert_binary|Div0|auto_generated|divider|divider|op_8~22\ ))
-- \convert_binary|Div0|auto_generated|divider|divider|op_8~18\ = CARRY(( (!\convert_binary|Div0|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Div0|auto_generated|divider|divider|op_7~21_sumout\))) # 
-- (\convert_binary|Div0|auto_generated|divider|divider|op_7~1_sumout\ & (\Result[3]~reg0_q\)) ) + ( GND ) + ( \convert_binary|Div0|auto_generated|divider|divider|op_8~22\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000001000111011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_Result[3]~reg0_q\,
	datab => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datad => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_7~21_sumout\,
	cin => \convert_binary|Div0|auto_generated|divider|divider|op_8~22\,
	sumout => \convert_binary|Div0|auto_generated|divider|divider|op_8~17_sumout\,
	cout => \convert_binary|Div0|auto_generated|divider|divider|op_8~18\);

\convert_binary|Div0|auto_generated|divider|divider|op_8~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|op_8~9_sumout\ = SUM(( (!\convert_binary|Div0|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Div0|auto_generated|divider|divider|op_7~9_sumout\))) # 
-- (\convert_binary|Div0|auto_generated|divider|divider|op_7~1_sumout\ & (\convert_binary|Div0|auto_generated|divider|divider|StageOut[25]~1_combout\)) ) + ( VCC ) + ( \convert_binary|Div0|auto_generated|divider|divider|op_8~18\ ))
-- \convert_binary|Div0|auto_generated|divider|divider|op_8~10\ = CARRY(( (!\convert_binary|Div0|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Div0|auto_generated|divider|divider|op_7~9_sumout\))) # 
-- (\convert_binary|Div0|auto_generated|divider|divider|op_7~1_sumout\ & (\convert_binary|Div0|auto_generated|divider|divider|StageOut[25]~1_combout\)) ) + ( VCC ) + ( \convert_binary|Div0|auto_generated|divider|divider|op_8~18\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000001111001111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datab => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datac => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[25]~1_combout\,
	datad => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_7~9_sumout\,
	cin => \convert_binary|Div0|auto_generated|divider|divider|op_8~18\,
	sumout => \convert_binary|Div0|auto_generated|divider|divider|op_8~9_sumout\,
	cout => \convert_binary|Div0|auto_generated|divider|divider|op_8~10\);

\convert_binary|Div0|auto_generated|divider|divider|op_8~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|op_8~13_sumout\ = SUM(( (!\convert_binary|Div0|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Div0|auto_generated|divider|divider|op_7~13_sumout\))) # 
-- (\convert_binary|Div0|auto_generated|divider|divider|op_7~1_sumout\ & (\convert_binary|Div0|auto_generated|divider|divider|StageOut[26]~6_combout\)) ) + ( GND ) + ( \convert_binary|Div0|auto_generated|divider|divider|op_8~10\ ))
-- \convert_binary|Div0|auto_generated|divider|divider|op_8~14\ = CARRY(( (!\convert_binary|Div0|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Div0|auto_generated|divider|divider|op_7~13_sumout\))) # 
-- (\convert_binary|Div0|auto_generated|divider|divider|op_7~1_sumout\ & (\convert_binary|Div0|auto_generated|divider|divider|StageOut[26]~6_combout\)) ) + ( GND ) + ( \convert_binary|Div0|auto_generated|divider|divider|op_8~10\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datac => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[26]~6_combout\,
	datad => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_7~13_sumout\,
	cin => \convert_binary|Div0|auto_generated|divider|divider|op_8~10\,
	sumout => \convert_binary|Div0|auto_generated|divider|divider|op_8~13_sumout\,
	cout => \convert_binary|Div0|auto_generated|divider|divider|op_8~14\);

\convert_binary|Div0|auto_generated|divider|divider|op_8~6\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|op_8~6_cout\ = CARRY(( (!\convert_binary|Div0|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Div0|auto_generated|divider|divider|op_7~17_sumout\)))) # 
-- (\convert_binary|Div0|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Div0|auto_generated|divider|divider|StageOut[27]~11_combout\)) # (\convert_binary|Div0|auto_generated|divider|divider|StageOut[27]~8_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Div0|auto_generated|divider|divider|op_8~14\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[27]~8_combout\,
	datac => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_7~17_sumout\,
	datad => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[27]~11_combout\,
	cin => \convert_binary|Div0|auto_generated|divider|divider|op_8~14\,
	cout => \convert_binary|Div0|auto_generated|divider|divider|op_8~6_cout\);

\convert_binary|Div0|auto_generated|divider|divider|op_8~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|op_8~1_sumout\ = SUM(( VCC ) + ( GND ) + ( \convert_binary|Div0|auto_generated|divider|divider|op_8~6_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Div0|auto_generated|divider|divider|op_8~6_cout\,
	sumout => \convert_binary|Div0|auto_generated|divider|divider|op_8~1_sumout\);

\convert_binary|Div0|auto_generated|divider|divider|StageOut[32]~4\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|StageOut[32]~4_combout\ = (!\convert_binary|Div0|auto_generated|divider|divider|op_7~1_sumout\ & \convert_binary|Div0|auto_generated|divider|divider|op_7~13_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_7~13_sumout\,
	combout => \convert_binary|Div0|auto_generated|divider|divider|StageOut[32]~4_combout\);

\convert_binary|Div0|auto_generated|divider|divider|StageOut[32]~7\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|StageOut[32]~7_combout\ = (\convert_binary|Div0|auto_generated|divider|divider|op_7~1_sumout\ & \convert_binary|Div0|auto_generated|divider|divider|StageOut[26]~6_combout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[26]~6_combout\,
	combout => \convert_binary|Div0|auto_generated|divider|divider|StageOut[32]~7_combout\);

\convert_binary|Div0|auto_generated|divider|divider|StageOut[31]~2\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|StageOut[31]~2_combout\ = (!\convert_binary|Div0|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Div0|auto_generated|divider|divider|op_7~9_sumout\))) # 
-- (\convert_binary|Div0|auto_generated|divider|divider|op_7~1_sumout\ & (\convert_binary|Div0|auto_generated|divider|divider|StageOut[25]~1_combout\))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001101100011011000110110001101100011011000110110001101100011011",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[25]~1_combout\,
	datac => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_7~9_sumout\,
	combout => \convert_binary|Div0|auto_generated|divider|divider|StageOut[31]~2_combout\);

\convert_binary|Div0|auto_generated|divider|divider|StageOut[30]~15\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|StageOut[30]~15_combout\ = (!\convert_binary|Div0|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Div0|auto_generated|divider|divider|op_7~21_sumout\))) # 
-- (\convert_binary|Div0|auto_generated|divider|divider|op_7~1_sumout\ & (\Result[3]~reg0_q\))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001110100011101000111010001110100011101000111010001110100011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_Result[3]~reg0_q\,
	datab => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datac => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_7~21_sumout\,
	combout => \convert_binary|Div0|auto_generated|divider|divider|StageOut[30]~15_combout\);

\convert_binary|Div0|auto_generated|divider|divider|op_9~26\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|op_9~26_cout\ = CARRY(( VCC ) + ( VCC ) + ( !VCC ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => GND,
	cout => \convert_binary|Div0|auto_generated|divider|divider|op_9~26_cout\);

\convert_binary|Div0|auto_generated|divider|divider|op_9~21\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|op_9~21_sumout\ = SUM(( \Result[1]~reg0_q\ ) + ( VCC ) + ( \convert_binary|Div0|auto_generated|divider|divider|op_9~26_cout\ ))
-- \convert_binary|Div0|auto_generated|divider|divider|op_9~22\ = CARRY(( \Result[1]~reg0_q\ ) + ( VCC ) + ( \convert_binary|Div0|auto_generated|divider|divider|op_9~26_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \ALT_INV_Result[1]~reg0_q\,
	cin => \convert_binary|Div0|auto_generated|divider|divider|op_9~26_cout\,
	sumout => \convert_binary|Div0|auto_generated|divider|divider|op_9~21_sumout\,
	cout => \convert_binary|Div0|auto_generated|divider|divider|op_9~22\);

\convert_binary|Div0|auto_generated|divider|divider|op_9~17\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|op_9~17_sumout\ = SUM(( (!\convert_binary|Div0|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Div0|auto_generated|divider|divider|op_8~21_sumout\))) # 
-- (\convert_binary|Div0|auto_generated|divider|divider|op_8~1_sumout\ & (\Result[2]~reg0_q\)) ) + ( GND ) + ( \convert_binary|Div0|auto_generated|divider|divider|op_9~22\ ))
-- \convert_binary|Div0|auto_generated|divider|divider|op_9~18\ = CARRY(( (!\convert_binary|Div0|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Div0|auto_generated|divider|divider|op_8~21_sumout\))) # 
-- (\convert_binary|Div0|auto_generated|divider|divider|op_8~1_sumout\ & (\Result[2]~reg0_q\)) ) + ( GND ) + ( \convert_binary|Div0|auto_generated|divider|divider|op_9~22\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000001000111011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_Result[2]~reg0_q\,
	datab => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datad => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_8~21_sumout\,
	cin => \convert_binary|Div0|auto_generated|divider|divider|op_9~22\,
	sumout => \convert_binary|Div0|auto_generated|divider|divider|op_9~17_sumout\,
	cout => \convert_binary|Div0|auto_generated|divider|divider|op_9~18\);

\convert_binary|Div0|auto_generated|divider|divider|op_9~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|op_9~13_sumout\ = SUM(( (!\convert_binary|Div0|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Div0|auto_generated|divider|divider|op_8~17_sumout\))) # 
-- (\convert_binary|Div0|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Div0|auto_generated|divider|divider|StageOut[30]~15_combout\)) ) + ( VCC ) + ( \convert_binary|Div0|auto_generated|divider|divider|op_9~18\ ))
-- \convert_binary|Div0|auto_generated|divider|divider|op_9~14\ = CARRY(( (!\convert_binary|Div0|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Div0|auto_generated|divider|divider|op_8~17_sumout\))) # 
-- (\convert_binary|Div0|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Div0|auto_generated|divider|divider|StageOut[30]~15_combout\)) ) + ( VCC ) + ( \convert_binary|Div0|auto_generated|divider|divider|op_9~18\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000001111001111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datab => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datac => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[30]~15_combout\,
	datad => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_8~17_sumout\,
	cin => \convert_binary|Div0|auto_generated|divider|divider|op_9~18\,
	sumout => \convert_binary|Div0|auto_generated|divider|divider|op_9~13_sumout\,
	cout => \convert_binary|Div0|auto_generated|divider|divider|op_9~14\);

\convert_binary|Div0|auto_generated|divider|divider|op_9~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|op_9~9_sumout\ = SUM(( (!\convert_binary|Div0|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Div0|auto_generated|divider|divider|op_8~9_sumout\))) # 
-- (\convert_binary|Div0|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Div0|auto_generated|divider|divider|StageOut[31]~2_combout\)) ) + ( GND ) + ( \convert_binary|Div0|auto_generated|divider|divider|op_9~14\ ))
-- \convert_binary|Div0|auto_generated|divider|divider|op_9~10\ = CARRY(( (!\convert_binary|Div0|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Div0|auto_generated|divider|divider|op_8~9_sumout\))) # 
-- (\convert_binary|Div0|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Div0|auto_generated|divider|divider|StageOut[31]~2_combout\)) ) + ( GND ) + ( \convert_binary|Div0|auto_generated|divider|divider|op_9~14\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datac => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[31]~2_combout\,
	datad => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_8~9_sumout\,
	cin => \convert_binary|Div0|auto_generated|divider|divider|op_9~14\,
	sumout => \convert_binary|Div0|auto_generated|divider|divider|op_9~9_sumout\,
	cout => \convert_binary|Div0|auto_generated|divider|divider|op_9~10\);

\convert_binary|Div0|auto_generated|divider|divider|op_9~6\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|op_9~6_cout\ = CARRY(( (!\convert_binary|Div0|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Div0|auto_generated|divider|divider|op_8~13_sumout\)))) # 
-- (\convert_binary|Div0|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Div0|auto_generated|divider|divider|StageOut[32]~7_combout\)) # (\convert_binary|Div0|auto_generated|divider|divider|StageOut[32]~4_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Div0|auto_generated|divider|divider|op_9~10\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[32]~4_combout\,
	datac => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_8~13_sumout\,
	datad => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[32]~7_combout\,
	cin => \convert_binary|Div0|auto_generated|divider|divider|op_9~10\,
	cout => \convert_binary|Div0|auto_generated|divider|divider|op_9~6_cout\);

\convert_binary|Div0|auto_generated|divider|divider|op_9~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|op_9~1_sumout\ = SUM(( VCC ) + ( GND ) + ( \convert_binary|Div0|auto_generated|divider|divider|op_9~6_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Div0|auto_generated|divider|divider|op_9~6_cout\,
	sumout => \convert_binary|Div0|auto_generated|divider|divider|op_9~1_sumout\);

\convert_binary|Div0|auto_generated|divider|divider|StageOut[37]~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|StageOut[37]~0_combout\ = (!\convert_binary|Div0|auto_generated|divider|divider|op_8~1_sumout\ & \convert_binary|Div0|auto_generated|divider|divider|op_8~9_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_8~9_sumout\,
	combout => \convert_binary|Div0|auto_generated|divider|divider|StageOut[37]~0_combout\);

\convert_binary|Div0|auto_generated|divider|divider|StageOut[37]~3\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|StageOut[37]~3_combout\ = (\convert_binary|Div0|auto_generated|divider|divider|op_8~1_sumout\ & \convert_binary|Div0|auto_generated|divider|divider|StageOut[31]~2_combout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[31]~2_combout\,
	combout => \convert_binary|Div0|auto_generated|divider|divider|StageOut[37]~3_combout\);

\convert_binary|Div0|auto_generated|divider|divider|StageOut[36]~16\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|StageOut[36]~16_combout\ = (!\convert_binary|Div0|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Div0|auto_generated|divider|divider|op_8~17_sumout\))) # 
-- (\convert_binary|Div0|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Div0|auto_generated|divider|divider|StageOut[30]~15_combout\))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001101100011011000110110001101100011011000110110001101100011011",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[30]~15_combout\,
	datac => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_8~17_sumout\,
	combout => \convert_binary|Div0|auto_generated|divider|divider|StageOut[36]~16_combout\);

\convert_binary|Div0|auto_generated|divider|divider|StageOut[35]~21\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|StageOut[35]~21_combout\ = (!\convert_binary|Div0|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Div0|auto_generated|divider|divider|op_8~21_sumout\))) # 
-- (\convert_binary|Div0|auto_generated|divider|divider|op_8~1_sumout\ & (\Result[2]~reg0_q\))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001110100011101000111010001110100011101000111010001110100011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_Result[2]~reg0_q\,
	datab => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datac => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_8~21_sumout\,
	combout => \convert_binary|Div0|auto_generated|divider|divider|StageOut[35]~21_combout\);

\convert_binary|Div0|auto_generated|divider|divider|op_10~26\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|op_10~26_cout\ = CARRY(( VCC ) + ( VCC ) + ( !VCC ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => GND,
	cout => \convert_binary|Div0|auto_generated|divider|divider|op_10~26_cout\);

\convert_binary|Div0|auto_generated|divider|divider|op_10~22\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|op_10~22_cout\ = CARRY(( \Result[0]~reg0_q\ ) + ( VCC ) + ( \convert_binary|Div0|auto_generated|divider|divider|op_10~26_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \ALT_INV_Result[0]~reg0_q\,
	cin => \convert_binary|Div0|auto_generated|divider|divider|op_10~26_cout\,
	cout => \convert_binary|Div0|auto_generated|divider|divider|op_10~22_cout\);

\convert_binary|Div0|auto_generated|divider|divider|op_10~18\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|op_10~18_cout\ = CARRY(( (!\convert_binary|Div0|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Div0|auto_generated|divider|divider|op_9~21_sumout\))) # 
-- (\convert_binary|Div0|auto_generated|divider|divider|op_9~1_sumout\ & (\Result[1]~reg0_q\)) ) + ( GND ) + ( \convert_binary|Div0|auto_generated|divider|divider|op_10~22_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000001000111011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_Result[1]~reg0_q\,
	datab => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datad => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_9~21_sumout\,
	cin => \convert_binary|Div0|auto_generated|divider|divider|op_10~22_cout\,
	cout => \convert_binary|Div0|auto_generated|divider|divider|op_10~18_cout\);

\convert_binary|Div0|auto_generated|divider|divider|op_10~14\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|op_10~14_cout\ = CARRY(( (!\convert_binary|Div0|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Div0|auto_generated|divider|divider|op_9~17_sumout\))) # 
-- (\convert_binary|Div0|auto_generated|divider|divider|op_9~1_sumout\ & (\convert_binary|Div0|auto_generated|divider|divider|StageOut[35]~21_combout\)) ) + ( VCC ) + ( \convert_binary|Div0|auto_generated|divider|divider|op_10~18_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000001111001111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datab => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datac => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[35]~21_combout\,
	datad => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_9~17_sumout\,
	cin => \convert_binary|Div0|auto_generated|divider|divider|op_10~18_cout\,
	cout => \convert_binary|Div0|auto_generated|divider|divider|op_10~14_cout\);

\convert_binary|Div0|auto_generated|divider|divider|op_10~10\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|op_10~10_cout\ = CARRY(( (!\convert_binary|Div0|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Div0|auto_generated|divider|divider|op_9~13_sumout\))) # 
-- (\convert_binary|Div0|auto_generated|divider|divider|op_9~1_sumout\ & (\convert_binary|Div0|auto_generated|divider|divider|StageOut[36]~16_combout\)) ) + ( GND ) + ( \convert_binary|Div0|auto_generated|divider|divider|op_10~14_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datac => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[36]~16_combout\,
	datad => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_9~13_sumout\,
	cin => \convert_binary|Div0|auto_generated|divider|divider|op_10~14_cout\,
	cout => \convert_binary|Div0|auto_generated|divider|divider|op_10~10_cout\);

\convert_binary|Div0|auto_generated|divider|divider|op_10~6\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|op_10~6_cout\ = CARRY(( (!\convert_binary|Div0|auto_generated|divider|divider|op_9~1_sumout\ & (((\convert_binary|Div0|auto_generated|divider|divider|op_9~9_sumout\)))) # 
-- (\convert_binary|Div0|auto_generated|divider|divider|op_9~1_sumout\ & (((\convert_binary|Div0|auto_generated|divider|divider|StageOut[37]~3_combout\)) # (\convert_binary|Div0|auto_generated|divider|divider|StageOut[37]~0_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Div0|auto_generated|divider|divider|op_10~10_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datab => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[37]~0_combout\,
	datac => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_9~9_sumout\,
	datad => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_StageOut[37]~3_combout\,
	cin => \convert_binary|Div0|auto_generated|divider|divider|op_10~10_cout\,
	cout => \convert_binary|Div0|auto_generated|divider|divider|op_10~6_cout\);

\convert_binary|Div0|auto_generated|divider|divider|op_10~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div0|auto_generated|divider|divider|op_10~1_sumout\ = SUM(( VCC ) + ( GND ) + ( \convert_binary|Div0|auto_generated|divider|divider|op_10~6_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Div0|auto_generated|divider|divider|op_10~6_cout\,
	sumout => \convert_binary|Div0|auto_generated|divider|divider|op_10~1_sumout\);

\convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[0]~21\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[0]~21_sumout\ = SUM(( !\convert_binary|Div0|auto_generated|divider|divider|op_5~1_sumout\ ) + ( !VCC ) + ( !VCC ))
-- \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[0]~22\ = CARRY(( !\convert_binary|Div0|auto_generated|divider|divider|op_5~1_sumout\ ) + ( !VCC ) + ( !VCC ))
-- \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[0]~23\ = SHARE(VCC)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000001111111100000000",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	datad => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\,
	cin => GND,
	sharein => GND,
	sumout => \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[0]~21_sumout\,
	cout => \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[0]~22\,
	shareout => \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[0]~23\);

\convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[1]~17\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[1]~17_sumout\ = SUM(( !\convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\ ) + ( 
-- \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[0]~23\ ) + ( \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[0]~22\ ))
-- \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[1]~18\ = CARRY(( !\convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\ ) + ( 
-- \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[0]~23\ ) + ( \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[0]~22\ ))
-- \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[1]~19\ = SHARE(GND)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111100000000",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	datad => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~1_sumout\,
	cin => \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[0]~22\,
	sharein => \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[0]~23\,
	sumout => \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[1]~17_sumout\,
	cout => \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[1]~18\,
	shareout => \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[1]~19\);

\convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[2]~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[2]~13_sumout\ = SUM(( VCC ) + ( \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[1]~19\ ) + ( 
-- \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[1]~18\ ))
-- \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[2]~14\ = CARRY(( VCC ) + ( \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[1]~19\ ) + ( 
-- \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[1]~18\ ))
-- \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[2]~15\ = SHARE(GND)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[1]~18\,
	sharein => \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[1]~19\,
	sumout => \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[2]~13_sumout\,
	cout => \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[2]~14\,
	shareout => \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[2]~15\);

\convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[3]~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[3]~9_sumout\ = SUM(( GND ) + ( \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[2]~15\ ) + ( 
-- \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[2]~14\ ))
-- \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[3]~10\ = CARRY(( GND ) + ( \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[2]~15\ ) + ( 
-- \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[2]~14\ ))
-- \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[3]~11\ = SHARE(GND)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000000000000",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[2]~14\,
	sharein => \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[2]~15\,
	sumout => \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[3]~9_sumout\,
	cout => \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[3]~10\,
	shareout => \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[3]~11\);

\convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[4]~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[4]~5_sumout\ = SUM(( VCC ) + ( \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[3]~11\ ) + ( 
-- \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[3]~10\ ))
-- \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[4]~6\ = CARRY(( VCC ) + ( \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[3]~11\ ) + ( 
-- \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[3]~10\ ))
-- \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[4]~7\ = SHARE(GND)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[3]~10\,
	sharein => \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[3]~11\,
	sumout => \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[4]~5_sumout\,
	cout => \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[4]~6\,
	shareout => \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[4]~7\);

\convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[5]~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ = SUM(( VCC ) + ( \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[4]~7\ ) + ( 
-- \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[4]~6\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[4]~6\,
	sharein => \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[4]~7\,
	sumout => \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\);

\convert_binary|Mod1|auto_generated|divider|divider|op_6~30\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|op_6~30_cout\ = CARRY(( VCC ) + ( VCC ) + ( !VCC ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => GND,
	cout => \convert_binary|Mod1|auto_generated|divider|divider|op_6~30_cout\);

\convert_binary|Mod1|auto_generated|divider|divider|op_6~25\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|op_6~25_sumout\ = SUM(( !\convert_binary|Div0|auto_generated|divider|divider|op_6~1_sumout\ ) + ( VCC ) + ( \convert_binary|Mod1|auto_generated|divider|divider|op_6~30_cout\ ))
-- \convert_binary|Mod1|auto_generated|divider|divider|op_6~26\ = CARRY(( !\convert_binary|Div0|auto_generated|divider|divider|op_6~1_sumout\ ) + ( VCC ) + ( \convert_binary|Mod1|auto_generated|divider|divider|op_6~30_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111100000000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	cin => \convert_binary|Mod1|auto_generated|divider|divider|op_6~30_cout\,
	sumout => \convert_binary|Mod1|auto_generated|divider|divider|op_6~25_sumout\,
	cout => \convert_binary|Mod1|auto_generated|divider|divider|op_6~26\);

\convert_binary|Mod1|auto_generated|divider|divider|op_6~21\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|op_6~21_sumout\ = SUM(( (!\convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ & 
-- ((\convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[0]~21_sumout\))) # (\convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ & (!\convert_binary|Div0|auto_generated|divider|divider|op_5~1_sumout\)) ) 
-- + ( GND ) + ( \convert_binary|Mod1|auto_generated|divider|divider|op_6~26\ ))
-- \convert_binary|Mod1|auto_generated|divider|divider|op_6~22\ = CARRY(( (!\convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ & ((\convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[0]~21_sumout\))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ & (!\convert_binary|Div0|auto_generated|divider|divider|op_5~1_sumout\)) ) + ( GND ) + ( \convert_binary|Mod1|auto_generated|divider|divider|op_6~26\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000010001011101110",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\,
	datab => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[5]~1_sumout\,
	datad => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[0]~21_sumout\,
	cin => \convert_binary|Mod1|auto_generated|divider|divider|op_6~26\,
	sumout => \convert_binary|Mod1|auto_generated|divider|divider|op_6~21_sumout\,
	cout => \convert_binary|Mod1|auto_generated|divider|divider|op_6~22\);

\convert_binary|Mod1|auto_generated|divider|divider|op_6~17\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|op_6~17_sumout\ = SUM(( (!\convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ & 
-- ((\convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[1]~17_sumout\))) # (\convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ & 
-- (!\convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\)) ) + ( VCC ) + ( \convert_binary|Mod1|auto_generated|divider|divider|op_6~22\ ))
-- \convert_binary|Mod1|auto_generated|divider|divider|op_6~18\ = CARRY(( (!\convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ & ((\convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[1]~17_sumout\))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ & (!\convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\)) ) + ( VCC ) + ( \convert_binary|Mod1|auto_generated|divider|divider|op_6~22\ 
-- ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000011000011111100",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datab => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[5]~1_sumout\,
	datac => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~1_sumout\,
	datad => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[1]~17_sumout\,
	cin => \convert_binary|Mod1|auto_generated|divider|divider|op_6~22\,
	sumout => \convert_binary|Mod1|auto_generated|divider|divider|op_6~17_sumout\,
	cout => \convert_binary|Mod1|auto_generated|divider|divider|op_6~18\);

\convert_binary|Mod1|auto_generated|divider|divider|op_6~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|op_6~13_sumout\ = SUM(( (!\convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ & \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[2]~13_sumout\) ) 
-- + ( GND ) + ( \convert_binary|Mod1|auto_generated|divider|divider|op_6~18\ ))
-- \convert_binary|Mod1|auto_generated|divider|divider|op_6~14\ = CARRY(( (!\convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ & \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[2]~13_sumout\) ) + ( 
-- GND ) + ( \convert_binary|Mod1|auto_generated|divider|divider|op_6~18\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000010101010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[5]~1_sumout\,
	datad => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[2]~13_sumout\,
	cin => \convert_binary|Mod1|auto_generated|divider|divider|op_6~18\,
	sumout => \convert_binary|Mod1|auto_generated|divider|divider|op_6~13_sumout\,
	cout => \convert_binary|Mod1|auto_generated|divider|divider|op_6~14\);

\convert_binary|Mod1|auto_generated|divider|divider|op_6~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|op_6~9_sumout\ = SUM(( (!\convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ & \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[3]~9_sumout\) ) + 
-- ( VCC ) + ( \convert_binary|Mod1|auto_generated|divider|divider|op_6~14\ ))
-- \convert_binary|Mod1|auto_generated|divider|divider|op_6~10\ = CARRY(( (!\convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ & \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[3]~9_sumout\) ) + ( 
-- VCC ) + ( \convert_binary|Mod1|auto_generated|divider|divider|op_6~14\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000010101010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[5]~1_sumout\,
	datad => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[3]~9_sumout\,
	cin => \convert_binary|Mod1|auto_generated|divider|divider|op_6~14\,
	sumout => \convert_binary|Mod1|auto_generated|divider|divider|op_6~9_sumout\,
	cout => \convert_binary|Mod1|auto_generated|divider|divider|op_6~10\);

\convert_binary|Mod1|auto_generated|divider|divider|op_6~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|op_6~5_sumout\ = SUM(( (!\convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ & \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[4]~5_sumout\) ) + 
-- ( VCC ) + ( \convert_binary|Mod1|auto_generated|divider|divider|op_6~10\ ))
-- \convert_binary|Mod1|auto_generated|divider|divider|op_6~6\ = CARRY(( (!\convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ & \convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[4]~5_sumout\) ) + ( 
-- VCC ) + ( \convert_binary|Mod1|auto_generated|divider|divider|op_6~10\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000010101010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[5]~1_sumout\,
	datad => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[4]~5_sumout\,
	cin => \convert_binary|Mod1|auto_generated|divider|divider|op_6~10\,
	sumout => \convert_binary|Mod1|auto_generated|divider|divider|op_6~5_sumout\,
	cout => \convert_binary|Mod1|auto_generated|divider|divider|op_6~6\);

\convert_binary|Mod1|auto_generated|divider|divider|op_6~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|op_6~1_sumout\ = SUM(( VCC ) + ( GND ) + ( \convert_binary|Mod1|auto_generated|divider|divider|op_6~6\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Mod1|auto_generated|divider|divider|op_6~6\,
	sumout => \convert_binary|Mod1|auto_generated|divider|divider|op_6~1_sumout\);

\convert_binary|Mod1|auto_generated|divider|divider|StageOut[41]~22\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|StageOut[41]~22_combout\ = (!\convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ & 
-- ((\convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[1]~17_sumout\))) # (\convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ & 
-- (!\convert_binary|Div0|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010111000101110001011100010111000101110001011100010111000101110",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~1_sumout\,
	datab => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[5]~1_sumout\,
	datac => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[1]~17_sumout\,
	combout => \convert_binary|Mod1|auto_generated|divider|divider|StageOut[41]~22_combout\);

\convert_binary|Mod1|auto_generated|divider|divider|StageOut[40]~27\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|StageOut[40]~27_combout\ = (!\convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ & 
-- ((\convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[0]~21_sumout\))) # (\convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ & (!\convert_binary|Div0|auto_generated|divider|divider|op_5~1_sumout\))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010111000101110001011100010111000101110001011100010111000101110",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\,
	datab => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[5]~1_sumout\,
	datac => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[0]~21_sumout\,
	combout => \convert_binary|Mod1|auto_generated|divider|divider|StageOut[40]~27_combout\);

\convert_binary|Mod1|auto_generated|divider|divider|op_7~14\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|op_7~14_cout\ = CARRY(( VCC ) + ( VCC ) + ( !VCC ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => GND,
	cout => \convert_binary|Mod1|auto_generated|divider|divider|op_7~14_cout\);

\convert_binary|Mod1|auto_generated|divider|divider|op_7~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|op_7~5_sumout\ = SUM(( !\convert_binary|Div0|auto_generated|divider|divider|op_7~1_sumout\ ) + ( VCC ) + ( \convert_binary|Mod1|auto_generated|divider|divider|op_7~14_cout\ ))
-- \convert_binary|Mod1|auto_generated|divider|divider|op_7~6\ = CARRY(( !\convert_binary|Div0|auto_generated|divider|divider|op_7~1_sumout\ ) + ( VCC ) + ( \convert_binary|Mod1|auto_generated|divider|divider|op_7~14_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111100000000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	cin => \convert_binary|Mod1|auto_generated|divider|divider|op_7~14_cout\,
	sumout => \convert_binary|Mod1|auto_generated|divider|divider|op_7~5_sumout\,
	cout => \convert_binary|Mod1|auto_generated|divider|divider|op_7~6\);

\convert_binary|Mod1|auto_generated|divider|divider|op_7~33\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|op_7~33_sumout\ = SUM(( (!\convert_binary|Mod1|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Mod1|auto_generated|divider|divider|op_6~25_sumout\))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_6~1_sumout\ & (!\convert_binary|Div0|auto_generated|divider|divider|op_6~1_sumout\)) ) + ( GND ) + ( \convert_binary|Mod1|auto_generated|divider|divider|op_7~6\ ))
-- \convert_binary|Mod1|auto_generated|divider|divider|op_7~34\ = CARRY(( (!\convert_binary|Mod1|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Mod1|auto_generated|divider|divider|op_6~25_sumout\))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_6~1_sumout\ & (!\convert_binary|Div0|auto_generated|divider|divider|op_6~1_sumout\)) ) + ( GND ) + ( \convert_binary|Mod1|auto_generated|divider|divider|op_7~6\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000010001011101110",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datab => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datad => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_6~25_sumout\,
	cin => \convert_binary|Mod1|auto_generated|divider|divider|op_7~6\,
	sumout => \convert_binary|Mod1|auto_generated|divider|divider|op_7~33_sumout\,
	cout => \convert_binary|Mod1|auto_generated|divider|divider|op_7~34\);

\convert_binary|Mod1|auto_generated|divider|divider|op_7~29\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|op_7~29_sumout\ = SUM(( (!\convert_binary|Mod1|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Mod1|auto_generated|divider|divider|op_6~21_sumout\))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_6~1_sumout\ & (\convert_binary|Mod1|auto_generated|divider|divider|StageOut[40]~27_combout\)) ) + ( VCC ) + ( \convert_binary|Mod1|auto_generated|divider|divider|op_7~34\ ))
-- \convert_binary|Mod1|auto_generated|divider|divider|op_7~30\ = CARRY(( (!\convert_binary|Mod1|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Mod1|auto_generated|divider|divider|op_6~21_sumout\))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_6~1_sumout\ & (\convert_binary|Mod1|auto_generated|divider|divider|StageOut[40]~27_combout\)) ) + ( VCC ) + ( \convert_binary|Mod1|auto_generated|divider|divider|op_7~34\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000001111001111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datab => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datac => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[40]~27_combout\,
	datad => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_6~21_sumout\,
	cin => \convert_binary|Mod1|auto_generated|divider|divider|op_7~34\,
	sumout => \convert_binary|Mod1|auto_generated|divider|divider|op_7~29_sumout\,
	cout => \convert_binary|Mod1|auto_generated|divider|divider|op_7~30\);

\convert_binary|Mod1|auto_generated|divider|divider|op_7~25\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|op_7~25_sumout\ = SUM(( (!\convert_binary|Mod1|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Mod1|auto_generated|divider|divider|op_6~17_sumout\))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_6~1_sumout\ & (\convert_binary|Mod1|auto_generated|divider|divider|StageOut[41]~22_combout\)) ) + ( GND ) + ( \convert_binary|Mod1|auto_generated|divider|divider|op_7~30\ ))
-- \convert_binary|Mod1|auto_generated|divider|divider|op_7~26\ = CARRY(( (!\convert_binary|Mod1|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Mod1|auto_generated|divider|divider|op_6~17_sumout\))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_6~1_sumout\ & (\convert_binary|Mod1|auto_generated|divider|divider|StageOut[41]~22_combout\)) ) + ( GND ) + ( \convert_binary|Mod1|auto_generated|divider|divider|op_7~30\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datac => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[41]~22_combout\,
	datad => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_6~17_sumout\,
	cin => \convert_binary|Mod1|auto_generated|divider|divider|op_7~30\,
	sumout => \convert_binary|Mod1|auto_generated|divider|divider|op_7~25_sumout\,
	cout => \convert_binary|Mod1|auto_generated|divider|divider|op_7~26\);

\convert_binary|Mod1|auto_generated|divider|divider|op_7~21\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|op_7~21_sumout\ = SUM(( (!\convert_binary|Mod1|auto_generated|divider|divider|op_6~1_sumout\ & (((\convert_binary|Mod1|auto_generated|divider|divider|op_6~13_sumout\)))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_6~1_sumout\ & (\convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[2]~13_sumout\ & (!\convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\))) ) + 
-- ( VCC ) + ( \convert_binary|Mod1|auto_generated|divider|divider|op_7~26\ ))
-- \convert_binary|Mod1|auto_generated|divider|divider|op_7~22\ = CARRY(( (!\convert_binary|Mod1|auto_generated|divider|divider|op_6~1_sumout\ & (((\convert_binary|Mod1|auto_generated|divider|divider|op_6~13_sumout\)))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_6~1_sumout\ & (\convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[2]~13_sumout\ & (!\convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\))) ) + 
-- ( VCC ) + ( \convert_binary|Mod1|auto_generated|divider|divider|op_7~26\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001000010111010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datab => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[2]~13_sumout\,
	datac => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[5]~1_sumout\,
	datad => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_6~13_sumout\,
	cin => \convert_binary|Mod1|auto_generated|divider|divider|op_7~26\,
	sumout => \convert_binary|Mod1|auto_generated|divider|divider|op_7~21_sumout\,
	cout => \convert_binary|Mod1|auto_generated|divider|divider|op_7~22\);

\convert_binary|Mod1|auto_generated|divider|divider|op_7~17\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|op_7~17_sumout\ = SUM(( (!\convert_binary|Mod1|auto_generated|divider|divider|op_6~1_sumout\ & (((\convert_binary|Mod1|auto_generated|divider|divider|op_6~9_sumout\)))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_6~1_sumout\ & (!\convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ & (\convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[3]~9_sumout\))) ) + ( 
-- VCC ) + ( \convert_binary|Mod1|auto_generated|divider|divider|op_7~22\ ))
-- \convert_binary|Mod1|auto_generated|divider|divider|op_7~18\ = CARRY(( (!\convert_binary|Mod1|auto_generated|divider|divider|op_6~1_sumout\ & (((\convert_binary|Mod1|auto_generated|divider|divider|op_6~9_sumout\)))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_6~1_sumout\ & (!\convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ & (\convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[3]~9_sumout\))) ) + ( 
-- VCC ) + ( \convert_binary|Mod1|auto_generated|divider|divider|op_7~22\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000010010101110",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datab => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[5]~1_sumout\,
	datac => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[3]~9_sumout\,
	datad => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_6~9_sumout\,
	cin => \convert_binary|Mod1|auto_generated|divider|divider|op_7~22\,
	sumout => \convert_binary|Mod1|auto_generated|divider|divider|op_7~17_sumout\,
	cout => \convert_binary|Mod1|auto_generated|divider|divider|op_7~18\);

\convert_binary|Mod1|auto_generated|divider|divider|op_7~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|op_7~9_sumout\ = SUM(( (!\convert_binary|Mod1|auto_generated|divider|divider|op_6~1_sumout\ & (((\convert_binary|Mod1|auto_generated|divider|divider|op_6~5_sumout\)))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_6~1_sumout\ & (!\convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ & (\convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[4]~5_sumout\))) ) + ( 
-- VCC ) + ( \convert_binary|Mod1|auto_generated|divider|divider|op_7~18\ ))
-- \convert_binary|Mod1|auto_generated|divider|divider|op_7~10\ = CARRY(( (!\convert_binary|Mod1|auto_generated|divider|divider|op_6~1_sumout\ & (((\convert_binary|Mod1|auto_generated|divider|divider|op_6~5_sumout\)))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_6~1_sumout\ & (!\convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ & (\convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[4]~5_sumout\))) ) + ( 
-- VCC ) + ( \convert_binary|Mod1|auto_generated|divider|divider|op_7~18\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000010010101110",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datab => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[5]~1_sumout\,
	datac => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[4]~5_sumout\,
	datad => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_6~5_sumout\,
	cin => \convert_binary|Mod1|auto_generated|divider|divider|op_7~18\,
	sumout => \convert_binary|Mod1|auto_generated|divider|divider|op_7~9_sumout\,
	cout => \convert_binary|Mod1|auto_generated|divider|divider|op_7~10\);

\convert_binary|Mod1|auto_generated|divider|divider|op_7~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|op_7~1_sumout\ = SUM(( VCC ) + ( GND ) + ( \convert_binary|Mod1|auto_generated|divider|divider|op_7~10\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Mod1|auto_generated|divider|divider|op_7~10\,
	sumout => \convert_binary|Mod1|auto_generated|divider|divider|op_7~1_sumout\);

\convert_binary|Mod1|auto_generated|divider|divider|StageOut[55]~7\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|StageOut[55]~7_combout\ = (!\convert_binary|Mod1|auto_generated|divider|divider|op_6~1_sumout\ & \convert_binary|Mod1|auto_generated|divider|divider|op_6~5_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datab => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_6~5_sumout\,
	combout => \convert_binary|Mod1|auto_generated|divider|divider|StageOut[55]~7_combout\);

\convert_binary|Mod1|auto_generated|divider|divider|StageOut[55]~8\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|StageOut[55]~8_combout\ = (!\convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ & (\convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[4]~5_sumout\ 
-- & \convert_binary|Mod1|auto_generated|divider|divider|op_6~1_sumout\))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000001000000010000000100000001000000010000000100000001000000010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[5]~1_sumout\,
	datab => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[4]~5_sumout\,
	datac => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	combout => \convert_binary|Mod1|auto_generated|divider|divider|StageOut[55]~8_combout\);

\convert_binary|Mod1|auto_generated|divider|divider|StageOut[54]~12\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|StageOut[54]~12_combout\ = (!\convert_binary|Mod1|auto_generated|divider|divider|op_6~1_sumout\ & \convert_binary|Mod1|auto_generated|divider|divider|op_6~9_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datab => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_6~9_sumout\,
	combout => \convert_binary|Mod1|auto_generated|divider|divider|StageOut[54]~12_combout\);

\convert_binary|Mod1|auto_generated|divider|divider|StageOut[54]~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|StageOut[54]~13_combout\ = (!\convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ & (\convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[3]~9_sumout\ 
-- & \convert_binary|Mod1|auto_generated|divider|divider|op_6~1_sumout\))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000001000000010000000100000001000000010000000100000001000000010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[5]~1_sumout\,
	datab => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[3]~9_sumout\,
	datac => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	combout => \convert_binary|Mod1|auto_generated|divider|divider|StageOut[54]~13_combout\);

\convert_binary|Mod1|auto_generated|divider|divider|StageOut[53]~17\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|StageOut[53]~17_combout\ = (!\convert_binary|Mod1|auto_generated|divider|divider|op_6~1_sumout\ & (((\convert_binary|Mod1|auto_generated|divider|divider|op_6~13_sumout\)))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_6~1_sumout\ & (!\convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ & (\convert_binary|Mod1|auto_generated|divider|divider|add_sub_4_result_int[2]~13_sumout\)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000001011110010000000101111001000000010111100100000001011110010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[5]~1_sumout\,
	datab => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[2]~13_sumout\,
	datac => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datad => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_6~13_sumout\,
	combout => \convert_binary|Mod1|auto_generated|divider|divider|StageOut[53]~17_combout\);

\convert_binary|Mod1|auto_generated|divider|divider|StageOut[52]~21\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|StageOut[52]~21_combout\ = (!\convert_binary|Mod1|auto_generated|divider|divider|op_6~1_sumout\ & \convert_binary|Mod1|auto_generated|divider|divider|op_6~17_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datab => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_6~17_sumout\,
	combout => \convert_binary|Mod1|auto_generated|divider|divider|StageOut[52]~21_combout\);

\convert_binary|Mod1|auto_generated|divider|divider|StageOut[52]~23\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|StageOut[52]~23_combout\ = (\convert_binary|Mod1|auto_generated|divider|divider|op_6~1_sumout\ & \convert_binary|Mod1|auto_generated|divider|divider|StageOut[41]~22_combout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datab => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[41]~22_combout\,
	combout => \convert_binary|Mod1|auto_generated|divider|divider|StageOut[52]~23_combout\);

\convert_binary|Mod1|auto_generated|divider|divider|StageOut[51]~28\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|StageOut[51]~28_combout\ = (!\convert_binary|Mod1|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Mod1|auto_generated|divider|divider|op_6~21_sumout\))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_6~1_sumout\ & (\convert_binary|Mod1|auto_generated|divider|divider|StageOut[40]~27_combout\))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001101100011011000110110001101100011011000110110001101100011011",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datab => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[40]~27_combout\,
	datac => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_6~21_sumout\,
	combout => \convert_binary|Mod1|auto_generated|divider|divider|StageOut[51]~28_combout\);

\convert_binary|Mod1|auto_generated|divider|divider|StageOut[50]~32\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|StageOut[50]~32_combout\ = (!\convert_binary|Mod1|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Mod1|auto_generated|divider|divider|op_6~25_sumout\))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_6~1_sumout\ & (!\convert_binary|Div0|auto_generated|divider|divider|op_6~1_sumout\))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010111000101110001011100010111000101110001011100010111000101110",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datab => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datac => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_6~25_sumout\,
	combout => \convert_binary|Mod1|auto_generated|divider|divider|StageOut[50]~32_combout\);

\convert_binary|Mod1|auto_generated|divider|divider|op_8~18\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|op_8~18_cout\ = CARRY(( VCC ) + ( VCC ) + ( !VCC ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => GND,
	cout => \convert_binary|Mod1|auto_generated|divider|divider|op_8~18_cout\);

\convert_binary|Mod1|auto_generated|divider|divider|op_8~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|op_8~5_sumout\ = SUM(( !\convert_binary|Div0|auto_generated|divider|divider|op_8~1_sumout\ ) + ( VCC ) + ( \convert_binary|Mod1|auto_generated|divider|divider|op_8~18_cout\ ))
-- \convert_binary|Mod1|auto_generated|divider|divider|op_8~6\ = CARRY(( !\convert_binary|Div0|auto_generated|divider|divider|op_8~1_sumout\ ) + ( VCC ) + ( \convert_binary|Mod1|auto_generated|divider|divider|op_8~18_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111100000000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	cin => \convert_binary|Mod1|auto_generated|divider|divider|op_8~18_cout\,
	sumout => \convert_binary|Mod1|auto_generated|divider|divider|op_8~5_sumout\,
	cout => \convert_binary|Mod1|auto_generated|divider|divider|op_8~6\);

\convert_binary|Mod1|auto_generated|divider|divider|op_8~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|op_8~9_sumout\ = SUM(( (!\convert_binary|Mod1|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Mod1|auto_generated|divider|divider|op_7~5_sumout\))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_7~1_sumout\ & (!\convert_binary|Div0|auto_generated|divider|divider|op_7~1_sumout\)) ) + ( GND ) + ( \convert_binary|Mod1|auto_generated|divider|divider|op_8~6\ ))
-- \convert_binary|Mod1|auto_generated|divider|divider|op_8~10\ = CARRY(( (!\convert_binary|Mod1|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Mod1|auto_generated|divider|divider|op_7~5_sumout\))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_7~1_sumout\ & (!\convert_binary|Div0|auto_generated|divider|divider|op_7~1_sumout\)) ) + ( GND ) + ( \convert_binary|Mod1|auto_generated|divider|divider|op_8~6\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000010001011101110",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datad => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_7~5_sumout\,
	cin => \convert_binary|Mod1|auto_generated|divider|divider|op_8~6\,
	sumout => \convert_binary|Mod1|auto_generated|divider|divider|op_8~9_sumout\,
	cout => \convert_binary|Mod1|auto_generated|divider|divider|op_8~10\);

\convert_binary|Mod1|auto_generated|divider|divider|op_8~37\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|op_8~37_sumout\ = SUM(( (!\convert_binary|Mod1|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Mod1|auto_generated|divider|divider|op_7~33_sumout\))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_7~1_sumout\ & (\convert_binary|Mod1|auto_generated|divider|divider|StageOut[50]~32_combout\)) ) + ( VCC ) + ( \convert_binary|Mod1|auto_generated|divider|divider|op_8~10\ ))
-- \convert_binary|Mod1|auto_generated|divider|divider|op_8~38\ = CARRY(( (!\convert_binary|Mod1|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Mod1|auto_generated|divider|divider|op_7~33_sumout\))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_7~1_sumout\ & (\convert_binary|Mod1|auto_generated|divider|divider|StageOut[50]~32_combout\)) ) + ( VCC ) + ( \convert_binary|Mod1|auto_generated|divider|divider|op_8~10\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000001111001111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datab => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datac => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[50]~32_combout\,
	datad => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_7~33_sumout\,
	cin => \convert_binary|Mod1|auto_generated|divider|divider|op_8~10\,
	sumout => \convert_binary|Mod1|auto_generated|divider|divider|op_8~37_sumout\,
	cout => \convert_binary|Mod1|auto_generated|divider|divider|op_8~38\);

\convert_binary|Mod1|auto_generated|divider|divider|op_8~33\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|op_8~33_sumout\ = SUM(( (!\convert_binary|Mod1|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Mod1|auto_generated|divider|divider|op_7~29_sumout\))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_7~1_sumout\ & (\convert_binary|Mod1|auto_generated|divider|divider|StageOut[51]~28_combout\)) ) + ( GND ) + ( \convert_binary|Mod1|auto_generated|divider|divider|op_8~38\ ))
-- \convert_binary|Mod1|auto_generated|divider|divider|op_8~34\ = CARRY(( (!\convert_binary|Mod1|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Mod1|auto_generated|divider|divider|op_7~29_sumout\))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_7~1_sumout\ & (\convert_binary|Mod1|auto_generated|divider|divider|StageOut[51]~28_combout\)) ) + ( GND ) + ( \convert_binary|Mod1|auto_generated|divider|divider|op_8~38\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datac => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[51]~28_combout\,
	datad => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_7~29_sumout\,
	cin => \convert_binary|Mod1|auto_generated|divider|divider|op_8~38\,
	sumout => \convert_binary|Mod1|auto_generated|divider|divider|op_8~33_sumout\,
	cout => \convert_binary|Mod1|auto_generated|divider|divider|op_8~34\);

\convert_binary|Mod1|auto_generated|divider|divider|op_8~29\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|op_8~29_sumout\ = SUM(( (!\convert_binary|Mod1|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod1|auto_generated|divider|divider|op_7~25_sumout\)))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod1|auto_generated|divider|divider|StageOut[52]~23_combout\)) # (\convert_binary|Mod1|auto_generated|divider|divider|StageOut[52]~21_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod1|auto_generated|divider|divider|op_8~34\ ))
-- \convert_binary|Mod1|auto_generated|divider|divider|op_8~30\ = CARRY(( (!\convert_binary|Mod1|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod1|auto_generated|divider|divider|op_7~25_sumout\)))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod1|auto_generated|divider|divider|StageOut[52]~23_combout\)) # (\convert_binary|Mod1|auto_generated|divider|divider|StageOut[52]~21_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod1|auto_generated|divider|divider|op_8~34\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[52]~21_combout\,
	datac => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_7~25_sumout\,
	datad => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[52]~23_combout\,
	cin => \convert_binary|Mod1|auto_generated|divider|divider|op_8~34\,
	sumout => \convert_binary|Mod1|auto_generated|divider|divider|op_8~29_sumout\,
	cout => \convert_binary|Mod1|auto_generated|divider|divider|op_8~30\);

\convert_binary|Mod1|auto_generated|divider|divider|op_8~25\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|op_8~25_sumout\ = SUM(( (!\convert_binary|Mod1|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Mod1|auto_generated|divider|divider|op_7~21_sumout\))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_7~1_sumout\ & (\convert_binary|Mod1|auto_generated|divider|divider|StageOut[53]~17_combout\)) ) + ( VCC ) + ( \convert_binary|Mod1|auto_generated|divider|divider|op_8~30\ ))
-- \convert_binary|Mod1|auto_generated|divider|divider|op_8~26\ = CARRY(( (!\convert_binary|Mod1|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Mod1|auto_generated|divider|divider|op_7~21_sumout\))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_7~1_sumout\ & (\convert_binary|Mod1|auto_generated|divider|divider|StageOut[53]~17_combout\)) ) + ( VCC ) + ( \convert_binary|Mod1|auto_generated|divider|divider|op_8~30\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datac => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[53]~17_combout\,
	datad => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_7~21_sumout\,
	cin => \convert_binary|Mod1|auto_generated|divider|divider|op_8~30\,
	sumout => \convert_binary|Mod1|auto_generated|divider|divider|op_8~25_sumout\,
	cout => \convert_binary|Mod1|auto_generated|divider|divider|op_8~26\);

\convert_binary|Mod1|auto_generated|divider|divider|op_8~21\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|op_8~21_sumout\ = SUM(( (!\convert_binary|Mod1|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod1|auto_generated|divider|divider|op_7~17_sumout\)))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod1|auto_generated|divider|divider|StageOut[54]~13_combout\)) # (\convert_binary|Mod1|auto_generated|divider|divider|StageOut[54]~12_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod1|auto_generated|divider|divider|op_8~26\ ))
-- \convert_binary|Mod1|auto_generated|divider|divider|op_8~22\ = CARRY(( (!\convert_binary|Mod1|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod1|auto_generated|divider|divider|op_7~17_sumout\)))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod1|auto_generated|divider|divider|StageOut[54]~13_combout\)) # (\convert_binary|Mod1|auto_generated|divider|divider|StageOut[54]~12_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod1|auto_generated|divider|divider|op_8~26\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[54]~12_combout\,
	datac => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_7~17_sumout\,
	datad => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[54]~13_combout\,
	cin => \convert_binary|Mod1|auto_generated|divider|divider|op_8~26\,
	sumout => \convert_binary|Mod1|auto_generated|divider|divider|op_8~21_sumout\,
	cout => \convert_binary|Mod1|auto_generated|divider|divider|op_8~22\);

\convert_binary|Mod1|auto_generated|divider|divider|op_8~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|op_8~13_sumout\ = SUM(( (!\convert_binary|Mod1|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod1|auto_generated|divider|divider|op_7~9_sumout\)))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod1|auto_generated|divider|divider|StageOut[55]~8_combout\)) # (\convert_binary|Mod1|auto_generated|divider|divider|StageOut[55]~7_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod1|auto_generated|divider|divider|op_8~22\ ))
-- \convert_binary|Mod1|auto_generated|divider|divider|op_8~14\ = CARRY(( (!\convert_binary|Mod1|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod1|auto_generated|divider|divider|op_7~9_sumout\)))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod1|auto_generated|divider|divider|StageOut[55]~8_combout\)) # (\convert_binary|Mod1|auto_generated|divider|divider|StageOut[55]~7_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod1|auto_generated|divider|divider|op_8~22\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[55]~7_combout\,
	datac => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_7~9_sumout\,
	datad => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[55]~8_combout\,
	cin => \convert_binary|Mod1|auto_generated|divider|divider|op_8~22\,
	sumout => \convert_binary|Mod1|auto_generated|divider|divider|op_8~13_sumout\,
	cout => \convert_binary|Mod1|auto_generated|divider|divider|op_8~14\);

\convert_binary|Mod1|auto_generated|divider|divider|op_8~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|op_8~1_sumout\ = SUM(( VCC ) + ( GND ) + ( \convert_binary|Mod1|auto_generated|divider|divider|op_8~14\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Mod1|auto_generated|divider|divider|op_8~14\,
	sumout => \convert_binary|Mod1|auto_generated|divider|divider|op_8~1_sumout\);

\convert_binary|Mod1|auto_generated|divider|divider|StageOut[66]~6\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|StageOut[66]~6_combout\ = (!\convert_binary|Mod1|auto_generated|divider|divider|op_7~1_sumout\ & \convert_binary|Mod1|auto_generated|divider|divider|op_7~9_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_7~9_sumout\,
	combout => \convert_binary|Mod1|auto_generated|divider|divider|StageOut[66]~6_combout\);

\convert_binary|Mod1|auto_generated|divider|divider|StageOut[66]~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|StageOut[66]~9_combout\ = (\convert_binary|Mod1|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Mod1|auto_generated|divider|divider|StageOut[55]~8_combout\) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|StageOut[55]~7_combout\)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001010100010101000101010001010100010101000101010001010100010101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[55]~7_combout\,
	datac => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[55]~8_combout\,
	combout => \convert_binary|Mod1|auto_generated|divider|divider|StageOut[66]~9_combout\);

\convert_binary|Mod1|auto_generated|divider|divider|StageOut[65]~14\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|StageOut[65]~14_combout\ = (!\convert_binary|Mod1|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod1|auto_generated|divider|divider|op_7~17_sumout\)))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod1|auto_generated|divider|divider|StageOut[54]~13_combout\)) # (\convert_binary|Mod1|auto_generated|divider|divider|StageOut[54]~12_combout\)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001101101011111000110110101111100011011010111110001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[54]~12_combout\,
	datac => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_7~17_sumout\,
	datad => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[54]~13_combout\,
	combout => \convert_binary|Mod1|auto_generated|divider|divider|StageOut[65]~14_combout\);

\convert_binary|Mod1|auto_generated|divider|divider|StageOut[64]~16\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|StageOut[64]~16_combout\ = (!\convert_binary|Mod1|auto_generated|divider|divider|op_7~1_sumout\ & \convert_binary|Mod1|auto_generated|divider|divider|op_7~21_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_7~21_sumout\,
	combout => \convert_binary|Mod1|auto_generated|divider|divider|StageOut[64]~16_combout\);

\convert_binary|Mod1|auto_generated|divider|divider|StageOut[64]~18\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|StageOut[64]~18_combout\ = (\convert_binary|Mod1|auto_generated|divider|divider|op_7~1_sumout\ & \convert_binary|Mod1|auto_generated|divider|divider|StageOut[53]~17_combout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[53]~17_combout\,
	combout => \convert_binary|Mod1|auto_generated|divider|divider|StageOut[64]~18_combout\);

\convert_binary|Mod1|auto_generated|divider|divider|StageOut[63]~24\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|StageOut[63]~24_combout\ = (!\convert_binary|Mod1|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod1|auto_generated|divider|divider|op_7~25_sumout\)))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod1|auto_generated|divider|divider|StageOut[52]~23_combout\)) # (\convert_binary|Mod1|auto_generated|divider|divider|StageOut[52]~21_combout\)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001101101011111000110110101111100011011010111110001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[52]~21_combout\,
	datac => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_7~25_sumout\,
	datad => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[52]~23_combout\,
	combout => \convert_binary|Mod1|auto_generated|divider|divider|StageOut[63]~24_combout\);

\convert_binary|Mod1|auto_generated|divider|divider|StageOut[62]~26\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|StageOut[62]~26_combout\ = (!\convert_binary|Mod1|auto_generated|divider|divider|op_7~1_sumout\ & \convert_binary|Mod1|auto_generated|divider|divider|op_7~29_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_7~29_sumout\,
	combout => \convert_binary|Mod1|auto_generated|divider|divider|StageOut[62]~26_combout\);

\convert_binary|Mod1|auto_generated|divider|divider|StageOut[62]~29\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|StageOut[62]~29_combout\ = (\convert_binary|Mod1|auto_generated|divider|divider|op_7~1_sumout\ & \convert_binary|Mod1|auto_generated|divider|divider|StageOut[51]~28_combout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[51]~28_combout\,
	combout => \convert_binary|Mod1|auto_generated|divider|divider|StageOut[62]~29_combout\);

\convert_binary|Mod1|auto_generated|divider|divider|StageOut[61]~33\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|StageOut[61]~33_combout\ = (!\convert_binary|Mod1|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Mod1|auto_generated|divider|divider|op_7~33_sumout\))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_7~1_sumout\ & (\convert_binary|Mod1|auto_generated|divider|divider|StageOut[50]~32_combout\))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001101100011011000110110001101100011011000110110001101100011011",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[50]~32_combout\,
	datac => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_7~33_sumout\,
	combout => \convert_binary|Mod1|auto_generated|divider|divider|StageOut[61]~33_combout\);

\convert_binary|Mod1|auto_generated|divider|divider|StageOut[60]~3\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|StageOut[60]~3_combout\ = (!\convert_binary|Mod1|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Mod1|auto_generated|divider|divider|op_7~5_sumout\))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_7~1_sumout\ & (!\convert_binary|Div0|auto_generated|divider|divider|op_7~1_sumout\))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010111000101110001011100010111000101110001011100010111000101110",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datac => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_7~5_sumout\,
	combout => \convert_binary|Mod1|auto_generated|divider|divider|StageOut[60]~3_combout\);

\convert_binary|Mod1|auto_generated|divider|divider|op_9~22\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|op_9~22_cout\ = CARRY(( VCC ) + ( VCC ) + ( !VCC ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => GND,
	cout => \convert_binary|Mod1|auto_generated|divider|divider|op_9~22_cout\);

\convert_binary|Mod1|auto_generated|divider|divider|op_9~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|op_9~5_sumout\ = SUM(( !\convert_binary|Div0|auto_generated|divider|divider|op_9~1_sumout\ ) + ( VCC ) + ( \convert_binary|Mod1|auto_generated|divider|divider|op_9~22_cout\ ))
-- \convert_binary|Mod1|auto_generated|divider|divider|op_9~6\ = CARRY(( !\convert_binary|Div0|auto_generated|divider|divider|op_9~1_sumout\ ) + ( VCC ) + ( \convert_binary|Mod1|auto_generated|divider|divider|op_9~22_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111100000000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	cin => \convert_binary|Mod1|auto_generated|divider|divider|op_9~22_cout\,
	sumout => \convert_binary|Mod1|auto_generated|divider|divider|op_9~5_sumout\,
	cout => \convert_binary|Mod1|auto_generated|divider|divider|op_9~6\);

\convert_binary|Mod1|auto_generated|divider|divider|op_9~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|op_9~9_sumout\ = SUM(( (!\convert_binary|Mod1|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod1|auto_generated|divider|divider|op_8~5_sumout\))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_8~1_sumout\ & (!\convert_binary|Div0|auto_generated|divider|divider|op_8~1_sumout\)) ) + ( GND ) + ( \convert_binary|Mod1|auto_generated|divider|divider|op_9~6\ ))
-- \convert_binary|Mod1|auto_generated|divider|divider|op_9~10\ = CARRY(( (!\convert_binary|Mod1|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod1|auto_generated|divider|divider|op_8~5_sumout\))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_8~1_sumout\ & (!\convert_binary|Div0|auto_generated|divider|divider|op_8~1_sumout\)) ) + ( GND ) + ( \convert_binary|Mod1|auto_generated|divider|divider|op_9~6\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000010001011101110",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datad => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_8~5_sumout\,
	cin => \convert_binary|Mod1|auto_generated|divider|divider|op_9~6\,
	sumout => \convert_binary|Mod1|auto_generated|divider|divider|op_9~9_sumout\,
	cout => \convert_binary|Mod1|auto_generated|divider|divider|op_9~10\);

\convert_binary|Mod1|auto_generated|divider|divider|op_9~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|op_9~13_sumout\ = SUM(( (!\convert_binary|Mod1|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod1|auto_generated|divider|divider|op_8~9_sumout\))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Mod1|auto_generated|divider|divider|StageOut[60]~3_combout\)) ) + ( VCC ) + ( \convert_binary|Mod1|auto_generated|divider|divider|op_9~10\ ))
-- \convert_binary|Mod1|auto_generated|divider|divider|op_9~14\ = CARRY(( (!\convert_binary|Mod1|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod1|auto_generated|divider|divider|op_8~9_sumout\))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Mod1|auto_generated|divider|divider|StageOut[60]~3_combout\)) ) + ( VCC ) + ( \convert_binary|Mod1|auto_generated|divider|divider|op_9~10\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000001111001111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datab => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datac => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[60]~3_combout\,
	datad => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_8~9_sumout\,
	cin => \convert_binary|Mod1|auto_generated|divider|divider|op_9~10\,
	sumout => \convert_binary|Mod1|auto_generated|divider|divider|op_9~13_sumout\,
	cout => \convert_binary|Mod1|auto_generated|divider|divider|op_9~14\);

\convert_binary|Mod1|auto_generated|divider|divider|op_9~41\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|op_9~41_sumout\ = SUM(( (!\convert_binary|Mod1|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod1|auto_generated|divider|divider|op_8~37_sumout\))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Mod1|auto_generated|divider|divider|StageOut[61]~33_combout\)) ) + ( GND ) + ( \convert_binary|Mod1|auto_generated|divider|divider|op_9~14\ ))
-- \convert_binary|Mod1|auto_generated|divider|divider|op_9~42\ = CARRY(( (!\convert_binary|Mod1|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod1|auto_generated|divider|divider|op_8~37_sumout\))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Mod1|auto_generated|divider|divider|StageOut[61]~33_combout\)) ) + ( GND ) + ( \convert_binary|Mod1|auto_generated|divider|divider|op_9~14\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datac => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[61]~33_combout\,
	datad => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_8~37_sumout\,
	cin => \convert_binary|Mod1|auto_generated|divider|divider|op_9~14\,
	sumout => \convert_binary|Mod1|auto_generated|divider|divider|op_9~41_sumout\,
	cout => \convert_binary|Mod1|auto_generated|divider|divider|op_9~42\);

\convert_binary|Mod1|auto_generated|divider|divider|op_9~37\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|op_9~37_sumout\ = SUM(( (!\convert_binary|Mod1|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod1|auto_generated|divider|divider|op_8~33_sumout\)))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod1|auto_generated|divider|divider|StageOut[62]~29_combout\)) # (\convert_binary|Mod1|auto_generated|divider|divider|StageOut[62]~26_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod1|auto_generated|divider|divider|op_9~42\ ))
-- \convert_binary|Mod1|auto_generated|divider|divider|op_9~38\ = CARRY(( (!\convert_binary|Mod1|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod1|auto_generated|divider|divider|op_8~33_sumout\)))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod1|auto_generated|divider|divider|StageOut[62]~29_combout\)) # (\convert_binary|Mod1|auto_generated|divider|divider|StageOut[62]~26_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod1|auto_generated|divider|divider|op_9~42\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[62]~26_combout\,
	datac => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_8~33_sumout\,
	datad => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[62]~29_combout\,
	cin => \convert_binary|Mod1|auto_generated|divider|divider|op_9~42\,
	sumout => \convert_binary|Mod1|auto_generated|divider|divider|op_9~37_sumout\,
	cout => \convert_binary|Mod1|auto_generated|divider|divider|op_9~38\);

\convert_binary|Mod1|auto_generated|divider|divider|op_9~33\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|op_9~33_sumout\ = SUM(( (!\convert_binary|Mod1|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod1|auto_generated|divider|divider|op_8~29_sumout\))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Mod1|auto_generated|divider|divider|StageOut[63]~24_combout\)) ) + ( VCC ) + ( \convert_binary|Mod1|auto_generated|divider|divider|op_9~38\ ))
-- \convert_binary|Mod1|auto_generated|divider|divider|op_9~34\ = CARRY(( (!\convert_binary|Mod1|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod1|auto_generated|divider|divider|op_8~29_sumout\))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Mod1|auto_generated|divider|divider|StageOut[63]~24_combout\)) ) + ( VCC ) + ( \convert_binary|Mod1|auto_generated|divider|divider|op_9~38\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datac => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[63]~24_combout\,
	datad => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_8~29_sumout\,
	cin => \convert_binary|Mod1|auto_generated|divider|divider|op_9~38\,
	sumout => \convert_binary|Mod1|auto_generated|divider|divider|op_9~33_sumout\,
	cout => \convert_binary|Mod1|auto_generated|divider|divider|op_9~34\);

\convert_binary|Mod1|auto_generated|divider|divider|op_9~29\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|op_9~29_sumout\ = SUM(( (!\convert_binary|Mod1|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod1|auto_generated|divider|divider|op_8~25_sumout\)))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod1|auto_generated|divider|divider|StageOut[64]~18_combout\)) # (\convert_binary|Mod1|auto_generated|divider|divider|StageOut[64]~16_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod1|auto_generated|divider|divider|op_9~34\ ))
-- \convert_binary|Mod1|auto_generated|divider|divider|op_9~30\ = CARRY(( (!\convert_binary|Mod1|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod1|auto_generated|divider|divider|op_8~25_sumout\)))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod1|auto_generated|divider|divider|StageOut[64]~18_combout\)) # (\convert_binary|Mod1|auto_generated|divider|divider|StageOut[64]~16_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod1|auto_generated|divider|divider|op_9~34\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[64]~16_combout\,
	datac => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_8~25_sumout\,
	datad => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[64]~18_combout\,
	cin => \convert_binary|Mod1|auto_generated|divider|divider|op_9~34\,
	sumout => \convert_binary|Mod1|auto_generated|divider|divider|op_9~29_sumout\,
	cout => \convert_binary|Mod1|auto_generated|divider|divider|op_9~30\);

\convert_binary|Mod1|auto_generated|divider|divider|op_9~25\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|op_9~25_sumout\ = SUM(( (!\convert_binary|Mod1|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod1|auto_generated|divider|divider|op_8~21_sumout\))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Mod1|auto_generated|divider|divider|StageOut[65]~14_combout\)) ) + ( VCC ) + ( \convert_binary|Mod1|auto_generated|divider|divider|op_9~30\ ))
-- \convert_binary|Mod1|auto_generated|divider|divider|op_9~26\ = CARRY(( (!\convert_binary|Mod1|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod1|auto_generated|divider|divider|op_8~21_sumout\))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Mod1|auto_generated|divider|divider|StageOut[65]~14_combout\)) ) + ( VCC ) + ( \convert_binary|Mod1|auto_generated|divider|divider|op_9~30\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datac => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[65]~14_combout\,
	datad => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_8~21_sumout\,
	cin => \convert_binary|Mod1|auto_generated|divider|divider|op_9~30\,
	sumout => \convert_binary|Mod1|auto_generated|divider|divider|op_9~25_sumout\,
	cout => \convert_binary|Mod1|auto_generated|divider|divider|op_9~26\);

\convert_binary|Mod1|auto_generated|divider|divider|op_9~17\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|op_9~17_sumout\ = SUM(( (!\convert_binary|Mod1|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod1|auto_generated|divider|divider|op_8~13_sumout\)))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod1|auto_generated|divider|divider|StageOut[66]~9_combout\)) # (\convert_binary|Mod1|auto_generated|divider|divider|StageOut[66]~6_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod1|auto_generated|divider|divider|op_9~26\ ))
-- \convert_binary|Mod1|auto_generated|divider|divider|op_9~18\ = CARRY(( (!\convert_binary|Mod1|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod1|auto_generated|divider|divider|op_8~13_sumout\)))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod1|auto_generated|divider|divider|StageOut[66]~9_combout\)) # (\convert_binary|Mod1|auto_generated|divider|divider|StageOut[66]~6_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod1|auto_generated|divider|divider|op_9~26\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[66]~6_combout\,
	datac => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_8~13_sumout\,
	datad => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[66]~9_combout\,
	cin => \convert_binary|Mod1|auto_generated|divider|divider|op_9~26\,
	sumout => \convert_binary|Mod1|auto_generated|divider|divider|op_9~17_sumout\,
	cout => \convert_binary|Mod1|auto_generated|divider|divider|op_9~18\);

\convert_binary|Mod1|auto_generated|divider|divider|op_9~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|op_9~1_sumout\ = SUM(( VCC ) + ( GND ) + ( \convert_binary|Mod1|auto_generated|divider|divider|op_9~18\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Mod1|auto_generated|divider|divider|op_9~18\,
	sumout => \convert_binary|Mod1|auto_generated|divider|divider|op_9~1_sumout\);

\convert_binary|Mod1|auto_generated|divider|divider|StageOut[77]~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|StageOut[77]~5_combout\ = (!\convert_binary|Mod1|auto_generated|divider|divider|op_8~1_sumout\ & \convert_binary|Mod1|auto_generated|divider|divider|op_8~13_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_8~13_sumout\,
	combout => \convert_binary|Mod1|auto_generated|divider|divider|StageOut[77]~5_combout\);

\convert_binary|Mod1|auto_generated|divider|divider|StageOut[77]~10\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|StageOut[77]~10_combout\ = (\convert_binary|Mod1|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod1|auto_generated|divider|divider|StageOut[66]~9_combout\) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|StageOut[66]~6_combout\)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001010100010101000101010001010100010101000101010001010100010101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[66]~6_combout\,
	datac => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[66]~9_combout\,
	combout => \convert_binary|Mod1|auto_generated|divider|divider|StageOut[77]~10_combout\);

\convert_binary|Mod1|auto_generated|divider|divider|StageOut[76]~11\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|StageOut[76]~11_combout\ = (!\convert_binary|Mod1|auto_generated|divider|divider|op_8~1_sumout\ & \convert_binary|Mod1|auto_generated|divider|divider|op_8~21_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_8~21_sumout\,
	combout => \convert_binary|Mod1|auto_generated|divider|divider|StageOut[76]~11_combout\);

\convert_binary|Mod1|auto_generated|divider|divider|StageOut[76]~15\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|StageOut[76]~15_combout\ = (\convert_binary|Mod1|auto_generated|divider|divider|op_8~1_sumout\ & \convert_binary|Mod1|auto_generated|divider|divider|StageOut[65]~14_combout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[65]~14_combout\,
	combout => \convert_binary|Mod1|auto_generated|divider|divider|StageOut[76]~15_combout\);

\convert_binary|Mod1|auto_generated|divider|divider|StageOut[75]~19\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|StageOut[75]~19_combout\ = (!\convert_binary|Mod1|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod1|auto_generated|divider|divider|op_8~25_sumout\)))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod1|auto_generated|divider|divider|StageOut[64]~18_combout\)) # (\convert_binary|Mod1|auto_generated|divider|divider|StageOut[64]~16_combout\)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001101101011111000110110101111100011011010111110001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[64]~16_combout\,
	datac => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_8~25_sumout\,
	datad => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[64]~18_combout\,
	combout => \convert_binary|Mod1|auto_generated|divider|divider|StageOut[75]~19_combout\);

\convert_binary|Mod1|auto_generated|divider|divider|StageOut[74]~20\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|StageOut[74]~20_combout\ = (!\convert_binary|Mod1|auto_generated|divider|divider|op_8~1_sumout\ & \convert_binary|Mod1|auto_generated|divider|divider|op_8~29_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_8~29_sumout\,
	combout => \convert_binary|Mod1|auto_generated|divider|divider|StageOut[74]~20_combout\);

\convert_binary|Mod1|auto_generated|divider|divider|StageOut[74]~25\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|StageOut[74]~25_combout\ = (\convert_binary|Mod1|auto_generated|divider|divider|op_8~1_sumout\ & \convert_binary|Mod1|auto_generated|divider|divider|StageOut[63]~24_combout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[63]~24_combout\,
	combout => \convert_binary|Mod1|auto_generated|divider|divider|StageOut[74]~25_combout\);

\convert_binary|Mod1|auto_generated|divider|divider|StageOut[73]~30\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|StageOut[73]~30_combout\ = (!\convert_binary|Mod1|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod1|auto_generated|divider|divider|op_8~33_sumout\)))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod1|auto_generated|divider|divider|StageOut[62]~29_combout\)) # (\convert_binary|Mod1|auto_generated|divider|divider|StageOut[62]~26_combout\)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001101101011111000110110101111100011011010111110001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[62]~26_combout\,
	datac => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_8~33_sumout\,
	datad => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[62]~29_combout\,
	combout => \convert_binary|Mod1|auto_generated|divider|divider|StageOut[73]~30_combout\);

\convert_binary|Mod1|auto_generated|divider|divider|StageOut[72]~31\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|StageOut[72]~31_combout\ = (!\convert_binary|Mod1|auto_generated|divider|divider|op_8~1_sumout\ & \convert_binary|Mod1|auto_generated|divider|divider|op_8~37_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_8~37_sumout\,
	combout => \convert_binary|Mod1|auto_generated|divider|divider|StageOut[72]~31_combout\);

\convert_binary|Mod1|auto_generated|divider|divider|StageOut[72]~34\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|StageOut[72]~34_combout\ = (\convert_binary|Mod1|auto_generated|divider|divider|op_8~1_sumout\ & \convert_binary|Mod1|auto_generated|divider|divider|StageOut[61]~33_combout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[61]~33_combout\,
	combout => \convert_binary|Mod1|auto_generated|divider|divider|StageOut[72]~34_combout\);

\convert_binary|Mod1|auto_generated|divider|divider|StageOut[71]~4\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|StageOut[71]~4_combout\ = (!\convert_binary|Mod1|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod1|auto_generated|divider|divider|op_8~9_sumout\))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Mod1|auto_generated|divider|divider|StageOut[60]~3_combout\))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001101100011011000110110001101100011011000110110001101100011011",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[60]~3_combout\,
	datac => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_8~9_sumout\,
	combout => \convert_binary|Mod1|auto_generated|divider|divider|StageOut[71]~4_combout\);

\convert_binary|Mod1|auto_generated|divider|divider|StageOut[70]~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|StageOut[70]~1_combout\ = (!\convert_binary|Mod1|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod1|auto_generated|divider|divider|op_8~5_sumout\))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_8~1_sumout\ & (!\convert_binary|Div0|auto_generated|divider|divider|op_8~1_sumout\))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010111000101110001011100010111000101110001011100010111000101110",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datac => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_8~5_sumout\,
	combout => \convert_binary|Mod1|auto_generated|divider|divider|StageOut[70]~1_combout\);

\convert_binary|Mod1|auto_generated|divider|divider|op_10~26\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|op_10~26_cout\ = CARRY(( VCC ) + ( VCC ) + ( !VCC ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => GND,
	cout => \convert_binary|Mod1|auto_generated|divider|divider|op_10~26_cout\);

\convert_binary|Mod1|auto_generated|divider|divider|op_10~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|op_10~5_sumout\ = SUM(( !\convert_binary|Div0|auto_generated|divider|divider|op_10~1_sumout\ ) + ( VCC ) + ( \convert_binary|Mod1|auto_generated|divider|divider|op_10~26_cout\ ))
-- \convert_binary|Mod1|auto_generated|divider|divider|op_10~6\ = CARRY(( !\convert_binary|Div0|auto_generated|divider|divider|op_10~1_sumout\ ) + ( VCC ) + ( \convert_binary|Mod1|auto_generated|divider|divider|op_10~26_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111100000000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_10~1_sumout\,
	cin => \convert_binary|Mod1|auto_generated|divider|divider|op_10~26_cout\,
	sumout => \convert_binary|Mod1|auto_generated|divider|divider|op_10~5_sumout\,
	cout => \convert_binary|Mod1|auto_generated|divider|divider|op_10~6\);

\convert_binary|Mod1|auto_generated|divider|divider|op_10~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|op_10~9_sumout\ = SUM(( (!\convert_binary|Mod1|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Mod1|auto_generated|divider|divider|op_9~5_sumout\))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_9~1_sumout\ & (!\convert_binary|Div0|auto_generated|divider|divider|op_9~1_sumout\)) ) + ( GND ) + ( \convert_binary|Mod1|auto_generated|divider|divider|op_10~6\ ))
-- \convert_binary|Mod1|auto_generated|divider|divider|op_10~10\ = CARRY(( (!\convert_binary|Mod1|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Mod1|auto_generated|divider|divider|op_9~5_sumout\))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_9~1_sumout\ & (!\convert_binary|Div0|auto_generated|divider|divider|op_9~1_sumout\)) ) + ( GND ) + ( \convert_binary|Mod1|auto_generated|divider|divider|op_10~6\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000010001011101110",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datab => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datad => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_9~5_sumout\,
	cin => \convert_binary|Mod1|auto_generated|divider|divider|op_10~6\,
	sumout => \convert_binary|Mod1|auto_generated|divider|divider|op_10~9_sumout\,
	cout => \convert_binary|Mod1|auto_generated|divider|divider|op_10~10\);

\convert_binary|Mod1|auto_generated|divider|divider|op_10~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|op_10~13_sumout\ = SUM(( (!\convert_binary|Mod1|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Mod1|auto_generated|divider|divider|op_9~9_sumout\))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_9~1_sumout\ & (\convert_binary|Mod1|auto_generated|divider|divider|StageOut[70]~1_combout\)) ) + ( VCC ) + ( \convert_binary|Mod1|auto_generated|divider|divider|op_10~10\ ))
-- \convert_binary|Mod1|auto_generated|divider|divider|op_10~14\ = CARRY(( (!\convert_binary|Mod1|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Mod1|auto_generated|divider|divider|op_9~9_sumout\))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_9~1_sumout\ & (\convert_binary|Mod1|auto_generated|divider|divider|StageOut[70]~1_combout\)) ) + ( VCC ) + ( \convert_binary|Mod1|auto_generated|divider|divider|op_10~10\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000001111001111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datab => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datac => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[70]~1_combout\,
	datad => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_9~9_sumout\,
	cin => \convert_binary|Mod1|auto_generated|divider|divider|op_10~10\,
	sumout => \convert_binary|Mod1|auto_generated|divider|divider|op_10~13_sumout\,
	cout => \convert_binary|Mod1|auto_generated|divider|divider|op_10~14\);

\convert_binary|Mod1|auto_generated|divider|divider|op_10~17\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|op_10~17_sumout\ = SUM(( (!\convert_binary|Mod1|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Mod1|auto_generated|divider|divider|op_9~13_sumout\))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_9~1_sumout\ & (\convert_binary|Mod1|auto_generated|divider|divider|StageOut[71]~4_combout\)) ) + ( GND ) + ( \convert_binary|Mod1|auto_generated|divider|divider|op_10~14\ ))
-- \convert_binary|Mod1|auto_generated|divider|divider|op_10~18\ = CARRY(( (!\convert_binary|Mod1|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Mod1|auto_generated|divider|divider|op_9~13_sumout\))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_9~1_sumout\ & (\convert_binary|Mod1|auto_generated|divider|divider|StageOut[71]~4_combout\)) ) + ( GND ) + ( \convert_binary|Mod1|auto_generated|divider|divider|op_10~14\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datac => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[71]~4_combout\,
	datad => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_9~13_sumout\,
	cin => \convert_binary|Mod1|auto_generated|divider|divider|op_10~14\,
	sumout => \convert_binary|Mod1|auto_generated|divider|divider|op_10~17_sumout\,
	cout => \convert_binary|Mod1|auto_generated|divider|divider|op_10~18\);

\convert_binary|Mod1|auto_generated|divider|divider|op_10~46\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|op_10~46_cout\ = CARRY(( (!\convert_binary|Mod1|auto_generated|divider|divider|op_9~1_sumout\ & (((\convert_binary|Mod1|auto_generated|divider|divider|op_9~41_sumout\)))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_9~1_sumout\ & (((\convert_binary|Mod1|auto_generated|divider|divider|StageOut[72]~34_combout\)) # (\convert_binary|Mod1|auto_generated|divider|divider|StageOut[72]~31_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod1|auto_generated|divider|divider|op_10~18\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datab => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[72]~31_combout\,
	datac => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_9~41_sumout\,
	datad => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[72]~34_combout\,
	cin => \convert_binary|Mod1|auto_generated|divider|divider|op_10~18\,
	cout => \convert_binary|Mod1|auto_generated|divider|divider|op_10~46_cout\);

\convert_binary|Mod1|auto_generated|divider|divider|op_10~42\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|op_10~42_cout\ = CARRY(( (!\convert_binary|Mod1|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Mod1|auto_generated|divider|divider|op_9~37_sumout\))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_9~1_sumout\ & (\convert_binary|Mod1|auto_generated|divider|divider|StageOut[73]~30_combout\)) ) + ( VCC ) + ( \convert_binary|Mod1|auto_generated|divider|divider|op_10~46_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datac => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[73]~30_combout\,
	datad => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_9~37_sumout\,
	cin => \convert_binary|Mod1|auto_generated|divider|divider|op_10~46_cout\,
	cout => \convert_binary|Mod1|auto_generated|divider|divider|op_10~42_cout\);

\convert_binary|Mod1|auto_generated|divider|divider|op_10~38\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|op_10~38_cout\ = CARRY(( (!\convert_binary|Mod1|auto_generated|divider|divider|op_9~1_sumout\ & (((\convert_binary|Mod1|auto_generated|divider|divider|op_9~33_sumout\)))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_9~1_sumout\ & (((\convert_binary|Mod1|auto_generated|divider|divider|StageOut[74]~25_combout\)) # (\convert_binary|Mod1|auto_generated|divider|divider|StageOut[74]~20_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod1|auto_generated|divider|divider|op_10~42_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datab => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[74]~20_combout\,
	datac => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_9~33_sumout\,
	datad => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[74]~25_combout\,
	cin => \convert_binary|Mod1|auto_generated|divider|divider|op_10~42_cout\,
	cout => \convert_binary|Mod1|auto_generated|divider|divider|op_10~38_cout\);

\convert_binary|Mod1|auto_generated|divider|divider|op_10~34\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|op_10~34_cout\ = CARRY(( (!\convert_binary|Mod1|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Mod1|auto_generated|divider|divider|op_9~29_sumout\))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_9~1_sumout\ & (\convert_binary|Mod1|auto_generated|divider|divider|StageOut[75]~19_combout\)) ) + ( VCC ) + ( \convert_binary|Mod1|auto_generated|divider|divider|op_10~38_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datac => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[75]~19_combout\,
	datad => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_9~29_sumout\,
	cin => \convert_binary|Mod1|auto_generated|divider|divider|op_10~38_cout\,
	cout => \convert_binary|Mod1|auto_generated|divider|divider|op_10~34_cout\);

\convert_binary|Mod1|auto_generated|divider|divider|op_10~30\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|op_10~30_cout\ = CARRY(( (!\convert_binary|Mod1|auto_generated|divider|divider|op_9~1_sumout\ & (((\convert_binary|Mod1|auto_generated|divider|divider|op_9~25_sumout\)))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_9~1_sumout\ & (((\convert_binary|Mod1|auto_generated|divider|divider|StageOut[76]~15_combout\)) # (\convert_binary|Mod1|auto_generated|divider|divider|StageOut[76]~11_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod1|auto_generated|divider|divider|op_10~34_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datab => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[76]~11_combout\,
	datac => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_9~25_sumout\,
	datad => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[76]~15_combout\,
	cin => \convert_binary|Mod1|auto_generated|divider|divider|op_10~34_cout\,
	cout => \convert_binary|Mod1|auto_generated|divider|divider|op_10~30_cout\);

\convert_binary|Mod1|auto_generated|divider|divider|op_10~22\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|op_10~22_cout\ = CARRY(( (!\convert_binary|Mod1|auto_generated|divider|divider|op_9~1_sumout\ & (((\convert_binary|Mod1|auto_generated|divider|divider|op_9~17_sumout\)))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_9~1_sumout\ & (((\convert_binary|Mod1|auto_generated|divider|divider|StageOut[77]~10_combout\)) # (\convert_binary|Mod1|auto_generated|divider|divider|StageOut[77]~5_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod1|auto_generated|divider|divider|op_10~30_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datab => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[77]~5_combout\,
	datac => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_9~17_sumout\,
	datad => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[77]~10_combout\,
	cin => \convert_binary|Mod1|auto_generated|divider|divider|op_10~30_cout\,
	cout => \convert_binary|Mod1|auto_generated|divider|divider|op_10~22_cout\);

\convert_binary|Mod1|auto_generated|divider|divider|op_10~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|op_10~1_sumout\ = SUM(( VCC ) + ( GND ) + ( \convert_binary|Mod1|auto_generated|divider|divider|op_10~22_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Mod1|auto_generated|divider|divider|op_10~22_cout\,
	sumout => \convert_binary|Mod1|auto_generated|divider|divider|op_10~1_sumout\);

\convert_binary|Mod1|auto_generated|divider|divider|StageOut[90]~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|StageOut[90]~0_combout\ = (!\convert_binary|Mod1|auto_generated|divider|divider|op_10~1_sumout\ & ((\convert_binary|Mod1|auto_generated|divider|divider|op_10~5_sumout\))) # 
-- (\convert_binary|Mod1|auto_generated|divider|divider|op_10~1_sumout\ & (!\convert_binary|Div0|auto_generated|divider|divider|op_10~1_sumout\))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010111000101110001011100010111000101110001011100010111000101110",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_10~1_sumout\,
	datab => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_10~1_sumout\,
	datac => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_10~5_sumout\,
	combout => \convert_binary|Mod1|auto_generated|divider|divider|StageOut[90]~0_combout\);

\convert_binary|int_data_2[0]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \convert_binary|Mod1|auto_generated|divider|divider|StageOut[90]~0_combout\,
	clrn => \RST_main~input_o\,
	sclr => \convert_binary|int_r_2[2]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \convert_binary|int_data_2\(0));

\convert_binary|int_data_2~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|int_data_2~0_combout\ = ( \convert_binary|Mod1|auto_generated|divider|divider|op_10~1_sumout\ & ( \convert_binary|Mod1|auto_generated|divider|divider|op_10~9_sumout\ & ( ((!\convert_binary|Mod1|auto_generated|divider|divider|op_9~1_sumout\ 
-- & ((\convert_binary|Mod1|auto_generated|divider|divider|op_9~5_sumout\))) # (\convert_binary|Mod1|auto_generated|divider|divider|op_9~1_sumout\ & (!\convert_binary|Div0|auto_generated|divider|divider|op_9~1_sumout\))) # 
-- (\convert_binary|int_r_2[2]~0_combout\) ) ) ) # ( !\convert_binary|Mod1|auto_generated|divider|divider|op_10~1_sumout\ & ( \convert_binary|Mod1|auto_generated|divider|divider|op_10~9_sumout\ ) ) # ( 
-- \convert_binary|Mod1|auto_generated|divider|divider|op_10~1_sumout\ & ( !\convert_binary|Mod1|auto_generated|divider|divider|op_10~9_sumout\ & ( ((!\convert_binary|Mod1|auto_generated|divider|divider|op_9~1_sumout\ & 
-- ((\convert_binary|Mod1|auto_generated|divider|divider|op_9~5_sumout\))) # (\convert_binary|Mod1|auto_generated|divider|divider|op_9~1_sumout\ & (!\convert_binary|Div0|auto_generated|divider|divider|op_9~1_sumout\))) # 
-- (\convert_binary|int_r_2[2]~0_combout\) ) ) ) # ( !\convert_binary|Mod1|auto_generated|divider|divider|op_10~1_sumout\ & ( !\convert_binary|Mod1|auto_generated|divider|divider|op_10~9_sumout\ & ( \convert_binary|int_r_2[2]~0_combout\ ) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0101010101010101010111011111110111111111111111110101110111111101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|ALT_INV_int_r_2[2]~0_combout\,
	datab => \convert_binary|Div0|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datac => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datad => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_9~5_sumout\,
	datae => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_10~1_sumout\,
	dataf => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_10~9_sumout\,
	combout => \convert_binary|int_data_2~0_combout\);

\convert_binary|int_data_2[1]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \convert_binary|int_data_2~0_combout\,
	clrn => \RST_main~input_o\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \convert_binary|int_data_2\(1));

\convert_binary|Mod1|auto_generated|divider|divider|StageOut[92]~2\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod1|auto_generated|divider|divider|StageOut[92]~2_combout\ = ( \convert_binary|Mod1|auto_generated|divider|divider|op_10~13_sumout\ & ( (!\convert_binary|Mod1|auto_generated|divider|divider|op_10~1_sumout\) # 
-- ((!\convert_binary|Mod1|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Mod1|auto_generated|divider|divider|op_9~9_sumout\))) # (\convert_binary|Mod1|auto_generated|divider|divider|op_9~1_sumout\ & 
-- (\convert_binary|Mod1|auto_generated|divider|divider|StageOut[70]~1_combout\))) ) ) # ( !\convert_binary|Mod1|auto_generated|divider|divider|op_10~13_sumout\ & ( (\convert_binary|Mod1|auto_generated|divider|divider|op_10~1_sumout\ & 
-- ((!\convert_binary|Mod1|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Mod1|auto_generated|divider|divider|op_9~9_sumout\))) # (\convert_binary|Mod1|auto_generated|divider|divider|op_9~1_sumout\ & 
-- (\convert_binary|Mod1|auto_generated|divider|divider|StageOut[70]~1_combout\)))) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000011011111111110001101100000000000110111111111100011011",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datab => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[70]~1_combout\,
	datac => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_9~9_sumout\,
	datad => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_10~1_sumout\,
	datae => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_10~13_sumout\,
	combout => \convert_binary|Mod1|auto_generated|divider|divider|StageOut[92]~2_combout\);

\convert_binary|int_data_2[2]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \convert_binary|Mod1|auto_generated|divider|divider|StageOut[92]~2_combout\,
	clrn => \RST_main~input_o\,
	sclr => \convert_binary|int_r_2[2]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \convert_binary|int_data_2\(2));

\convert_binary|int_data_2~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|int_data_2~1_combout\ = ( \convert_binary|Mod1|auto_generated|divider|divider|op_10~1_sumout\ & ( \convert_binary|Mod1|auto_generated|divider|divider|op_10~17_sumout\ & ( 
-- ((!\convert_binary|Mod1|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Mod1|auto_generated|divider|divider|op_9~13_sumout\))) # (\convert_binary|Mod1|auto_generated|divider|divider|op_9~1_sumout\ & 
-- (\convert_binary|Mod1|auto_generated|divider|divider|StageOut[71]~4_combout\))) # (\convert_binary|int_r_2[2]~0_combout\) ) ) ) # ( !\convert_binary|Mod1|auto_generated|divider|divider|op_10~1_sumout\ & ( 
-- \convert_binary|Mod1|auto_generated|divider|divider|op_10~17_sumout\ ) ) # ( \convert_binary|Mod1|auto_generated|divider|divider|op_10~1_sumout\ & ( !\convert_binary|Mod1|auto_generated|divider|divider|op_10~17_sumout\ & ( 
-- ((!\convert_binary|Mod1|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Mod1|auto_generated|divider|divider|op_9~13_sumout\))) # (\convert_binary|Mod1|auto_generated|divider|divider|op_9~1_sumout\ & 
-- (\convert_binary|Mod1|auto_generated|divider|divider|StageOut[71]~4_combout\))) # (\convert_binary|int_r_2[2]~0_combout\) ) ) ) # ( !\convert_binary|Mod1|auto_generated|divider|divider|op_10~1_sumout\ & ( 
-- !\convert_binary|Mod1|auto_generated|divider|divider|op_10~17_sumout\ & ( \convert_binary|int_r_2[2]~0_combout\ ) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0101010101010101010101111101111111111111111111110101011111011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|ALT_INV_int_r_2[2]~0_combout\,
	datab => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datac => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_StageOut[71]~4_combout\,
	datad => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_9~13_sumout\,
	datae => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_10~1_sumout\,
	dataf => \convert_binary|Mod1|auto_generated|divider|divider|ALT_INV_op_10~17_sumout\,
	combout => \convert_binary|int_data_2~1_combout\);

\convert_binary|int_data_2[3]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \convert_binary|int_data_2~1_combout\,
	clrn => \RST_main~input_o\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \convert_binary|int_data_2\(3));

\seven_seg_display_2|Mux6~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \seven_seg_display_2|Mux6~0_combout\ = (!\convert_binary|int_data_2\(1) & (!\convert_binary|int_data_2\(3) & (!\convert_binary|int_data_2\(0) $ (!\convert_binary|int_data_2\(2)))))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0100100000000000010010000000000001001000000000000100100000000000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|ALT_INV_int_data_2\(0),
	datab => \convert_binary|ALT_INV_int_data_2\(1),
	datac => \convert_binary|ALT_INV_int_data_2\(2),
	datad => \convert_binary|ALT_INV_int_data_2\(3),
	combout => \seven_seg_display_2|Mux6~0_combout\);

\seven_seg_display_2|seven_seg[0]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \seven_seg_display_2|Mux6~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \seven_seg_display_2|seven_seg\(0));

\seven_seg_display_2|Mux5~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \seven_seg_display_2|Mux5~0_combout\ = (!\convert_binary|int_data_2\(2) & (((\convert_binary|int_data_2\(1) & \convert_binary|int_data_2\(3))))) # (\convert_binary|int_data_2\(2) & ((!\convert_binary|int_data_2\(0) $ (!\convert_binary|int_data_2\(1))) # 
-- (\convert_binary|int_data_2\(3))))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000011000111111000001100011111100000110001111110000011000111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|ALT_INV_int_data_2\(0),
	datab => \convert_binary|ALT_INV_int_data_2\(1),
	datac => \convert_binary|ALT_INV_int_data_2\(2),
	datad => \convert_binary|ALT_INV_int_data_2\(3),
	combout => \seven_seg_display_2|Mux5~0_combout\);

\seven_seg_display_2|seven_seg[1]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \seven_seg_display_2|Mux5~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \seven_seg_display_2|seven_seg\(1));

\seven_seg_display_2|Mux4~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \seven_seg_display_2|Mux4~0_combout\ = (!\convert_binary|int_data_2\(2) & (\convert_binary|int_data_2\(1) & ((!\convert_binary|int_data_2\(0)) # (\convert_binary|int_data_2\(3))))) # (\convert_binary|int_data_2\(2) & (((\convert_binary|int_data_2\(3)))))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010000000111111001000000011111100100000001111110010000000111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|ALT_INV_int_data_2\(0),
	datab => \convert_binary|ALT_INV_int_data_2\(1),
	datac => \convert_binary|ALT_INV_int_data_2\(2),
	datad => \convert_binary|ALT_INV_int_data_2\(3),
	combout => \seven_seg_display_2|Mux4~0_combout\);

\seven_seg_display_2|seven_seg[2]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \seven_seg_display_2|Mux4~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \seven_seg_display_2|seven_seg\(2));

\seven_seg_display_2|Mux3~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \seven_seg_display_2|Mux3~0_combout\ = (!\convert_binary|int_data_2\(3) & ((!\convert_binary|int_data_2\(0) & (!\convert_binary|int_data_2\(1) & \convert_binary|int_data_2\(2))) # (\convert_binary|int_data_2\(0) & (!\convert_binary|int_data_2\(1) $ 
-- (\convert_binary|int_data_2\(2))))))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0100100100000000010010010000000001001001000000000100100100000000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|ALT_INV_int_data_2\(0),
	datab => \convert_binary|ALT_INV_int_data_2\(1),
	datac => \convert_binary|ALT_INV_int_data_2\(2),
	datad => \convert_binary|ALT_INV_int_data_2\(3),
	combout => \seven_seg_display_2|Mux3~0_combout\);

\seven_seg_display_2|seven_seg[3]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \seven_seg_display_2|Mux3~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \seven_seg_display_2|seven_seg\(3));

\seven_seg_display_2|Mux2~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \seven_seg_display_2|Mux2~0_combout\ = (!\convert_binary|int_data_2\(1) & ((!\convert_binary|int_data_2\(2) & (\convert_binary|int_data_2\(0))) # (\convert_binary|int_data_2\(2) & ((!\convert_binary|int_data_2\(3)))))) # (\convert_binary|int_data_2\(1) & 
-- (\convert_binary|int_data_2\(0) & ((!\convert_binary|int_data_2\(3)))))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0101110101000000010111010100000001011101010000000101110101000000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|ALT_INV_int_data_2\(0),
	datab => \convert_binary|ALT_INV_int_data_2\(1),
	datac => \convert_binary|ALT_INV_int_data_2\(2),
	datad => \convert_binary|ALT_INV_int_data_2\(3),
	combout => \seven_seg_display_2|Mux2~0_combout\);

\seven_seg_display_2|seven_seg[4]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \seven_seg_display_2|Mux2~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \seven_seg_display_2|seven_seg\(4));

\seven_seg_display_2|Mux1~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \seven_seg_display_2|Mux1~0_combout\ = (!\convert_binary|int_data_2\(3) & ((!\convert_binary|int_data_2\(0) & (\convert_binary|int_data_2\(1) & !\convert_binary|int_data_2\(2))) # (\convert_binary|int_data_2\(0) & ((!\convert_binary|int_data_2\(2)) # 
-- (\convert_binary|int_data_2\(1))))))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0111000100000000011100010000000001110001000000000111000100000000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|ALT_INV_int_data_2\(0),
	datab => \convert_binary|ALT_INV_int_data_2\(1),
	datac => \convert_binary|ALT_INV_int_data_2\(2),
	datad => \convert_binary|ALT_INV_int_data_2\(3),
	combout => \seven_seg_display_2|Mux1~0_combout\);

\seven_seg_display_2|seven_seg[5]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \seven_seg_display_2|Mux1~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \seven_seg_display_2|seven_seg\(5));

\seven_seg_display_2|Mux0~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \seven_seg_display_2|Mux0~0_combout\ = (!\convert_binary|int_data_2\(3) & ((!\convert_binary|int_data_2\(1) & ((!\convert_binary|int_data_2\(2)))) # (\convert_binary|int_data_2\(1) & (\convert_binary|int_data_2\(0) & \convert_binary|int_data_2\(2)))))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "1100000100000000110000010000000011000001000000001100000100000000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|ALT_INV_int_data_2\(0),
	datab => \convert_binary|ALT_INV_int_data_2\(1),
	datac => \convert_binary|ALT_INV_int_data_2\(2),
	datad => \convert_binary|ALT_INV_int_data_2\(3),
	combout => \seven_seg_display_2|Mux0~0_combout\);

\seven_seg_display_2|seven_seg[6]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \seven_seg_display_2|Mux0~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \seven_seg_display_2|seven_seg\(6));

\convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[0]~29\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[0]~29_sumout\ = SUM(( \Result[3]~reg0_q\ ) + ( !VCC ) + ( !VCC ))
-- \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[0]~30\ = CARRY(( \Result[3]~reg0_q\ ) + ( !VCC ) + ( !VCC ))
-- \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[0]~31\ = SHARE(VCC)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	datad => \ALT_INV_Result[3]~reg0_q\,
	cin => GND,
	sharein => GND,
	sumout => \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[0]~29_sumout\,
	cout => \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[0]~30\,
	shareout => \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[0]~31\);

\convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[1]~25\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[1]~25_sumout\ = SUM(( !\Result[4]~reg0_q\ ) + ( \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[0]~31\ ) + ( 
-- \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[0]~30\ ))
-- \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[1]~26\ = CARRY(( !\Result[4]~reg0_q\ ) + ( \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[0]~31\ ) + ( 
-- \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[0]~30\ ))
-- \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[1]~27\ = SHARE(\Result[4]~reg0_q\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000001111111100000000000000001111111100000000",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	datad => \ALT_INV_Result[4]~reg0_q\,
	cin => \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[0]~30\,
	sharein => \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[0]~31\,
	sumout => \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[1]~25_sumout\,
	cout => \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[1]~26\,
	shareout => \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[1]~27\);

\convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[2]~21\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[2]~21_sumout\ = SUM(( \Result[5]~reg0_q\ ) + ( \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[1]~27\ ) + ( 
-- \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[1]~26\ ))
-- \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[2]~22\ = CARRY(( \Result[5]~reg0_q\ ) + ( \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[1]~27\ ) + ( 
-- \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[1]~26\ ))
-- \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[2]~23\ = SHARE(GND)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000011111111",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	datad => \ALT_INV_Result[5]~reg0_q\,
	cin => \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[1]~26\,
	sharein => \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[1]~27\,
	sumout => \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[2]~21_sumout\,
	cout => \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[2]~22\,
	shareout => \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[2]~23\);

\convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[3]~17\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[3]~17_sumout\ = SUM(( !\Result[6]~reg0_q\ ) + ( \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[2]~23\ ) + ( 
-- \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[2]~22\ ))
-- \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[3]~18\ = CARRY(( !\Result[6]~reg0_q\ ) + ( \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[2]~23\ ) + ( 
-- \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[2]~22\ ))
-- \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[3]~19\ = SHARE(\Result[6]~reg0_q\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000001111111100000000000000001111111100000000",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	datad => \ALT_INV_Result[6]~reg0_q\,
	cin => \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[2]~22\,
	sharein => \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[2]~23\,
	sumout => \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[3]~17_sumout\,
	cout => \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[3]~18\,
	shareout => \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[3]~19\);

\convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[4]~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[4]~9_sumout\ = SUM(( !\Result[7]~reg0_q\ ) + ( \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[3]~19\ ) + ( 
-- \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[3]~18\ ))
-- \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[4]~10\ = CARRY(( !\Result[7]~reg0_q\ ) + ( \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[3]~19\ ) + ( 
-- \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[3]~18\ ))
-- \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[4]~11\ = SHARE(\Result[7]~reg0_q\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000001111111100000000000000001111111100000000",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	datad => \ALT_INV_Result[7]~reg0_q\,
	cin => \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[3]~18\,
	sharein => \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[3]~19\,
	sumout => \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[4]~9_sumout\,
	cout => \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[4]~10\,
	shareout => \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[4]~11\);

\convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[5]~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[5]~13_sumout\ = SUM(( \Result[8]~reg0_q\ ) + ( \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[4]~11\ ) + ( 
-- \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[4]~10\ ))
-- \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[5]~14\ = CARRY(( \Result[8]~reg0_q\ ) + ( \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[4]~11\ ) + ( 
-- \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[4]~10\ ))
-- \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[5]~15\ = SHARE(GND)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000011111111",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	datad => \ALT_INV_Result[8]~reg0_q\,
	cin => \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[4]~10\,
	sharein => \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[4]~11\,
	sumout => \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[5]~13_sumout\,
	cout => \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[5]~14\,
	shareout => \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[5]~15\);

\convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[6]~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[6]~5_sumout\ = SUM(( \Result[9]~reg0_q\ ) + ( \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[5]~15\ ) + ( 
-- \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[5]~14\ ))
-- \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[6]~6\ = CARRY(( \Result[9]~reg0_q\ ) + ( \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[5]~15\ ) + ( 
-- \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[5]~14\ ))
-- \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[6]~7\ = SHARE(GND)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000011111111",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	datad => \ALT_INV_Result[9]~reg0_q\,
	cin => \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[5]~14\,
	sharein => \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[5]~15\,
	sumout => \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[6]~5_sumout\,
	cout => \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[6]~6\,
	shareout => \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[6]~7\);

\convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[7]~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\ = SUM(( VCC ) + ( \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[6]~7\ ) + ( 
-- \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[6]~6\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[6]~6\,
	sharein => \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[6]~7\,
	sumout => \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\);

\convert_binary|Div1|auto_generated|divider|divider|StageOut[53]~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div1|auto_generated|divider|divider|StageOut[53]~5_combout\ = (!\convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\ & \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[5]~13_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[7]~1_sumout\,
	datab => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[5]~13_sumout\,
	combout => \convert_binary|Div1|auto_generated|divider|divider|StageOut[53]~5_combout\);

\convert_binary|Div1|auto_generated|divider|divider|StageOut[53]~4\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div1|auto_generated|divider|divider|StageOut[53]~4_combout\ = (\Result[8]~reg0_q\ & \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_Result[8]~reg0_q\,
	datab => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[7]~1_sumout\,
	combout => \convert_binary|Div1|auto_generated|divider|divider|StageOut[53]~4_combout\);

\convert_binary|Div1|auto_generated|divider|divider|StageOut[51]~7\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div1|auto_generated|divider|divider|StageOut[51]~7_combout\ = (!\convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\ & \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[3]~17_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[7]~1_sumout\,
	datab => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[3]~17_sumout\,
	combout => \convert_binary|Div1|auto_generated|divider|divider|StageOut[51]~7_combout\);

\convert_binary|Div1|auto_generated|divider|divider|StageOut[51]~8\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div1|auto_generated|divider|divider|StageOut[51]~8_combout\ = (\Result[6]~reg0_q\ & \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_Result[6]~reg0_q\,
	datab => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[7]~1_sumout\,
	combout => \convert_binary|Div1|auto_generated|divider|divider|StageOut[51]~8_combout\);

\convert_binary|Div1|auto_generated|divider|divider|StageOut[49]~15\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div1|auto_generated|divider|divider|StageOut[49]~15_combout\ = (!\convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\ & 
-- \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[1]~25_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[7]~1_sumout\,
	datab => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[1]~25_sumout\,
	combout => \convert_binary|Div1|auto_generated|divider|divider|StageOut[49]~15_combout\);

\convert_binary|Div1|auto_generated|divider|divider|StageOut[49]~16\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div1|auto_generated|divider|divider|StageOut[49]~16_combout\ = (\Result[4]~reg0_q\ & \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_Result[4]~reg0_q\,
	datab => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[7]~1_sumout\,
	combout => \convert_binary|Div1|auto_generated|divider|divider|StageOut[49]~16_combout\);

\convert_binary|Div1|auto_generated|divider|divider|op_8~38\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div1|auto_generated|divider|divider|op_8~38_cout\ = CARRY(( VCC ) + ( VCC ) + ( !VCC ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => GND,
	cout => \convert_binary|Div1|auto_generated|divider|divider|op_8~38_cout\);

\convert_binary|Div1|auto_generated|divider|divider|op_8~33\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div1|auto_generated|divider|divider|op_8~33_sumout\ = SUM(( \Result[2]~reg0_q\ ) + ( VCC ) + ( \convert_binary|Div1|auto_generated|divider|divider|op_8~38_cout\ ))
-- \convert_binary|Div1|auto_generated|divider|divider|op_8~34\ = CARRY(( \Result[2]~reg0_q\ ) + ( VCC ) + ( \convert_binary|Div1|auto_generated|divider|divider|op_8~38_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \ALT_INV_Result[2]~reg0_q\,
	cin => \convert_binary|Div1|auto_generated|divider|divider|op_8~38_cout\,
	sumout => \convert_binary|Div1|auto_generated|divider|divider|op_8~33_sumout\,
	cout => \convert_binary|Div1|auto_generated|divider|divider|op_8~34\);

\convert_binary|Div1|auto_generated|divider|divider|op_8~29\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div1|auto_generated|divider|divider|op_8~29_sumout\ = SUM(( (!\convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\ & 
-- ((\convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[0]~29_sumout\))) # (\convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\ & (\Result[3]~reg0_q\)) ) + ( VCC ) + ( 
-- \convert_binary|Div1|auto_generated|divider|divider|op_8~34\ ))
-- \convert_binary|Div1|auto_generated|divider|divider|op_8~30\ = CARRY(( (!\convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\ & ((\convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[0]~29_sumout\))) # 
-- (\convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\ & (\Result[3]~reg0_q\)) ) + ( VCC ) + ( \convert_binary|Div1|auto_generated|divider|divider|op_8~34\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000010111110101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_Result[3]~reg0_q\,
	datac => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[7]~1_sumout\,
	datad => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[0]~29_sumout\,
	cin => \convert_binary|Div1|auto_generated|divider|divider|op_8~34\,
	sumout => \convert_binary|Div1|auto_generated|divider|divider|op_8~29_sumout\,
	cout => \convert_binary|Div1|auto_generated|divider|divider|op_8~30\);

\convert_binary|Div1|auto_generated|divider|divider|op_8~25\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div1|auto_generated|divider|divider|op_8~25_sumout\ = SUM(( (\convert_binary|Div1|auto_generated|divider|divider|StageOut[49]~16_combout\) # (\convert_binary|Div1|auto_generated|divider|divider|StageOut[49]~15_combout\) ) + ( GND ) + ( 
-- \convert_binary|Div1|auto_generated|divider|divider|op_8~30\ ))
-- \convert_binary|Div1|auto_generated|divider|divider|op_8~26\ = CARRY(( (\convert_binary|Div1|auto_generated|divider|divider|StageOut[49]~16_combout\) # (\convert_binary|Div1|auto_generated|divider|divider|StageOut[49]~15_combout\) ) + ( GND ) + ( 
-- \convert_binary|Div1|auto_generated|divider|divider|op_8~30\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000011001111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datab => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[49]~15_combout\,
	datad => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[49]~16_combout\,
	cin => \convert_binary|Div1|auto_generated|divider|divider|op_8~30\,
	sumout => \convert_binary|Div1|auto_generated|divider|divider|op_8~25_sumout\,
	cout => \convert_binary|Div1|auto_generated|divider|divider|op_8~26\);

\convert_binary|Div1|auto_generated|divider|divider|op_8~21\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div1|auto_generated|divider|divider|op_8~21_sumout\ = SUM(( (!\convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\ & 
-- ((\convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[2]~21_sumout\))) # (\convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\ & (\Result[5]~reg0_q\)) ) + ( VCC ) + ( 
-- \convert_binary|Div1|auto_generated|divider|divider|op_8~26\ ))
-- \convert_binary|Div1|auto_generated|divider|divider|op_8~22\ = CARRY(( (!\convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\ & ((\convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[2]~21_sumout\))) # 
-- (\convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\ & (\Result[5]~reg0_q\)) ) + ( VCC ) + ( \convert_binary|Div1|auto_generated|divider|divider|op_8~26\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000010111110101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_Result[5]~reg0_q\,
	datac => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[7]~1_sumout\,
	datad => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[2]~21_sumout\,
	cin => \convert_binary|Div1|auto_generated|divider|divider|op_8~26\,
	sumout => \convert_binary|Div1|auto_generated|divider|divider|op_8~21_sumout\,
	cout => \convert_binary|Div1|auto_generated|divider|divider|op_8~22\);

\convert_binary|Div1|auto_generated|divider|divider|op_8~17\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div1|auto_generated|divider|divider|op_8~17_sumout\ = SUM(( (\convert_binary|Div1|auto_generated|divider|divider|StageOut[51]~8_combout\) # (\convert_binary|Div1|auto_generated|divider|divider|StageOut[51]~7_combout\) ) + ( VCC ) + ( 
-- \convert_binary|Div1|auto_generated|divider|divider|op_8~22\ ))
-- \convert_binary|Div1|auto_generated|divider|divider|op_8~18\ = CARRY(( (\convert_binary|Div1|auto_generated|divider|divider|StageOut[51]~8_combout\) # (\convert_binary|Div1|auto_generated|divider|divider|StageOut[51]~7_combout\) ) + ( VCC ) + ( 
-- \convert_binary|Div1|auto_generated|divider|divider|op_8~22\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000011001111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datab => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[51]~7_combout\,
	datad => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[51]~8_combout\,
	cin => \convert_binary|Div1|auto_generated|divider|divider|op_8~22\,
	sumout => \convert_binary|Div1|auto_generated|divider|divider|op_8~17_sumout\,
	cout => \convert_binary|Div1|auto_generated|divider|divider|op_8~18\);

\convert_binary|Div1|auto_generated|divider|divider|op_8~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div1|auto_generated|divider|divider|op_8~9_sumout\ = SUM(( (!\convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\ & ((\convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[4]~9_sumout\))) 
-- # (\convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\ & (\Result[7]~reg0_q\)) ) + ( GND ) + ( \convert_binary|Div1|auto_generated|divider|divider|op_8~18\ ))
-- \convert_binary|Div1|auto_generated|divider|divider|op_8~10\ = CARRY(( (!\convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\ & ((\convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[4]~9_sumout\))) # 
-- (\convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\ & (\Result[7]~reg0_q\)) ) + ( GND ) + ( \convert_binary|Div1|auto_generated|divider|divider|op_8~18\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000010111110101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_Result[7]~reg0_q\,
	datac => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[7]~1_sumout\,
	datad => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[4]~9_sumout\,
	cin => \convert_binary|Div1|auto_generated|divider|divider|op_8~18\,
	sumout => \convert_binary|Div1|auto_generated|divider|divider|op_8~9_sumout\,
	cout => \convert_binary|Div1|auto_generated|divider|divider|op_8~10\);

\convert_binary|Div1|auto_generated|divider|divider|op_8~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div1|auto_generated|divider|divider|op_8~13_sumout\ = SUM(( (\convert_binary|Div1|auto_generated|divider|divider|StageOut[53]~4_combout\) # (\convert_binary|Div1|auto_generated|divider|divider|StageOut[53]~5_combout\) ) + ( GND ) + ( 
-- \convert_binary|Div1|auto_generated|divider|divider|op_8~10\ ))
-- \convert_binary|Div1|auto_generated|divider|divider|op_8~14\ = CARRY(( (\convert_binary|Div1|auto_generated|divider|divider|StageOut[53]~4_combout\) # (\convert_binary|Div1|auto_generated|divider|divider|StageOut[53]~5_combout\) ) + ( GND ) + ( 
-- \convert_binary|Div1|auto_generated|divider|divider|op_8~10\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000011001111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datab => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[53]~5_combout\,
	datad => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[53]~4_combout\,
	cin => \convert_binary|Div1|auto_generated|divider|divider|op_8~10\,
	sumout => \convert_binary|Div1|auto_generated|divider|divider|op_8~13_sumout\,
	cout => \convert_binary|Div1|auto_generated|divider|divider|op_8~14\);

\convert_binary|Div1|auto_generated|divider|divider|op_8~6\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div1|auto_generated|divider|divider|op_8~6_cout\ = CARRY(( (!\convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\ & ((\convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[6]~5_sumout\))) 
-- # (\convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\ & (\Result[9]~reg0_q\)) ) + ( VCC ) + ( \convert_binary|Div1|auto_generated|divider|divider|op_8~14\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000010111110101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_Result[9]~reg0_q\,
	datac => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[7]~1_sumout\,
	datad => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[6]~5_sumout\,
	cin => \convert_binary|Div1|auto_generated|divider|divider|op_8~14\,
	cout => \convert_binary|Div1|auto_generated|divider|divider|op_8~6_cout\);

\convert_binary|Div1|auto_generated|divider|divider|op_8~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div1|auto_generated|divider|divider|op_8~1_sumout\ = SUM(( VCC ) + ( GND ) + ( \convert_binary|Div1|auto_generated|divider|divider|op_8~6_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Div1|auto_generated|divider|divider|op_8~6_cout\,
	sumout => \convert_binary|Div1|auto_generated|divider|divider|op_8~1_sumout\);

\convert_binary|Div1|auto_generated|divider|divider|StageOut[52]~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div1|auto_generated|divider|divider|StageOut[52]~1_combout\ = (!\convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\ & \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[4]~9_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[7]~1_sumout\,
	datab => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[4]~9_sumout\,
	combout => \convert_binary|Div1|auto_generated|divider|divider|StageOut[52]~1_combout\);

\convert_binary|Div1|auto_generated|divider|divider|StageOut[52]~2\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div1|auto_generated|divider|divider|StageOut[52]~2_combout\ = (\Result[7]~reg0_q\ & \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_Result[7]~reg0_q\,
	datab => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[7]~1_sumout\,
	combout => \convert_binary|Div1|auto_generated|divider|divider|StageOut[52]~2_combout\);

\convert_binary|Div1|auto_generated|divider|divider|StageOut[51]~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div1|auto_generated|divider|divider|StageOut[51]~9_combout\ = (\convert_binary|Div1|auto_generated|divider|divider|StageOut[51]~8_combout\) # (\convert_binary|Div1|auto_generated|divider|divider|StageOut[51]~7_combout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0111011101110111011101110111011101110111011101110111011101110111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[51]~7_combout\,
	datab => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[51]~8_combout\,
	combout => \convert_binary|Div1|auto_generated|divider|divider|StageOut[51]~9_combout\);

\convert_binary|Div1|auto_generated|divider|divider|StageOut[50]~11\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div1|auto_generated|divider|divider|StageOut[50]~11_combout\ = (!\convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\ & 
-- \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[2]~21_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[7]~1_sumout\,
	datab => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[2]~21_sumout\,
	combout => \convert_binary|Div1|auto_generated|divider|divider|StageOut[50]~11_combout\);

\convert_binary|Div1|auto_generated|divider|divider|StageOut[50]~12\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div1|auto_generated|divider|divider|StageOut[50]~12_combout\ = (\Result[5]~reg0_q\ & \convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_Result[5]~reg0_q\,
	datab => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[7]~1_sumout\,
	combout => \convert_binary|Div1|auto_generated|divider|divider|StageOut[50]~12_combout\);

\convert_binary|Div1|auto_generated|divider|divider|StageOut[49]~17\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div1|auto_generated|divider|divider|StageOut[49]~17_combout\ = (\convert_binary|Div1|auto_generated|divider|divider|StageOut[49]~16_combout\) # (\convert_binary|Div1|auto_generated|divider|divider|StageOut[49]~15_combout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0111011101110111011101110111011101110111011101110111011101110111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[49]~15_combout\,
	datab => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[49]~16_combout\,
	combout => \convert_binary|Div1|auto_generated|divider|divider|StageOut[49]~17_combout\);

\convert_binary|Div1|auto_generated|divider|divider|StageOut[48]~19\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div1|auto_generated|divider|divider|StageOut[48]~19_combout\ = (!\convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\ & 
-- ((\convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[0]~29_sumout\))) # (\convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\ & (\Result[3]~reg0_q\))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001110100011101000111010001110100011101000111010001110100011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_Result[3]~reg0_q\,
	datab => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[7]~1_sumout\,
	datac => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[0]~29_sumout\,
	combout => \convert_binary|Div1|auto_generated|divider|divider|StageOut[48]~19_combout\);

\convert_binary|Div1|auto_generated|divider|divider|op_9~38\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div1|auto_generated|divider|divider|op_9~38_cout\ = CARRY(( VCC ) + ( VCC ) + ( !VCC ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => GND,
	cout => \convert_binary|Div1|auto_generated|divider|divider|op_9~38_cout\);

\convert_binary|Div1|auto_generated|divider|divider|op_9~33\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div1|auto_generated|divider|divider|op_9~33_sumout\ = SUM(( \Result[1]~reg0_q\ ) + ( VCC ) + ( \convert_binary|Div1|auto_generated|divider|divider|op_9~38_cout\ ))
-- \convert_binary|Div1|auto_generated|divider|divider|op_9~34\ = CARRY(( \Result[1]~reg0_q\ ) + ( VCC ) + ( \convert_binary|Div1|auto_generated|divider|divider|op_9~38_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \ALT_INV_Result[1]~reg0_q\,
	cin => \convert_binary|Div1|auto_generated|divider|divider|op_9~38_cout\,
	sumout => \convert_binary|Div1|auto_generated|divider|divider|op_9~33_sumout\,
	cout => \convert_binary|Div1|auto_generated|divider|divider|op_9~34\);

\convert_binary|Div1|auto_generated|divider|divider|op_9~29\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div1|auto_generated|divider|divider|op_9~29_sumout\ = SUM(( (!\convert_binary|Div1|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Div1|auto_generated|divider|divider|op_8~33_sumout\))) # 
-- (\convert_binary|Div1|auto_generated|divider|divider|op_8~1_sumout\ & (\Result[2]~reg0_q\)) ) + ( VCC ) + ( \convert_binary|Div1|auto_generated|divider|divider|op_9~34\ ))
-- \convert_binary|Div1|auto_generated|divider|divider|op_9~30\ = CARRY(( (!\convert_binary|Div1|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Div1|auto_generated|divider|divider|op_8~33_sumout\))) # 
-- (\convert_binary|Div1|auto_generated|divider|divider|op_8~1_sumout\ & (\Result[2]~reg0_q\)) ) + ( VCC ) + ( \convert_binary|Div1|auto_generated|divider|divider|op_9~34\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001000111011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_Result[2]~reg0_q\,
	datab => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datad => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_8~33_sumout\,
	cin => \convert_binary|Div1|auto_generated|divider|divider|op_9~34\,
	sumout => \convert_binary|Div1|auto_generated|divider|divider|op_9~29_sumout\,
	cout => \convert_binary|Div1|auto_generated|divider|divider|op_9~30\);

\convert_binary|Div1|auto_generated|divider|divider|op_9~25\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div1|auto_generated|divider|divider|op_9~25_sumout\ = SUM(( (!\convert_binary|Div1|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Div1|auto_generated|divider|divider|op_8~29_sumout\))) # 
-- (\convert_binary|Div1|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Div1|auto_generated|divider|divider|StageOut[48]~19_combout\)) ) + ( GND ) + ( \convert_binary|Div1|auto_generated|divider|divider|op_9~30\ ))
-- \convert_binary|Div1|auto_generated|divider|divider|op_9~26\ = CARRY(( (!\convert_binary|Div1|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Div1|auto_generated|divider|divider|op_8~29_sumout\))) # 
-- (\convert_binary|Div1|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Div1|auto_generated|divider|divider|StageOut[48]~19_combout\)) ) + ( GND ) + ( \convert_binary|Div1|auto_generated|divider|divider|op_9~30\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000001111001111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datab => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datac => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[48]~19_combout\,
	datad => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_8~29_sumout\,
	cin => \convert_binary|Div1|auto_generated|divider|divider|op_9~30\,
	sumout => \convert_binary|Div1|auto_generated|divider|divider|op_9~25_sumout\,
	cout => \convert_binary|Div1|auto_generated|divider|divider|op_9~26\);

\convert_binary|Div1|auto_generated|divider|divider|op_9~21\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div1|auto_generated|divider|divider|op_9~21_sumout\ = SUM(( (!\convert_binary|Div1|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Div1|auto_generated|divider|divider|op_8~25_sumout\))) # 
-- (\convert_binary|Div1|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Div1|auto_generated|divider|divider|StageOut[49]~17_combout\)) ) + ( VCC ) + ( \convert_binary|Div1|auto_generated|divider|divider|op_9~26\ ))
-- \convert_binary|Div1|auto_generated|divider|divider|op_9~22\ = CARRY(( (!\convert_binary|Div1|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Div1|auto_generated|divider|divider|op_8~25_sumout\))) # 
-- (\convert_binary|Div1|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Div1|auto_generated|divider|divider|StageOut[49]~17_combout\)) ) + ( VCC ) + ( \convert_binary|Div1|auto_generated|divider|divider|op_9~26\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datac => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[49]~17_combout\,
	datad => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_8~25_sumout\,
	cin => \convert_binary|Div1|auto_generated|divider|divider|op_9~26\,
	sumout => \convert_binary|Div1|auto_generated|divider|divider|op_9~21_sumout\,
	cout => \convert_binary|Div1|auto_generated|divider|divider|op_9~22\);

\convert_binary|Div1|auto_generated|divider|divider|op_9~17\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div1|auto_generated|divider|divider|op_9~17_sumout\ = SUM(( (!\convert_binary|Div1|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Div1|auto_generated|divider|divider|op_8~21_sumout\)))) # 
-- (\convert_binary|Div1|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Div1|auto_generated|divider|divider|StageOut[50]~12_combout\)) # (\convert_binary|Div1|auto_generated|divider|divider|StageOut[50]~11_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Div1|auto_generated|divider|divider|op_9~22\ ))
-- \convert_binary|Div1|auto_generated|divider|divider|op_9~18\ = CARRY(( (!\convert_binary|Div1|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Div1|auto_generated|divider|divider|op_8~21_sumout\)))) # 
-- (\convert_binary|Div1|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Div1|auto_generated|divider|divider|StageOut[50]~12_combout\)) # (\convert_binary|Div1|auto_generated|divider|divider|StageOut[50]~11_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Div1|auto_generated|divider|divider|op_9~22\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[50]~11_combout\,
	datac => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_8~21_sumout\,
	datad => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[50]~12_combout\,
	cin => \convert_binary|Div1|auto_generated|divider|divider|op_9~22\,
	sumout => \convert_binary|Div1|auto_generated|divider|divider|op_9~17_sumout\,
	cout => \convert_binary|Div1|auto_generated|divider|divider|op_9~18\);

\convert_binary|Div1|auto_generated|divider|divider|op_9~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div1|auto_generated|divider|divider|op_9~13_sumout\ = SUM(( (!\convert_binary|Div1|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Div1|auto_generated|divider|divider|op_8~17_sumout\))) # 
-- (\convert_binary|Div1|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Div1|auto_generated|divider|divider|StageOut[51]~9_combout\)) ) + ( GND ) + ( \convert_binary|Div1|auto_generated|divider|divider|op_9~18\ ))
-- \convert_binary|Div1|auto_generated|divider|divider|op_9~14\ = CARRY(( (!\convert_binary|Div1|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Div1|auto_generated|divider|divider|op_8~17_sumout\))) # 
-- (\convert_binary|Div1|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Div1|auto_generated|divider|divider|StageOut[51]~9_combout\)) ) + ( GND ) + ( \convert_binary|Div1|auto_generated|divider|divider|op_9~18\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datac => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[51]~9_combout\,
	datad => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_8~17_sumout\,
	cin => \convert_binary|Div1|auto_generated|divider|divider|op_9~18\,
	sumout => \convert_binary|Div1|auto_generated|divider|divider|op_9~13_sumout\,
	cout => \convert_binary|Div1|auto_generated|divider|divider|op_9~14\);

\convert_binary|Div1|auto_generated|divider|divider|op_9~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div1|auto_generated|divider|divider|op_9~9_sumout\ = SUM(( (!\convert_binary|Div1|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Div1|auto_generated|divider|divider|op_8~9_sumout\)))) # 
-- (\convert_binary|Div1|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Div1|auto_generated|divider|divider|StageOut[52]~2_combout\)) # (\convert_binary|Div1|auto_generated|divider|divider|StageOut[52]~1_combout\))) ) + ( GND ) + ( 
-- \convert_binary|Div1|auto_generated|divider|divider|op_9~14\ ))
-- \convert_binary|Div1|auto_generated|divider|divider|op_9~10\ = CARRY(( (!\convert_binary|Div1|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Div1|auto_generated|divider|divider|op_8~9_sumout\)))) # 
-- (\convert_binary|Div1|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Div1|auto_generated|divider|divider|StageOut[52]~2_combout\)) # (\convert_binary|Div1|auto_generated|divider|divider|StageOut[52]~1_combout\))) ) + ( GND ) + ( 
-- \convert_binary|Div1|auto_generated|divider|divider|op_9~14\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[52]~1_combout\,
	datac => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_8~9_sumout\,
	datad => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[52]~2_combout\,
	cin => \convert_binary|Div1|auto_generated|divider|divider|op_9~14\,
	sumout => \convert_binary|Div1|auto_generated|divider|divider|op_9~9_sumout\,
	cout => \convert_binary|Div1|auto_generated|divider|divider|op_9~10\);

\convert_binary|Div1|auto_generated|divider|divider|op_9~6\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div1|auto_generated|divider|divider|op_9~6_cout\ = CARRY(( (!\convert_binary|Div1|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Div1|auto_generated|divider|divider|op_8~13_sumout\)))) # 
-- (\convert_binary|Div1|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Div1|auto_generated|divider|divider|StageOut[53]~5_combout\)) # (\convert_binary|Div1|auto_generated|divider|divider|StageOut[53]~4_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Div1|auto_generated|divider|divider|op_9~10\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001010110111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[53]~4_combout\,
	datac => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[53]~5_combout\,
	datad => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_8~13_sumout\,
	cin => \convert_binary|Div1|auto_generated|divider|divider|op_9~10\,
	cout => \convert_binary|Div1|auto_generated|divider|divider|op_9~6_cout\);

\convert_binary|Div1|auto_generated|divider|divider|op_9~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div1|auto_generated|divider|divider|op_9~1_sumout\ = SUM(( VCC ) + ( GND ) + ( \convert_binary|Div1|auto_generated|divider|divider|op_9~6_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Div1|auto_generated|divider|divider|op_9~6_cout\,
	sumout => \convert_binary|Div1|auto_generated|divider|divider|op_9~1_sumout\);

\convert_binary|Div1|auto_generated|divider|divider|StageOut[61]~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div1|auto_generated|divider|divider|StageOut[61]~0_combout\ = (!\convert_binary|Div1|auto_generated|divider|divider|op_8~1_sumout\ & \convert_binary|Div1|auto_generated|divider|divider|op_8~9_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_8~9_sumout\,
	combout => \convert_binary|Div1|auto_generated|divider|divider|StageOut[61]~0_combout\);

\convert_binary|Div1|auto_generated|divider|divider|StageOut[61]~3\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div1|auto_generated|divider|divider|StageOut[61]~3_combout\ = (\convert_binary|Div1|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Div1|auto_generated|divider|divider|StageOut[52]~2_combout\) # 
-- (\convert_binary|Div1|auto_generated|divider|divider|StageOut[52]~1_combout\)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001010100010101000101010001010100010101000101010001010100010101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[52]~1_combout\,
	datac => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[52]~2_combout\,
	combout => \convert_binary|Div1|auto_generated|divider|divider|StageOut[61]~3_combout\);

\convert_binary|Div1|auto_generated|divider|divider|StageOut[60]~6\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div1|auto_generated|divider|divider|StageOut[60]~6_combout\ = (!\convert_binary|Div1|auto_generated|divider|divider|op_8~1_sumout\ & \convert_binary|Div1|auto_generated|divider|divider|op_8~17_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_8~17_sumout\,
	combout => \convert_binary|Div1|auto_generated|divider|divider|StageOut[60]~6_combout\);

\convert_binary|Div1|auto_generated|divider|divider|StageOut[60]~10\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div1|auto_generated|divider|divider|StageOut[60]~10_combout\ = (\convert_binary|Div1|auto_generated|divider|divider|op_8~1_sumout\ & \convert_binary|Div1|auto_generated|divider|divider|StageOut[51]~9_combout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[51]~9_combout\,
	combout => \convert_binary|Div1|auto_generated|divider|divider|StageOut[60]~10_combout\);

\convert_binary|Div1|auto_generated|divider|divider|StageOut[59]~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div1|auto_generated|divider|divider|StageOut[59]~13_combout\ = (!\convert_binary|Div1|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Div1|auto_generated|divider|divider|op_8~21_sumout\)))) # 
-- (\convert_binary|Div1|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Div1|auto_generated|divider|divider|StageOut[50]~12_combout\)) # (\convert_binary|Div1|auto_generated|divider|divider|StageOut[50]~11_combout\)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001101101011111000110110101111100011011010111110001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[50]~11_combout\,
	datac => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_8~21_sumout\,
	datad => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[50]~12_combout\,
	combout => \convert_binary|Div1|auto_generated|divider|divider|StageOut[59]~13_combout\);

\convert_binary|Div1|auto_generated|divider|divider|StageOut[58]~14\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div1|auto_generated|divider|divider|StageOut[58]~14_combout\ = (!\convert_binary|Div1|auto_generated|divider|divider|op_8~1_sumout\ & \convert_binary|Div1|auto_generated|divider|divider|op_8~25_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_8~25_sumout\,
	combout => \convert_binary|Div1|auto_generated|divider|divider|StageOut[58]~14_combout\);

\convert_binary|Div1|auto_generated|divider|divider|StageOut[58]~18\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div1|auto_generated|divider|divider|StageOut[58]~18_combout\ = (\convert_binary|Div1|auto_generated|divider|divider|op_8~1_sumout\ & \convert_binary|Div1|auto_generated|divider|divider|StageOut[49]~17_combout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[49]~17_combout\,
	combout => \convert_binary|Div1|auto_generated|divider|divider|StageOut[58]~18_combout\);

\convert_binary|Div1|auto_generated|divider|divider|StageOut[57]~20\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div1|auto_generated|divider|divider|StageOut[57]~20_combout\ = (!\convert_binary|Div1|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Div1|auto_generated|divider|divider|op_8~29_sumout\))) # 
-- (\convert_binary|Div1|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Div1|auto_generated|divider|divider|StageOut[48]~19_combout\))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001101100011011000110110001101100011011000110110001101100011011",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[48]~19_combout\,
	datac => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_8~29_sumout\,
	combout => \convert_binary|Div1|auto_generated|divider|divider|StageOut[57]~20_combout\);

\convert_binary|Div1|auto_generated|divider|divider|StageOut[56]~21\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div1|auto_generated|divider|divider|StageOut[56]~21_combout\ = (!\convert_binary|Div1|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Div1|auto_generated|divider|divider|op_8~33_sumout\))) # 
-- (\convert_binary|Div1|auto_generated|divider|divider|op_8~1_sumout\ & (\Result[2]~reg0_q\))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001110100011101000111010001110100011101000111010001110100011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_Result[2]~reg0_q\,
	datab => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datac => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_8~33_sumout\,
	combout => \convert_binary|Div1|auto_generated|divider|divider|StageOut[56]~21_combout\);

\convert_binary|Div1|auto_generated|divider|divider|op_10~38\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div1|auto_generated|divider|divider|op_10~38_cout\ = CARRY(( VCC ) + ( VCC ) + ( !VCC ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => GND,
	cout => \convert_binary|Div1|auto_generated|divider|divider|op_10~38_cout\);

\convert_binary|Div1|auto_generated|divider|divider|op_10~34\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div1|auto_generated|divider|divider|op_10~34_cout\ = CARRY(( \Result[0]~reg0_q\ ) + ( VCC ) + ( \convert_binary|Div1|auto_generated|divider|divider|op_10~38_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \ALT_INV_Result[0]~reg0_q\,
	cin => \convert_binary|Div1|auto_generated|divider|divider|op_10~38_cout\,
	cout => \convert_binary|Div1|auto_generated|divider|divider|op_10~34_cout\);

\convert_binary|Div1|auto_generated|divider|divider|op_10~30\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div1|auto_generated|divider|divider|op_10~30_cout\ = CARRY(( (!\convert_binary|Div1|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Div1|auto_generated|divider|divider|op_9~33_sumout\))) # 
-- (\convert_binary|Div1|auto_generated|divider|divider|op_9~1_sumout\ & (\Result[1]~reg0_q\)) ) + ( VCC ) + ( \convert_binary|Div1|auto_generated|divider|divider|op_10~34_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001000111011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_Result[1]~reg0_q\,
	datab => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datad => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_9~33_sumout\,
	cin => \convert_binary|Div1|auto_generated|divider|divider|op_10~34_cout\,
	cout => \convert_binary|Div1|auto_generated|divider|divider|op_10~30_cout\);

\convert_binary|Div1|auto_generated|divider|divider|op_10~26\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div1|auto_generated|divider|divider|op_10~26_cout\ = CARRY(( (!\convert_binary|Div1|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Div1|auto_generated|divider|divider|op_9~29_sumout\))) # 
-- (\convert_binary|Div1|auto_generated|divider|divider|op_9~1_sumout\ & (\convert_binary|Div1|auto_generated|divider|divider|StageOut[56]~21_combout\)) ) + ( GND ) + ( \convert_binary|Div1|auto_generated|divider|divider|op_10~30_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000001111001111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datab => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datac => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[56]~21_combout\,
	datad => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_9~29_sumout\,
	cin => \convert_binary|Div1|auto_generated|divider|divider|op_10~30_cout\,
	cout => \convert_binary|Div1|auto_generated|divider|divider|op_10~26_cout\);

\convert_binary|Div1|auto_generated|divider|divider|op_10~22\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div1|auto_generated|divider|divider|op_10~22_cout\ = CARRY(( (!\convert_binary|Div1|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Div1|auto_generated|divider|divider|op_9~25_sumout\))) # 
-- (\convert_binary|Div1|auto_generated|divider|divider|op_9~1_sumout\ & (\convert_binary|Div1|auto_generated|divider|divider|StageOut[57]~20_combout\)) ) + ( VCC ) + ( \convert_binary|Div1|auto_generated|divider|divider|op_10~26_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datac => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[57]~20_combout\,
	datad => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_9~25_sumout\,
	cin => \convert_binary|Div1|auto_generated|divider|divider|op_10~26_cout\,
	cout => \convert_binary|Div1|auto_generated|divider|divider|op_10~22_cout\);

\convert_binary|Div1|auto_generated|divider|divider|op_10~18\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div1|auto_generated|divider|divider|op_10~18_cout\ = CARRY(( (!\convert_binary|Div1|auto_generated|divider|divider|op_9~1_sumout\ & (((\convert_binary|Div1|auto_generated|divider|divider|op_9~21_sumout\)))) # 
-- (\convert_binary|Div1|auto_generated|divider|divider|op_9~1_sumout\ & (((\convert_binary|Div1|auto_generated|divider|divider|StageOut[58]~18_combout\)) # (\convert_binary|Div1|auto_generated|divider|divider|StageOut[58]~14_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Div1|auto_generated|divider|divider|op_10~22_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datab => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[58]~14_combout\,
	datac => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_9~21_sumout\,
	datad => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[58]~18_combout\,
	cin => \convert_binary|Div1|auto_generated|divider|divider|op_10~22_cout\,
	cout => \convert_binary|Div1|auto_generated|divider|divider|op_10~18_cout\);

\convert_binary|Div1|auto_generated|divider|divider|op_10~14\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div1|auto_generated|divider|divider|op_10~14_cout\ = CARRY(( (!\convert_binary|Div1|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Div1|auto_generated|divider|divider|op_9~17_sumout\))) # 
-- (\convert_binary|Div1|auto_generated|divider|divider|op_9~1_sumout\ & (\convert_binary|Div1|auto_generated|divider|divider|StageOut[59]~13_combout\)) ) + ( GND ) + ( \convert_binary|Div1|auto_generated|divider|divider|op_10~18_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datac => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[59]~13_combout\,
	datad => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_9~17_sumout\,
	cin => \convert_binary|Div1|auto_generated|divider|divider|op_10~18_cout\,
	cout => \convert_binary|Div1|auto_generated|divider|divider|op_10~14_cout\);

\convert_binary|Div1|auto_generated|divider|divider|op_10~10\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div1|auto_generated|divider|divider|op_10~10_cout\ = CARRY(( (!\convert_binary|Div1|auto_generated|divider|divider|op_9~1_sumout\ & (((\convert_binary|Div1|auto_generated|divider|divider|op_9~13_sumout\)))) # 
-- (\convert_binary|Div1|auto_generated|divider|divider|op_9~1_sumout\ & (((\convert_binary|Div1|auto_generated|divider|divider|StageOut[60]~10_combout\)) # (\convert_binary|Div1|auto_generated|divider|divider|StageOut[60]~6_combout\))) ) + ( GND ) + ( 
-- \convert_binary|Div1|auto_generated|divider|divider|op_10~14_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datab => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[60]~6_combout\,
	datac => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_9~13_sumout\,
	datad => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[60]~10_combout\,
	cin => \convert_binary|Div1|auto_generated|divider|divider|op_10~14_cout\,
	cout => \convert_binary|Div1|auto_generated|divider|divider|op_10~10_cout\);

\convert_binary|Div1|auto_generated|divider|divider|op_10~6\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div1|auto_generated|divider|divider|op_10~6_cout\ = CARRY(( (!\convert_binary|Div1|auto_generated|divider|divider|op_9~1_sumout\ & (((\convert_binary|Div1|auto_generated|divider|divider|op_9~9_sumout\)))) # 
-- (\convert_binary|Div1|auto_generated|divider|divider|op_9~1_sumout\ & (((\convert_binary|Div1|auto_generated|divider|divider|StageOut[61]~3_combout\)) # (\convert_binary|Div1|auto_generated|divider|divider|StageOut[61]~0_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Div1|auto_generated|divider|divider|op_10~10_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datab => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[61]~0_combout\,
	datac => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_9~9_sumout\,
	datad => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_StageOut[61]~3_combout\,
	cin => \convert_binary|Div1|auto_generated|divider|divider|op_10~10_cout\,
	cout => \convert_binary|Div1|auto_generated|divider|divider|op_10~6_cout\);

\convert_binary|Div1|auto_generated|divider|divider|op_10~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div1|auto_generated|divider|divider|op_10~1_sumout\ = SUM(( VCC ) + ( GND ) + ( \convert_binary|Div1|auto_generated|divider|divider|op_10~6_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Div1|auto_generated|divider|divider|op_10~6_cout\,
	sumout => \convert_binary|Div1|auto_generated|divider|divider|op_10~1_sumout\);

\convert_binary|Div1|auto_generated|divider|divider|op_10~1_wirecell\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div1|auto_generated|divider|divider|op_10~1_wirecell_combout\ = !\convert_binary|Div1|auto_generated|divider|divider|op_10~1_sumout\

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "1010101010101010101010101010101010101010101010101010101010101010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_10~1_sumout\,
	combout => \convert_binary|Div1|auto_generated|divider|divider|op_10~1_wirecell_combout\);

\convert_binary|int_data_3[0]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \convert_binary|Div1|auto_generated|divider|divider|op_10~1_wirecell_combout\,
	clrn => \RST_main~input_o\,
	sclr => \convert_binary|int_r_2[2]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \convert_binary|int_data_3\(0));

\convert_binary|int_data_3~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|int_data_3~0_combout\ = (!\convert_binary|Div1|auto_generated|divider|divider|op_9~1_sumout\) # (\convert_binary|int_r_2[2]~0_combout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "1101110111011101110111011101110111011101110111011101110111011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|ALT_INV_int_r_2[2]~0_combout\,
	datab => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	combout => \convert_binary|int_data_3~0_combout\);

\convert_binary|int_data_3[1]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \convert_binary|int_data_3~0_combout\,
	clrn => \RST_main~input_o\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \convert_binary|int_data_3\(1));

\convert_binary|Div1|auto_generated|divider|divider|op_8~1_wirecell\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div1|auto_generated|divider|divider|op_8~1_wirecell_combout\ = !\convert_binary|Div1|auto_generated|divider|divider|op_8~1_sumout\

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "1010101010101010101010101010101010101010101010101010101010101010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	combout => \convert_binary|Div1|auto_generated|divider|divider|op_8~1_wirecell_combout\);

\convert_binary|int_data_3[2]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \convert_binary|Div1|auto_generated|divider|divider|op_8~1_wirecell_combout\,
	clrn => \RST_main~input_o\,
	sclr => \convert_binary|int_r_2[2]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \convert_binary|int_data_3\(2));

\convert_binary|int_data_3~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|int_data_3~1_combout\ = (!\convert_binary|Div1|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\) # (\convert_binary|int_r_2[2]~0_combout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "1101110111011101110111011101110111011101110111011101110111011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|ALT_INV_int_r_2[2]~0_combout\,
	datab => \convert_binary|Div1|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[7]~1_sumout\,
	combout => \convert_binary|int_data_3~1_combout\);

\convert_binary|int_data_3[3]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \convert_binary|int_data_3~1_combout\,
	clrn => \RST_main~input_o\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \convert_binary|int_data_3\(3));

\seven_seg_display_3|Mux6~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \seven_seg_display_3|Mux6~0_combout\ = (!\convert_binary|int_data_3\(1) & (!\convert_binary|int_data_3\(3) & (!\convert_binary|int_data_3\(0) $ (!\convert_binary|int_data_3\(2)))))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0100100000000000010010000000000001001000000000000100100000000000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|ALT_INV_int_data_3\(0),
	datab => \convert_binary|ALT_INV_int_data_3\(1),
	datac => \convert_binary|ALT_INV_int_data_3\(2),
	datad => \convert_binary|ALT_INV_int_data_3\(3),
	combout => \seven_seg_display_3|Mux6~0_combout\);

\seven_seg_display_3|seven_seg[0]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \seven_seg_display_3|Mux6~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \seven_seg_display_3|seven_seg\(0));

\seven_seg_display_3|Mux5~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \seven_seg_display_3|Mux5~0_combout\ = (!\convert_binary|int_data_3\(2) & (((\convert_binary|int_data_3\(1) & \convert_binary|int_data_3\(3))))) # (\convert_binary|int_data_3\(2) & ((!\convert_binary|int_data_3\(0) $ (!\convert_binary|int_data_3\(1))) # 
-- (\convert_binary|int_data_3\(3))))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000011000111111000001100011111100000110001111110000011000111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|ALT_INV_int_data_3\(0),
	datab => \convert_binary|ALT_INV_int_data_3\(1),
	datac => \convert_binary|ALT_INV_int_data_3\(2),
	datad => \convert_binary|ALT_INV_int_data_3\(3),
	combout => \seven_seg_display_3|Mux5~0_combout\);

\seven_seg_display_3|seven_seg[1]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \seven_seg_display_3|Mux5~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \seven_seg_display_3|seven_seg\(1));

\seven_seg_display_3|Mux4~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \seven_seg_display_3|Mux4~0_combout\ = (!\convert_binary|int_data_3\(2) & (\convert_binary|int_data_3\(1) & ((!\convert_binary|int_data_3\(0)) # (\convert_binary|int_data_3\(3))))) # (\convert_binary|int_data_3\(2) & (((\convert_binary|int_data_3\(3)))))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010000000111111001000000011111100100000001111110010000000111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|ALT_INV_int_data_3\(0),
	datab => \convert_binary|ALT_INV_int_data_3\(1),
	datac => \convert_binary|ALT_INV_int_data_3\(2),
	datad => \convert_binary|ALT_INV_int_data_3\(3),
	combout => \seven_seg_display_3|Mux4~0_combout\);

\seven_seg_display_3|seven_seg[2]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \seven_seg_display_3|Mux4~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \seven_seg_display_3|seven_seg\(2));

\seven_seg_display_3|Mux3~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \seven_seg_display_3|Mux3~0_combout\ = (!\convert_binary|int_data_3\(3) & ((!\convert_binary|int_data_3\(0) & (!\convert_binary|int_data_3\(1) & \convert_binary|int_data_3\(2))) # (\convert_binary|int_data_3\(0) & (!\convert_binary|int_data_3\(1) $ 
-- (\convert_binary|int_data_3\(2))))))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0100100100000000010010010000000001001001000000000100100100000000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|ALT_INV_int_data_3\(0),
	datab => \convert_binary|ALT_INV_int_data_3\(1),
	datac => \convert_binary|ALT_INV_int_data_3\(2),
	datad => \convert_binary|ALT_INV_int_data_3\(3),
	combout => \seven_seg_display_3|Mux3~0_combout\);

\seven_seg_display_3|seven_seg[3]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \seven_seg_display_3|Mux3~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \seven_seg_display_3|seven_seg\(3));

\seven_seg_display_3|Mux2~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \seven_seg_display_3|Mux2~0_combout\ = (!\convert_binary|int_data_3\(1) & ((!\convert_binary|int_data_3\(2) & (\convert_binary|int_data_3\(0))) # (\convert_binary|int_data_3\(2) & ((!\convert_binary|int_data_3\(3)))))) # (\convert_binary|int_data_3\(1) & 
-- (\convert_binary|int_data_3\(0) & ((!\convert_binary|int_data_3\(3)))))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0101110101000000010111010100000001011101010000000101110101000000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|ALT_INV_int_data_3\(0),
	datab => \convert_binary|ALT_INV_int_data_3\(1),
	datac => \convert_binary|ALT_INV_int_data_3\(2),
	datad => \convert_binary|ALT_INV_int_data_3\(3),
	combout => \seven_seg_display_3|Mux2~0_combout\);

\seven_seg_display_3|seven_seg[4]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \seven_seg_display_3|Mux2~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \seven_seg_display_3|seven_seg\(4));

\seven_seg_display_3|Mux1~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \seven_seg_display_3|Mux1~0_combout\ = (!\convert_binary|int_data_3\(3) & ((!\convert_binary|int_data_3\(0) & (\convert_binary|int_data_3\(1) & !\convert_binary|int_data_3\(2))) # (\convert_binary|int_data_3\(0) & ((!\convert_binary|int_data_3\(2)) # 
-- (\convert_binary|int_data_3\(1))))))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0111000100000000011100010000000001110001000000000111000100000000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|ALT_INV_int_data_3\(0),
	datab => \convert_binary|ALT_INV_int_data_3\(1),
	datac => \convert_binary|ALT_INV_int_data_3\(2),
	datad => \convert_binary|ALT_INV_int_data_3\(3),
	combout => \seven_seg_display_3|Mux1~0_combout\);

\seven_seg_display_3|seven_seg[5]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \seven_seg_display_3|Mux1~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \seven_seg_display_3|seven_seg\(5));

\seven_seg_display_3|Mux0~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \seven_seg_display_3|Mux0~0_combout\ = (!\convert_binary|int_data_3\(3) & ((!\convert_binary|int_data_3\(1) & ((!\convert_binary|int_data_3\(2)))) # (\convert_binary|int_data_3\(1) & (\convert_binary|int_data_3\(0) & \convert_binary|int_data_3\(2)))))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "1100000100000000110000010000000011000001000000001100000100000000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|ALT_INV_int_data_3\(0),
	datab => \convert_binary|ALT_INV_int_data_3\(1),
	datac => \convert_binary|ALT_INV_int_data_3\(2),
	datad => \convert_binary|ALT_INV_int_data_3\(3),
	combout => \seven_seg_display_3|Mux0~0_combout\);

\seven_seg_display_3|seven_seg[6]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \seven_seg_display_3|Mux0~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \seven_seg_display_3|seven_seg\(6));

\Remainder_input[0]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \division_function|R\(0),
	clrn => \RST_main~input_o\,
	ena => \check_zero_divisor~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => Remainder_input(0));

\Remainder_input[9]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \division_function|R\(9),
	clrn => \RST_main~input_o\,
	ena => \check_zero_divisor~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => Remainder_input(9));

\Remainder_input[8]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \division_function|R\(8),
	clrn => \RST_main~input_o\,
	ena => \check_zero_divisor~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => Remainder_input(8));

\Remainder_input[7]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \division_function|R\(7),
	clrn => \RST_main~input_o\,
	ena => \check_zero_divisor~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => Remainder_input(7));

\Remainder_input[6]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \division_function|R\(6),
	clrn => \RST_main~input_o\,
	ena => \check_zero_divisor~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => Remainder_input(6));

\convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[0]~17\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[0]~17_sumout\ = SUM(( Remainder_input(6) ) + ( !VCC ) + ( !VCC ))
-- \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[0]~18\ = CARRY(( Remainder_input(6) ) + ( !VCC ) + ( !VCC ))
-- \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[0]~19\ = SHARE(VCC)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	datad => ALT_INV_Remainder_input(6),
	cin => GND,
	sharein => GND,
	sumout => \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[0]~17_sumout\,
	cout => \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[0]~18\,
	shareout => \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[0]~19\);

\convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[1]~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[1]~13_sumout\ = SUM(( Remainder_input(7) ) + ( \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[0]~19\ ) + ( 
-- \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[0]~18\ ))
-- \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[1]~14\ = CARRY(( Remainder_input(7) ) + ( \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[0]~19\ ) + ( 
-- \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[0]~18\ ))
-- \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[1]~15\ = SHARE(GND)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000011111111",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	datad => ALT_INV_Remainder_input(7),
	cin => \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[0]~18\,
	sharein => \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[0]~19\,
	sumout => \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[1]~13_sumout\,
	cout => \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[1]~14\,
	shareout => \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[1]~15\);

\convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[2]~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[2]~9_sumout\ = SUM(( !Remainder_input(8) ) + ( \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[1]~15\ ) + ( 
-- \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[1]~14\ ))
-- \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[2]~10\ = CARRY(( !Remainder_input(8) ) + ( \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[1]~15\ ) + ( 
-- \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[1]~14\ ))
-- \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[2]~11\ = SHARE(Remainder_input(8))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000001111111100000000000000001111111100000000",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	datad => ALT_INV_Remainder_input(8),
	cin => \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[1]~14\,
	sharein => \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[1]~15\,
	sumout => \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[2]~9_sumout\,
	cout => \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[2]~10\,
	shareout => \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[2]~11\);

\convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[3]~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[3]~1_sumout\ = SUM(( Remainder_input(9) ) + ( \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[2]~11\ ) + ( 
-- \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[2]~10\ ))
-- \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[3]~2\ = CARRY(( Remainder_input(9) ) + ( \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[2]~11\ ) + ( 
-- \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[2]~10\ ))
-- \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[3]~3\ = SHARE(GND)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000011111111",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	datad => ALT_INV_Remainder_input(9),
	cin => \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[2]~10\,
	sharein => \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[2]~11\,
	sumout => \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[3]~1_sumout\,
	cout => \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[3]~2\,
	shareout => \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[3]~3\);

\convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[4]~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[4]~5_sumout\ = SUM(( VCC ) + ( \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[3]~3\ ) + ( 
-- \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[3]~2\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[3]~2\,
	sharein => \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[3]~3\,
	sumout => \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[4]~5_sumout\);

\convert_binary|Mod2|auto_generated|divider|divider|StageOut[33]~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|StageOut[33]~9_combout\ = (\convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[3]~1_sumout\ & !\convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[4]~5_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0100010001000100010001000100010001000100010001000100010001000100",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[3]~1_sumout\,
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~5_sumout\,
	combout => \convert_binary|Mod2|auto_generated|divider|divider|StageOut[33]~9_combout\);

\convert_binary|Mod2|auto_generated|divider|divider|StageOut[33]~10\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|StageOut[33]~10_combout\ = (Remainder_input(9) & \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[4]~5_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => ALT_INV_Remainder_input(9),
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~5_sumout\,
	combout => \convert_binary|Mod2|auto_generated|divider|divider|StageOut[33]~10_combout\);

\convert_binary|Mod2|auto_generated|divider|divider|StageOut[31]~30\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|StageOut[31]~30_combout\ = (!\convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[4]~5_sumout\ & 
-- \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[1]~13_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~5_sumout\,
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[1]~13_sumout\,
	combout => \convert_binary|Mod2|auto_generated|divider|divider|StageOut[31]~30_combout\);

\convert_binary|Mod2|auto_generated|divider|divider|StageOut[31]~31\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|StageOut[31]~31_combout\ = (Remainder_input(7) & \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[4]~5_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => ALT_INV_Remainder_input(7),
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~5_sumout\,
	combout => \convert_binary|Mod2|auto_generated|divider|divider|StageOut[31]~31_combout\);

\Remainder_input[5]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \division_function|R\(5),
	clrn => \RST_main~input_o\,
	ena => \check_zero_divisor~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => Remainder_input(5));

\convert_binary|Mod2|auto_generated|divider|divider|op_5~26\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|op_5~26_cout\ = CARRY(( VCC ) + ( VCC ) + ( !VCC ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => GND,
	cout => \convert_binary|Mod2|auto_generated|divider|divider|op_5~26_cout\);

\convert_binary|Mod2|auto_generated|divider|divider|op_5~21\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|op_5~21_sumout\ = SUM(( Remainder_input(5) ) + ( VCC ) + ( \convert_binary|Mod2|auto_generated|divider|divider|op_5~26_cout\ ))
-- \convert_binary|Mod2|auto_generated|divider|divider|op_5~22\ = CARRY(( Remainder_input(5) ) + ( VCC ) + ( \convert_binary|Mod2|auto_generated|divider|divider|op_5~26_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => ALT_INV_Remainder_input(5),
	cin => \convert_binary|Mod2|auto_generated|divider|divider|op_5~26_cout\,
	sumout => \convert_binary|Mod2|auto_generated|divider|divider|op_5~21_sumout\,
	cout => \convert_binary|Mod2|auto_generated|divider|divider|op_5~22\);

\convert_binary|Mod2|auto_generated|divider|divider|op_5~17\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|op_5~17_sumout\ = SUM(( (!\convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[4]~5_sumout\ & 
-- ((\convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[0]~17_sumout\))) # (\convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[4]~5_sumout\ & (Remainder_input(6))) ) + ( GND ) + ( 
-- \convert_binary|Mod2|auto_generated|divider|divider|op_5~22\ ))
-- \convert_binary|Mod2|auto_generated|divider|divider|op_5~18\ = CARRY(( (!\convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[4]~5_sumout\ & ((\convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[0]~17_sumout\))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[4]~5_sumout\ & (Remainder_input(6))) ) + ( GND ) + ( \convert_binary|Mod2|auto_generated|divider|divider|op_5~22\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000010111110101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => ALT_INV_Remainder_input(6),
	datac => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~5_sumout\,
	datad => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[0]~17_sumout\,
	cin => \convert_binary|Mod2|auto_generated|divider|divider|op_5~22\,
	sumout => \convert_binary|Mod2|auto_generated|divider|divider|op_5~17_sumout\,
	cout => \convert_binary|Mod2|auto_generated|divider|divider|op_5~18\);

\convert_binary|Mod2|auto_generated|divider|divider|op_5~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|op_5~13_sumout\ = SUM(( (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[31]~31_combout\) # (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[31]~30_combout\) ) + ( VCC ) + ( 
-- \convert_binary|Mod2|auto_generated|divider|divider|op_5~18\ ))
-- \convert_binary|Mod2|auto_generated|divider|divider|op_5~14\ = CARRY(( (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[31]~31_combout\) # (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[31]~30_combout\) ) + ( VCC ) + ( 
-- \convert_binary|Mod2|auto_generated|divider|divider|op_5~18\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000011001111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[31]~30_combout\,
	datad => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[31]~31_combout\,
	cin => \convert_binary|Mod2|auto_generated|divider|divider|op_5~18\,
	sumout => \convert_binary|Mod2|auto_generated|divider|divider|op_5~13_sumout\,
	cout => \convert_binary|Mod2|auto_generated|divider|divider|op_5~14\);

\convert_binary|Mod2|auto_generated|divider|divider|op_5~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|op_5~9_sumout\ = SUM(( (!\convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[4]~5_sumout\ & ((\convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[2]~9_sumout\))) 
-- # (\convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[4]~5_sumout\ & (Remainder_input(8))) ) + ( GND ) + ( \convert_binary|Mod2|auto_generated|divider|divider|op_5~14\ ))
-- \convert_binary|Mod2|auto_generated|divider|divider|op_5~10\ = CARRY(( (!\convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[4]~5_sumout\ & ((\convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[2]~9_sumout\))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[4]~5_sumout\ & (Remainder_input(8))) ) + ( GND ) + ( \convert_binary|Mod2|auto_generated|divider|divider|op_5~14\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000010111110101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => ALT_INV_Remainder_input(8),
	datac => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~5_sumout\,
	datad => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[2]~9_sumout\,
	cin => \convert_binary|Mod2|auto_generated|divider|divider|op_5~14\,
	sumout => \convert_binary|Mod2|auto_generated|divider|divider|op_5~9_sumout\,
	cout => \convert_binary|Mod2|auto_generated|divider|divider|op_5~10\);

\convert_binary|Mod2|auto_generated|divider|divider|op_5~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|op_5~5_sumout\ = SUM(( (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[33]~10_combout\) # (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[33]~9_combout\) ) + ( VCC ) + ( 
-- \convert_binary|Mod2|auto_generated|divider|divider|op_5~10\ ))
-- \convert_binary|Mod2|auto_generated|divider|divider|op_5~6\ = CARRY(( (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[33]~10_combout\) # (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[33]~9_combout\) ) + ( VCC ) + ( 
-- \convert_binary|Mod2|auto_generated|divider|divider|op_5~10\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000011001111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[33]~9_combout\,
	datad => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[33]~10_combout\,
	cin => \convert_binary|Mod2|auto_generated|divider|divider|op_5~10\,
	sumout => \convert_binary|Mod2|auto_generated|divider|divider|op_5~5_sumout\,
	cout => \convert_binary|Mod2|auto_generated|divider|divider|op_5~6\);

\convert_binary|Mod2|auto_generated|divider|divider|op_5~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|op_5~1_sumout\ = SUM(( VCC ) + ( GND ) + ( \convert_binary|Mod2|auto_generated|divider|divider|op_5~6\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Mod2|auto_generated|divider|divider|op_5~6\,
	sumout => \convert_binary|Mod2|auto_generated|divider|divider|op_5~1_sumout\);

\convert_binary|Mod2|auto_generated|divider|divider|StageOut[32]~17\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|StageOut[32]~17_combout\ = (!\convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[4]~5_sumout\ & \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[2]~9_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~5_sumout\,
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[2]~9_sumout\,
	combout => \convert_binary|Mod2|auto_generated|divider|divider|StageOut[32]~17_combout\);

\convert_binary|Mod2|auto_generated|divider|divider|StageOut[32]~18\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|StageOut[32]~18_combout\ = (Remainder_input(8) & \convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[4]~5_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => ALT_INV_Remainder_input(8),
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~5_sumout\,
	combout => \convert_binary|Mod2|auto_generated|divider|divider|StageOut[32]~18_combout\);

\convert_binary|Mod2|auto_generated|divider|divider|StageOut[31]~25\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|StageOut[31]~25_combout\ = (!\convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[4]~5_sumout\ & 
-- ((\convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[1]~13_sumout\))) # (\convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[4]~5_sumout\ & (Remainder_input(7)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001110100011101000111010001110100011101000111010001110100011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => ALT_INV_Remainder_input(7),
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~5_sumout\,
	datac => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[1]~13_sumout\,
	combout => \convert_binary|Mod2|auto_generated|divider|divider|StageOut[31]~25_combout\);

\convert_binary|Mod2|auto_generated|divider|divider|StageOut[30]~34\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|StageOut[30]~34_combout\ = (!\convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[4]~5_sumout\ & 
-- ((\convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[0]~17_sumout\))) # (\convert_binary|Mod2|auto_generated|divider|divider|add_sub_3_result_int[4]~5_sumout\ & (Remainder_input(6)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001110100011101000111010001110100011101000111010001110100011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => ALT_INV_Remainder_input(6),
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~5_sumout\,
	datac => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[0]~17_sumout\,
	combout => \convert_binary|Mod2|auto_generated|divider|divider|StageOut[30]~34_combout\);

\Remainder_input[4]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \division_function|R\(4),
	clrn => \RST_main~input_o\,
	ena => \check_zero_divisor~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => Remainder_input(4));

\convert_binary|Mod2|auto_generated|divider|divider|op_6~30\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|op_6~30_cout\ = CARRY(( VCC ) + ( VCC ) + ( !VCC ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => GND,
	cout => \convert_binary|Mod2|auto_generated|divider|divider|op_6~30_cout\);

\convert_binary|Mod2|auto_generated|divider|divider|op_6~25\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|op_6~25_sumout\ = SUM(( Remainder_input(4) ) + ( VCC ) + ( \convert_binary|Mod2|auto_generated|divider|divider|op_6~30_cout\ ))
-- \convert_binary|Mod2|auto_generated|divider|divider|op_6~26\ = CARRY(( Remainder_input(4) ) + ( VCC ) + ( \convert_binary|Mod2|auto_generated|divider|divider|op_6~30_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => ALT_INV_Remainder_input(4),
	cin => \convert_binary|Mod2|auto_generated|divider|divider|op_6~30_cout\,
	sumout => \convert_binary|Mod2|auto_generated|divider|divider|op_6~25_sumout\,
	cout => \convert_binary|Mod2|auto_generated|divider|divider|op_6~26\);

\convert_binary|Mod2|auto_generated|divider|divider|op_6~21\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|op_6~21_sumout\ = SUM(( (!\convert_binary|Mod2|auto_generated|divider|divider|op_5~1_sumout\ & ((\convert_binary|Mod2|auto_generated|divider|divider|op_5~21_sumout\))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_5~1_sumout\ & (Remainder_input(5))) ) + ( GND ) + ( \convert_binary|Mod2|auto_generated|divider|divider|op_6~26\ ))
-- \convert_binary|Mod2|auto_generated|divider|divider|op_6~22\ = CARRY(( (!\convert_binary|Mod2|auto_generated|divider|divider|op_5~1_sumout\ & ((\convert_binary|Mod2|auto_generated|divider|divider|op_5~21_sumout\))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_5~1_sumout\ & (Remainder_input(5))) ) + ( GND ) + ( \convert_binary|Mod2|auto_generated|divider|divider|op_6~26\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000001000111011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => ALT_INV_Remainder_input(5),
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\,
	datad => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_5~21_sumout\,
	cin => \convert_binary|Mod2|auto_generated|divider|divider|op_6~26\,
	sumout => \convert_binary|Mod2|auto_generated|divider|divider|op_6~21_sumout\,
	cout => \convert_binary|Mod2|auto_generated|divider|divider|op_6~22\);

\convert_binary|Mod2|auto_generated|divider|divider|op_6~17\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|op_6~17_sumout\ = SUM(( (!\convert_binary|Mod2|auto_generated|divider|divider|op_5~1_sumout\ & ((\convert_binary|Mod2|auto_generated|divider|divider|op_5~17_sumout\))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_5~1_sumout\ & (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[30]~34_combout\)) ) + ( VCC ) + ( \convert_binary|Mod2|auto_generated|divider|divider|op_6~22\ ))
-- \convert_binary|Mod2|auto_generated|divider|divider|op_6~18\ = CARRY(( (!\convert_binary|Mod2|auto_generated|divider|divider|op_5~1_sumout\ & ((\convert_binary|Mod2|auto_generated|divider|divider|op_5~17_sumout\))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_5~1_sumout\ & (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[30]~34_combout\)) ) + ( VCC ) + ( \convert_binary|Mod2|auto_generated|divider|divider|op_6~22\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000001111001111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\,
	datac => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[30]~34_combout\,
	datad => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_5~17_sumout\,
	cin => \convert_binary|Mod2|auto_generated|divider|divider|op_6~22\,
	sumout => \convert_binary|Mod2|auto_generated|divider|divider|op_6~17_sumout\,
	cout => \convert_binary|Mod2|auto_generated|divider|divider|op_6~18\);

\convert_binary|Mod2|auto_generated|divider|divider|op_6~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|op_6~13_sumout\ = SUM(( (!\convert_binary|Mod2|auto_generated|divider|divider|op_5~1_sumout\ & ((\convert_binary|Mod2|auto_generated|divider|divider|op_5~13_sumout\))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_5~1_sumout\ & (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[31]~25_combout\)) ) + ( GND ) + ( \convert_binary|Mod2|auto_generated|divider|divider|op_6~18\ ))
-- \convert_binary|Mod2|auto_generated|divider|divider|op_6~14\ = CARRY(( (!\convert_binary|Mod2|auto_generated|divider|divider|op_5~1_sumout\ & ((\convert_binary|Mod2|auto_generated|divider|divider|op_5~13_sumout\))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_5~1_sumout\ & (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[31]~25_combout\)) ) + ( GND ) + ( \convert_binary|Mod2|auto_generated|divider|divider|op_6~18\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\,
	datac => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[31]~25_combout\,
	datad => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_5~13_sumout\,
	cin => \convert_binary|Mod2|auto_generated|divider|divider|op_6~18\,
	sumout => \convert_binary|Mod2|auto_generated|divider|divider|op_6~13_sumout\,
	cout => \convert_binary|Mod2|auto_generated|divider|divider|op_6~14\);

\convert_binary|Mod2|auto_generated|divider|divider|op_6~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|op_6~9_sumout\ = SUM(( (!\convert_binary|Mod2|auto_generated|divider|divider|op_5~1_sumout\ & (((\convert_binary|Mod2|auto_generated|divider|divider|op_5~9_sumout\)))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_5~1_sumout\ & (((\convert_binary|Mod2|auto_generated|divider|divider|StageOut[32]~18_combout\)) # (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[32]~17_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod2|auto_generated|divider|divider|op_6~14\ ))
-- \convert_binary|Mod2|auto_generated|divider|divider|op_6~10\ = CARRY(( (!\convert_binary|Mod2|auto_generated|divider|divider|op_5~1_sumout\ & (((\convert_binary|Mod2|auto_generated|divider|divider|op_5~9_sumout\)))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_5~1_sumout\ & (((\convert_binary|Mod2|auto_generated|divider|divider|StageOut[32]~18_combout\)) # (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[32]~17_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod2|auto_generated|divider|divider|op_6~14\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\,
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[32]~17_combout\,
	datac => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_5~9_sumout\,
	datad => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[32]~18_combout\,
	cin => \convert_binary|Mod2|auto_generated|divider|divider|op_6~14\,
	sumout => \convert_binary|Mod2|auto_generated|divider|divider|op_6~9_sumout\,
	cout => \convert_binary|Mod2|auto_generated|divider|divider|op_6~10\);

\convert_binary|Mod2|auto_generated|divider|divider|op_6~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|op_6~5_sumout\ = SUM(( (!\convert_binary|Mod2|auto_generated|divider|divider|op_5~1_sumout\ & (((\convert_binary|Mod2|auto_generated|divider|divider|op_5~5_sumout\)))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_5~1_sumout\ & (((\convert_binary|Mod2|auto_generated|divider|divider|StageOut[33]~9_combout\)) # (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[33]~10_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod2|auto_generated|divider|divider|op_6~10\ ))
-- \convert_binary|Mod2|auto_generated|divider|divider|op_6~6\ = CARRY(( (!\convert_binary|Mod2|auto_generated|divider|divider|op_5~1_sumout\ & (((\convert_binary|Mod2|auto_generated|divider|divider|op_5~5_sumout\)))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_5~1_sumout\ & (((\convert_binary|Mod2|auto_generated|divider|divider|StageOut[33]~9_combout\)) # (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[33]~10_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod2|auto_generated|divider|divider|op_6~10\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001010110111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\,
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[33]~10_combout\,
	datac => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[33]~9_combout\,
	datad => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_5~5_sumout\,
	cin => \convert_binary|Mod2|auto_generated|divider|divider|op_6~10\,
	sumout => \convert_binary|Mod2|auto_generated|divider|divider|op_6~5_sumout\,
	cout => \convert_binary|Mod2|auto_generated|divider|divider|op_6~6\);

\convert_binary|Mod2|auto_generated|divider|divider|op_6~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|op_6~1_sumout\ = SUM(( VCC ) + ( GND ) + ( \convert_binary|Mod2|auto_generated|divider|divider|op_6~6\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Mod2|auto_generated|divider|divider|op_6~6\,
	sumout => \convert_binary|Mod2|auto_generated|divider|divider|op_6~1_sumout\);

\convert_binary|Mod2|auto_generated|divider|divider|StageOut[44]~8\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|StageOut[44]~8_combout\ = (!\convert_binary|Mod2|auto_generated|divider|divider|op_5~1_sumout\ & \convert_binary|Mod2|auto_generated|divider|divider|op_5~5_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\,
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_5~5_sumout\,
	combout => \convert_binary|Mod2|auto_generated|divider|divider|StageOut[44]~8_combout\);

\convert_binary|Mod2|auto_generated|divider|divider|StageOut[44]~11\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|StageOut[44]~11_combout\ = (\convert_binary|Mod2|auto_generated|divider|divider|op_5~1_sumout\ & ((\convert_binary|Mod2|auto_generated|divider|divider|StageOut[33]~10_combout\) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[33]~9_combout\)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000011100000111000001110000011100000111000001110000011100000111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[33]~9_combout\,
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[33]~10_combout\,
	datac => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\,
	combout => \convert_binary|Mod2|auto_generated|divider|divider|StageOut[44]~11_combout\);

\convert_binary|Mod2|auto_generated|divider|divider|StageOut[43]~19\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|StageOut[43]~19_combout\ = (!\convert_binary|Mod2|auto_generated|divider|divider|op_5~1_sumout\ & (((\convert_binary|Mod2|auto_generated|divider|divider|op_5~9_sumout\)))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_5~1_sumout\ & (((\convert_binary|Mod2|auto_generated|divider|divider|StageOut[32]~18_combout\)) # (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[32]~17_combout\)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001101101011111000110110101111100011011010111110001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\,
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[32]~17_combout\,
	datac => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_5~9_sumout\,
	datad => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[32]~18_combout\,
	combout => \convert_binary|Mod2|auto_generated|divider|divider|StageOut[43]~19_combout\);

\convert_binary|Mod2|auto_generated|divider|divider|StageOut[42]~24\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|StageOut[42]~24_combout\ = (!\convert_binary|Mod2|auto_generated|divider|divider|op_5~1_sumout\ & \convert_binary|Mod2|auto_generated|divider|divider|op_5~13_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\,
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_5~13_sumout\,
	combout => \convert_binary|Mod2|auto_generated|divider|divider|StageOut[42]~24_combout\);

\convert_binary|Mod2|auto_generated|divider|divider|StageOut[42]~26\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|StageOut[42]~26_combout\ = (\convert_binary|Mod2|auto_generated|divider|divider|op_5~1_sumout\ & \convert_binary|Mod2|auto_generated|divider|divider|StageOut[31]~25_combout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\,
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[31]~25_combout\,
	combout => \convert_binary|Mod2|auto_generated|divider|divider|StageOut[42]~26_combout\);

\convert_binary|Mod2|auto_generated|divider|divider|StageOut[41]~35\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|StageOut[41]~35_combout\ = (!\convert_binary|Mod2|auto_generated|divider|divider|op_5~1_sumout\ & ((\convert_binary|Mod2|auto_generated|divider|divider|op_5~17_sumout\))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_5~1_sumout\ & (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[30]~34_combout\))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001101100011011000110110001101100011011000110110001101100011011",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\,
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[30]~34_combout\,
	datac => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_5~17_sumout\,
	combout => \convert_binary|Mod2|auto_generated|divider|divider|StageOut[41]~35_combout\);

\convert_binary|Mod2|auto_generated|divider|divider|StageOut[40]~40\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|StageOut[40]~40_combout\ = (!\convert_binary|Mod2|auto_generated|divider|divider|op_5~1_sumout\ & ((\convert_binary|Mod2|auto_generated|divider|divider|op_5~21_sumout\))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_5~1_sumout\ & (Remainder_input(5)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001110100011101000111010001110100011101000111010001110100011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => ALT_INV_Remainder_input(5),
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\,
	datac => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_5~21_sumout\,
	combout => \convert_binary|Mod2|auto_generated|divider|divider|StageOut[40]~40_combout\);

\Remainder_input[3]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \division_function|R\(3),
	clrn => \RST_main~input_o\,
	ena => \check_zero_divisor~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => Remainder_input(3));

\convert_binary|Mod2|auto_generated|divider|divider|op_7~14\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|op_7~14_cout\ = CARRY(( VCC ) + ( VCC ) + ( !VCC ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => GND,
	cout => \convert_binary|Mod2|auto_generated|divider|divider|op_7~14_cout\);

\convert_binary|Mod2|auto_generated|divider|divider|op_7~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|op_7~5_sumout\ = SUM(( Remainder_input(3) ) + ( VCC ) + ( \convert_binary|Mod2|auto_generated|divider|divider|op_7~14_cout\ ))
-- \convert_binary|Mod2|auto_generated|divider|divider|op_7~6\ = CARRY(( Remainder_input(3) ) + ( VCC ) + ( \convert_binary|Mod2|auto_generated|divider|divider|op_7~14_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => ALT_INV_Remainder_input(3),
	cin => \convert_binary|Mod2|auto_generated|divider|divider|op_7~14_cout\,
	sumout => \convert_binary|Mod2|auto_generated|divider|divider|op_7~5_sumout\,
	cout => \convert_binary|Mod2|auto_generated|divider|divider|op_7~6\);

\convert_binary|Mod2|auto_generated|divider|divider|op_7~33\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|op_7~33_sumout\ = SUM(( (!\convert_binary|Mod2|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Mod2|auto_generated|divider|divider|op_6~25_sumout\))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_6~1_sumout\ & (Remainder_input(4))) ) + ( GND ) + ( \convert_binary|Mod2|auto_generated|divider|divider|op_7~6\ ))
-- \convert_binary|Mod2|auto_generated|divider|divider|op_7~34\ = CARRY(( (!\convert_binary|Mod2|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Mod2|auto_generated|divider|divider|op_6~25_sumout\))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_6~1_sumout\ & (Remainder_input(4))) ) + ( GND ) + ( \convert_binary|Mod2|auto_generated|divider|divider|op_7~6\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000001000111011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => ALT_INV_Remainder_input(4),
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datad => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_6~25_sumout\,
	cin => \convert_binary|Mod2|auto_generated|divider|divider|op_7~6\,
	sumout => \convert_binary|Mod2|auto_generated|divider|divider|op_7~33_sumout\,
	cout => \convert_binary|Mod2|auto_generated|divider|divider|op_7~34\);

\convert_binary|Mod2|auto_generated|divider|divider|op_7~29\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|op_7~29_sumout\ = SUM(( (!\convert_binary|Mod2|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Mod2|auto_generated|divider|divider|op_6~21_sumout\))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_6~1_sumout\ & (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[40]~40_combout\)) ) + ( VCC ) + ( \convert_binary|Mod2|auto_generated|divider|divider|op_7~34\ ))
-- \convert_binary|Mod2|auto_generated|divider|divider|op_7~30\ = CARRY(( (!\convert_binary|Mod2|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Mod2|auto_generated|divider|divider|op_6~21_sumout\))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_6~1_sumout\ & (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[40]~40_combout\)) ) + ( VCC ) + ( \convert_binary|Mod2|auto_generated|divider|divider|op_7~34\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000001111001111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datac => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[40]~40_combout\,
	datad => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_6~21_sumout\,
	cin => \convert_binary|Mod2|auto_generated|divider|divider|op_7~34\,
	sumout => \convert_binary|Mod2|auto_generated|divider|divider|op_7~29_sumout\,
	cout => \convert_binary|Mod2|auto_generated|divider|divider|op_7~30\);

\convert_binary|Mod2|auto_generated|divider|divider|op_7~25\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|op_7~25_sumout\ = SUM(( (!\convert_binary|Mod2|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Mod2|auto_generated|divider|divider|op_6~17_sumout\))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_6~1_sumout\ & (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[41]~35_combout\)) ) + ( GND ) + ( \convert_binary|Mod2|auto_generated|divider|divider|op_7~30\ ))
-- \convert_binary|Mod2|auto_generated|divider|divider|op_7~26\ = CARRY(( (!\convert_binary|Mod2|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Mod2|auto_generated|divider|divider|op_6~17_sumout\))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_6~1_sumout\ & (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[41]~35_combout\)) ) + ( GND ) + ( \convert_binary|Mod2|auto_generated|divider|divider|op_7~30\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datac => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[41]~35_combout\,
	datad => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_6~17_sumout\,
	cin => \convert_binary|Mod2|auto_generated|divider|divider|op_7~30\,
	sumout => \convert_binary|Mod2|auto_generated|divider|divider|op_7~25_sumout\,
	cout => \convert_binary|Mod2|auto_generated|divider|divider|op_7~26\);

\convert_binary|Mod2|auto_generated|divider|divider|op_7~21\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|op_7~21_sumout\ = SUM(( (!\convert_binary|Mod2|auto_generated|divider|divider|op_6~1_sumout\ & (((\convert_binary|Mod2|auto_generated|divider|divider|op_6~13_sumout\)))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_6~1_sumout\ & (((\convert_binary|Mod2|auto_generated|divider|divider|StageOut[42]~26_combout\)) # (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[42]~24_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod2|auto_generated|divider|divider|op_7~26\ ))
-- \convert_binary|Mod2|auto_generated|divider|divider|op_7~22\ = CARRY(( (!\convert_binary|Mod2|auto_generated|divider|divider|op_6~1_sumout\ & (((\convert_binary|Mod2|auto_generated|divider|divider|op_6~13_sumout\)))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_6~1_sumout\ & (((\convert_binary|Mod2|auto_generated|divider|divider|StageOut[42]~26_combout\)) # (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[42]~24_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod2|auto_generated|divider|divider|op_7~26\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[42]~24_combout\,
	datac => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_6~13_sumout\,
	datad => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[42]~26_combout\,
	cin => \convert_binary|Mod2|auto_generated|divider|divider|op_7~26\,
	sumout => \convert_binary|Mod2|auto_generated|divider|divider|op_7~21_sumout\,
	cout => \convert_binary|Mod2|auto_generated|divider|divider|op_7~22\);

\convert_binary|Mod2|auto_generated|divider|divider|op_7~17\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|op_7~17_sumout\ = SUM(( (!\convert_binary|Mod2|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Mod2|auto_generated|divider|divider|op_6~9_sumout\))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_6~1_sumout\ & (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[43]~19_combout\)) ) + ( VCC ) + ( \convert_binary|Mod2|auto_generated|divider|divider|op_7~22\ ))
-- \convert_binary|Mod2|auto_generated|divider|divider|op_7~18\ = CARRY(( (!\convert_binary|Mod2|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Mod2|auto_generated|divider|divider|op_6~9_sumout\))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_6~1_sumout\ & (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[43]~19_combout\)) ) + ( VCC ) + ( \convert_binary|Mod2|auto_generated|divider|divider|op_7~22\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datac => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[43]~19_combout\,
	datad => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_6~9_sumout\,
	cin => \convert_binary|Mod2|auto_generated|divider|divider|op_7~22\,
	sumout => \convert_binary|Mod2|auto_generated|divider|divider|op_7~17_sumout\,
	cout => \convert_binary|Mod2|auto_generated|divider|divider|op_7~18\);

\convert_binary|Mod2|auto_generated|divider|divider|op_7~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|op_7~9_sumout\ = SUM(( (!\convert_binary|Mod2|auto_generated|divider|divider|op_6~1_sumout\ & (((\convert_binary|Mod2|auto_generated|divider|divider|op_6~5_sumout\)))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_6~1_sumout\ & (((\convert_binary|Mod2|auto_generated|divider|divider|StageOut[44]~11_combout\)) # (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[44]~8_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod2|auto_generated|divider|divider|op_7~18\ ))
-- \convert_binary|Mod2|auto_generated|divider|divider|op_7~10\ = CARRY(( (!\convert_binary|Mod2|auto_generated|divider|divider|op_6~1_sumout\ & (((\convert_binary|Mod2|auto_generated|divider|divider|op_6~5_sumout\)))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_6~1_sumout\ & (((\convert_binary|Mod2|auto_generated|divider|divider|StageOut[44]~11_combout\)) # (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[44]~8_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod2|auto_generated|divider|divider|op_7~18\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[44]~8_combout\,
	datac => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_6~5_sumout\,
	datad => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[44]~11_combout\,
	cin => \convert_binary|Mod2|auto_generated|divider|divider|op_7~18\,
	sumout => \convert_binary|Mod2|auto_generated|divider|divider|op_7~9_sumout\,
	cout => \convert_binary|Mod2|auto_generated|divider|divider|op_7~10\);

\convert_binary|Mod2|auto_generated|divider|divider|op_7~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|op_7~1_sumout\ = SUM(( VCC ) + ( GND ) + ( \convert_binary|Mod2|auto_generated|divider|divider|op_7~10\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Mod2|auto_generated|divider|divider|op_7~10\,
	sumout => \convert_binary|Mod2|auto_generated|divider|divider|op_7~1_sumout\);

\convert_binary|Mod2|auto_generated|divider|divider|StageOut[55]~7\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|StageOut[55]~7_combout\ = (!\convert_binary|Mod2|auto_generated|divider|divider|op_6~1_sumout\ & \convert_binary|Mod2|auto_generated|divider|divider|op_6~5_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_6~5_sumout\,
	combout => \convert_binary|Mod2|auto_generated|divider|divider|StageOut[55]~7_combout\);

\convert_binary|Mod2|auto_generated|divider|divider|StageOut[55]~12\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|StageOut[55]~12_combout\ = (\convert_binary|Mod2|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Mod2|auto_generated|divider|divider|StageOut[44]~11_combout\) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[44]~8_combout\)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001010100010101000101010001010100010101000101010001010100010101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[44]~8_combout\,
	datac => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[44]~11_combout\,
	combout => \convert_binary|Mod2|auto_generated|divider|divider|StageOut[55]~12_combout\);

\convert_binary|Mod2|auto_generated|divider|divider|StageOut[54]~16\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|StageOut[54]~16_combout\ = (!\convert_binary|Mod2|auto_generated|divider|divider|op_6~1_sumout\ & \convert_binary|Mod2|auto_generated|divider|divider|op_6~9_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_6~9_sumout\,
	combout => \convert_binary|Mod2|auto_generated|divider|divider|StageOut[54]~16_combout\);

\convert_binary|Mod2|auto_generated|divider|divider|StageOut[54]~20\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|StageOut[54]~20_combout\ = (\convert_binary|Mod2|auto_generated|divider|divider|op_6~1_sumout\ & \convert_binary|Mod2|auto_generated|divider|divider|StageOut[43]~19_combout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[43]~19_combout\,
	combout => \convert_binary|Mod2|auto_generated|divider|divider|StageOut[54]~20_combout\);

\convert_binary|Mod2|auto_generated|divider|divider|StageOut[53]~27\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|StageOut[53]~27_combout\ = (!\convert_binary|Mod2|auto_generated|divider|divider|op_6~1_sumout\ & (((\convert_binary|Mod2|auto_generated|divider|divider|op_6~13_sumout\)))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_6~1_sumout\ & (((\convert_binary|Mod2|auto_generated|divider|divider|StageOut[42]~26_combout\)) # (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[42]~24_combout\)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001101101011111000110110101111100011011010111110001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[42]~24_combout\,
	datac => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_6~13_sumout\,
	datad => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[42]~26_combout\,
	combout => \convert_binary|Mod2|auto_generated|divider|divider|StageOut[53]~27_combout\);

\convert_binary|Mod2|auto_generated|divider|divider|StageOut[52]~33\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|StageOut[52]~33_combout\ = (!\convert_binary|Mod2|auto_generated|divider|divider|op_6~1_sumout\ & \convert_binary|Mod2|auto_generated|divider|divider|op_6~17_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_6~17_sumout\,
	combout => \convert_binary|Mod2|auto_generated|divider|divider|StageOut[52]~33_combout\);

\convert_binary|Mod2|auto_generated|divider|divider|StageOut[52]~36\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|StageOut[52]~36_combout\ = (\convert_binary|Mod2|auto_generated|divider|divider|op_6~1_sumout\ & \convert_binary|Mod2|auto_generated|divider|divider|StageOut[41]~35_combout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[41]~35_combout\,
	combout => \convert_binary|Mod2|auto_generated|divider|divider|StageOut[52]~36_combout\);

\convert_binary|Mod2|auto_generated|divider|divider|StageOut[51]~41\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|StageOut[51]~41_combout\ = (!\convert_binary|Mod2|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Mod2|auto_generated|divider|divider|op_6~21_sumout\))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_6~1_sumout\ & (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[40]~40_combout\))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001101100011011000110110001101100011011000110110001101100011011",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[40]~40_combout\,
	datac => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_6~21_sumout\,
	combout => \convert_binary|Mod2|auto_generated|divider|divider|StageOut[51]~41_combout\);

\convert_binary|Mod2|auto_generated|divider|divider|StageOut[50]~45\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|StageOut[50]~45_combout\ = (!\convert_binary|Mod2|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Mod2|auto_generated|divider|divider|op_6~25_sumout\))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_6~1_sumout\ & (Remainder_input(4)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001110100011101000111010001110100011101000111010001110100011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => ALT_INV_Remainder_input(4),
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datac => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_6~25_sumout\,
	combout => \convert_binary|Mod2|auto_generated|divider|divider|StageOut[50]~45_combout\);

\Remainder_input[2]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \division_function|R\(2),
	clrn => \RST_main~input_o\,
	ena => \check_zero_divisor~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => Remainder_input(2));

\convert_binary|Mod2|auto_generated|divider|divider|op_8~18\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|op_8~18_cout\ = CARRY(( VCC ) + ( VCC ) + ( !VCC ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => GND,
	cout => \convert_binary|Mod2|auto_generated|divider|divider|op_8~18_cout\);

\convert_binary|Mod2|auto_generated|divider|divider|op_8~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|op_8~5_sumout\ = SUM(( Remainder_input(2) ) + ( VCC ) + ( \convert_binary|Mod2|auto_generated|divider|divider|op_8~18_cout\ ))
-- \convert_binary|Mod2|auto_generated|divider|divider|op_8~6\ = CARRY(( Remainder_input(2) ) + ( VCC ) + ( \convert_binary|Mod2|auto_generated|divider|divider|op_8~18_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => ALT_INV_Remainder_input(2),
	cin => \convert_binary|Mod2|auto_generated|divider|divider|op_8~18_cout\,
	sumout => \convert_binary|Mod2|auto_generated|divider|divider|op_8~5_sumout\,
	cout => \convert_binary|Mod2|auto_generated|divider|divider|op_8~6\);

\convert_binary|Mod2|auto_generated|divider|divider|op_8~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|op_8~9_sumout\ = SUM(( (!\convert_binary|Mod2|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Mod2|auto_generated|divider|divider|op_7~5_sumout\))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_7~1_sumout\ & (Remainder_input(3))) ) + ( GND ) + ( \convert_binary|Mod2|auto_generated|divider|divider|op_8~6\ ))
-- \convert_binary|Mod2|auto_generated|divider|divider|op_8~10\ = CARRY(( (!\convert_binary|Mod2|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Mod2|auto_generated|divider|divider|op_7~5_sumout\))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_7~1_sumout\ & (Remainder_input(3))) ) + ( GND ) + ( \convert_binary|Mod2|auto_generated|divider|divider|op_8~6\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000001000111011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => ALT_INV_Remainder_input(3),
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datad => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_7~5_sumout\,
	cin => \convert_binary|Mod2|auto_generated|divider|divider|op_8~6\,
	sumout => \convert_binary|Mod2|auto_generated|divider|divider|op_8~9_sumout\,
	cout => \convert_binary|Mod2|auto_generated|divider|divider|op_8~10\);

\convert_binary|Mod2|auto_generated|divider|divider|op_8~37\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|op_8~37_sumout\ = SUM(( (!\convert_binary|Mod2|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Mod2|auto_generated|divider|divider|op_7~33_sumout\))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_7~1_sumout\ & (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[50]~45_combout\)) ) + ( VCC ) + ( \convert_binary|Mod2|auto_generated|divider|divider|op_8~10\ ))
-- \convert_binary|Mod2|auto_generated|divider|divider|op_8~38\ = CARRY(( (!\convert_binary|Mod2|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Mod2|auto_generated|divider|divider|op_7~33_sumout\))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_7~1_sumout\ & (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[50]~45_combout\)) ) + ( VCC ) + ( \convert_binary|Mod2|auto_generated|divider|divider|op_8~10\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000001111001111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datac => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[50]~45_combout\,
	datad => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_7~33_sumout\,
	cin => \convert_binary|Mod2|auto_generated|divider|divider|op_8~10\,
	sumout => \convert_binary|Mod2|auto_generated|divider|divider|op_8~37_sumout\,
	cout => \convert_binary|Mod2|auto_generated|divider|divider|op_8~38\);

\convert_binary|Mod2|auto_generated|divider|divider|op_8~33\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|op_8~33_sumout\ = SUM(( (!\convert_binary|Mod2|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Mod2|auto_generated|divider|divider|op_7~29_sumout\))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_7~1_sumout\ & (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[51]~41_combout\)) ) + ( GND ) + ( \convert_binary|Mod2|auto_generated|divider|divider|op_8~38\ ))
-- \convert_binary|Mod2|auto_generated|divider|divider|op_8~34\ = CARRY(( (!\convert_binary|Mod2|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Mod2|auto_generated|divider|divider|op_7~29_sumout\))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_7~1_sumout\ & (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[51]~41_combout\)) ) + ( GND ) + ( \convert_binary|Mod2|auto_generated|divider|divider|op_8~38\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datac => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[51]~41_combout\,
	datad => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_7~29_sumout\,
	cin => \convert_binary|Mod2|auto_generated|divider|divider|op_8~38\,
	sumout => \convert_binary|Mod2|auto_generated|divider|divider|op_8~33_sumout\,
	cout => \convert_binary|Mod2|auto_generated|divider|divider|op_8~34\);

\convert_binary|Mod2|auto_generated|divider|divider|op_8~29\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|op_8~29_sumout\ = SUM(( (!\convert_binary|Mod2|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod2|auto_generated|divider|divider|op_7~25_sumout\)))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod2|auto_generated|divider|divider|StageOut[52]~36_combout\)) # (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[52]~33_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod2|auto_generated|divider|divider|op_8~34\ ))
-- \convert_binary|Mod2|auto_generated|divider|divider|op_8~30\ = CARRY(( (!\convert_binary|Mod2|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod2|auto_generated|divider|divider|op_7~25_sumout\)))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod2|auto_generated|divider|divider|StageOut[52]~36_combout\)) # (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[52]~33_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod2|auto_generated|divider|divider|op_8~34\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[52]~33_combout\,
	datac => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_7~25_sumout\,
	datad => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[52]~36_combout\,
	cin => \convert_binary|Mod2|auto_generated|divider|divider|op_8~34\,
	sumout => \convert_binary|Mod2|auto_generated|divider|divider|op_8~29_sumout\,
	cout => \convert_binary|Mod2|auto_generated|divider|divider|op_8~30\);

\convert_binary|Mod2|auto_generated|divider|divider|op_8~25\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|op_8~25_sumout\ = SUM(( (!\convert_binary|Mod2|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Mod2|auto_generated|divider|divider|op_7~21_sumout\))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_7~1_sumout\ & (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[53]~27_combout\)) ) + ( VCC ) + ( \convert_binary|Mod2|auto_generated|divider|divider|op_8~30\ ))
-- \convert_binary|Mod2|auto_generated|divider|divider|op_8~26\ = CARRY(( (!\convert_binary|Mod2|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Mod2|auto_generated|divider|divider|op_7~21_sumout\))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_7~1_sumout\ & (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[53]~27_combout\)) ) + ( VCC ) + ( \convert_binary|Mod2|auto_generated|divider|divider|op_8~30\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datac => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[53]~27_combout\,
	datad => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_7~21_sumout\,
	cin => \convert_binary|Mod2|auto_generated|divider|divider|op_8~30\,
	sumout => \convert_binary|Mod2|auto_generated|divider|divider|op_8~25_sumout\,
	cout => \convert_binary|Mod2|auto_generated|divider|divider|op_8~26\);

\convert_binary|Mod2|auto_generated|divider|divider|op_8~21\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|op_8~21_sumout\ = SUM(( (!\convert_binary|Mod2|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod2|auto_generated|divider|divider|op_7~17_sumout\)))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod2|auto_generated|divider|divider|StageOut[54]~20_combout\)) # (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[54]~16_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod2|auto_generated|divider|divider|op_8~26\ ))
-- \convert_binary|Mod2|auto_generated|divider|divider|op_8~22\ = CARRY(( (!\convert_binary|Mod2|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod2|auto_generated|divider|divider|op_7~17_sumout\)))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod2|auto_generated|divider|divider|StageOut[54]~20_combout\)) # (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[54]~16_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod2|auto_generated|divider|divider|op_8~26\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[54]~16_combout\,
	datac => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_7~17_sumout\,
	datad => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[54]~20_combout\,
	cin => \convert_binary|Mod2|auto_generated|divider|divider|op_8~26\,
	sumout => \convert_binary|Mod2|auto_generated|divider|divider|op_8~21_sumout\,
	cout => \convert_binary|Mod2|auto_generated|divider|divider|op_8~22\);

\convert_binary|Mod2|auto_generated|divider|divider|op_8~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|op_8~13_sumout\ = SUM(( (!\convert_binary|Mod2|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod2|auto_generated|divider|divider|op_7~9_sumout\)))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod2|auto_generated|divider|divider|StageOut[55]~12_combout\)) # (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[55]~7_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod2|auto_generated|divider|divider|op_8~22\ ))
-- \convert_binary|Mod2|auto_generated|divider|divider|op_8~14\ = CARRY(( (!\convert_binary|Mod2|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod2|auto_generated|divider|divider|op_7~9_sumout\)))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod2|auto_generated|divider|divider|StageOut[55]~12_combout\)) # (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[55]~7_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod2|auto_generated|divider|divider|op_8~22\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[55]~7_combout\,
	datac => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_7~9_sumout\,
	datad => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[55]~12_combout\,
	cin => \convert_binary|Mod2|auto_generated|divider|divider|op_8~22\,
	sumout => \convert_binary|Mod2|auto_generated|divider|divider|op_8~13_sumout\,
	cout => \convert_binary|Mod2|auto_generated|divider|divider|op_8~14\);

\convert_binary|Mod2|auto_generated|divider|divider|op_8~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|op_8~1_sumout\ = SUM(( VCC ) + ( GND ) + ( \convert_binary|Mod2|auto_generated|divider|divider|op_8~14\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Mod2|auto_generated|divider|divider|op_8~14\,
	sumout => \convert_binary|Mod2|auto_generated|divider|divider|op_8~1_sumout\);

\convert_binary|Mod2|auto_generated|divider|divider|StageOut[66]~6\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|StageOut[66]~6_combout\ = (!\convert_binary|Mod2|auto_generated|divider|divider|op_7~1_sumout\ & \convert_binary|Mod2|auto_generated|divider|divider|op_7~9_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_7~9_sumout\,
	combout => \convert_binary|Mod2|auto_generated|divider|divider|StageOut[66]~6_combout\);

\convert_binary|Mod2|auto_generated|divider|divider|StageOut[66]~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|StageOut[66]~13_combout\ = (\convert_binary|Mod2|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Mod2|auto_generated|divider|divider|StageOut[55]~12_combout\) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[55]~7_combout\)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001010100010101000101010001010100010101000101010001010100010101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[55]~7_combout\,
	datac => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[55]~12_combout\,
	combout => \convert_binary|Mod2|auto_generated|divider|divider|StageOut[66]~13_combout\);

\convert_binary|Mod2|auto_generated|divider|divider|StageOut[65]~21\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|StageOut[65]~21_combout\ = (!\convert_binary|Mod2|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod2|auto_generated|divider|divider|op_7~17_sumout\)))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod2|auto_generated|divider|divider|StageOut[54]~20_combout\)) # (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[54]~16_combout\)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001101101011111000110110101111100011011010111110001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[54]~16_combout\,
	datac => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_7~17_sumout\,
	datad => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[54]~20_combout\,
	combout => \convert_binary|Mod2|auto_generated|divider|divider|StageOut[65]~21_combout\);

\convert_binary|Mod2|auto_generated|divider|divider|StageOut[64]~23\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|StageOut[64]~23_combout\ = (!\convert_binary|Mod2|auto_generated|divider|divider|op_7~1_sumout\ & \convert_binary|Mod2|auto_generated|divider|divider|op_7~21_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_7~21_sumout\,
	combout => \convert_binary|Mod2|auto_generated|divider|divider|StageOut[64]~23_combout\);

\convert_binary|Mod2|auto_generated|divider|divider|StageOut[64]~28\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|StageOut[64]~28_combout\ = (\convert_binary|Mod2|auto_generated|divider|divider|op_7~1_sumout\ & \convert_binary|Mod2|auto_generated|divider|divider|StageOut[53]~27_combout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[53]~27_combout\,
	combout => \convert_binary|Mod2|auto_generated|divider|divider|StageOut[64]~28_combout\);

\convert_binary|Mod2|auto_generated|divider|divider|StageOut[63]~37\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|StageOut[63]~37_combout\ = (!\convert_binary|Mod2|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod2|auto_generated|divider|divider|op_7~25_sumout\)))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod2|auto_generated|divider|divider|StageOut[52]~36_combout\)) # (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[52]~33_combout\)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001101101011111000110110101111100011011010111110001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[52]~33_combout\,
	datac => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_7~25_sumout\,
	datad => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[52]~36_combout\,
	combout => \convert_binary|Mod2|auto_generated|divider|divider|StageOut[63]~37_combout\);

\convert_binary|Mod2|auto_generated|divider|divider|StageOut[62]~39\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|StageOut[62]~39_combout\ = (!\convert_binary|Mod2|auto_generated|divider|divider|op_7~1_sumout\ & \convert_binary|Mod2|auto_generated|divider|divider|op_7~29_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_7~29_sumout\,
	combout => \convert_binary|Mod2|auto_generated|divider|divider|StageOut[62]~39_combout\);

\convert_binary|Mod2|auto_generated|divider|divider|StageOut[62]~42\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|StageOut[62]~42_combout\ = (\convert_binary|Mod2|auto_generated|divider|divider|op_7~1_sumout\ & \convert_binary|Mod2|auto_generated|divider|divider|StageOut[51]~41_combout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[51]~41_combout\,
	combout => \convert_binary|Mod2|auto_generated|divider|divider|StageOut[62]~42_combout\);

\convert_binary|Mod2|auto_generated|divider|divider|StageOut[61]~46\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|StageOut[61]~46_combout\ = (!\convert_binary|Mod2|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Mod2|auto_generated|divider|divider|op_7~33_sumout\))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_7~1_sumout\ & (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[50]~45_combout\))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001101100011011000110110001101100011011000110110001101100011011",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[50]~45_combout\,
	datac => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_7~33_sumout\,
	combout => \convert_binary|Mod2|auto_generated|divider|divider|StageOut[61]~46_combout\);

\convert_binary|Mod2|auto_generated|divider|divider|StageOut[60]~3\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|StageOut[60]~3_combout\ = (!\convert_binary|Mod2|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Mod2|auto_generated|divider|divider|op_7~5_sumout\))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_7~1_sumout\ & (Remainder_input(3)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001110100011101000111010001110100011101000111010001110100011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => ALT_INV_Remainder_input(3),
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datac => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_7~5_sumout\,
	combout => \convert_binary|Mod2|auto_generated|divider|divider|StageOut[60]~3_combout\);

\Remainder_input[1]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \division_function|R\(1),
	clrn => \RST_main~input_o\,
	ena => \check_zero_divisor~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => Remainder_input(1));

\convert_binary|Mod2|auto_generated|divider|divider|op_9~22\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|op_9~22_cout\ = CARRY(( VCC ) + ( VCC ) + ( !VCC ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => GND,
	cout => \convert_binary|Mod2|auto_generated|divider|divider|op_9~22_cout\);

\convert_binary|Mod2|auto_generated|divider|divider|op_9~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|op_9~5_sumout\ = SUM(( Remainder_input(1) ) + ( VCC ) + ( \convert_binary|Mod2|auto_generated|divider|divider|op_9~22_cout\ ))
-- \convert_binary|Mod2|auto_generated|divider|divider|op_9~6\ = CARRY(( Remainder_input(1) ) + ( VCC ) + ( \convert_binary|Mod2|auto_generated|divider|divider|op_9~22_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => ALT_INV_Remainder_input(1),
	cin => \convert_binary|Mod2|auto_generated|divider|divider|op_9~22_cout\,
	sumout => \convert_binary|Mod2|auto_generated|divider|divider|op_9~5_sumout\,
	cout => \convert_binary|Mod2|auto_generated|divider|divider|op_9~6\);

\convert_binary|Mod2|auto_generated|divider|divider|op_9~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|op_9~9_sumout\ = SUM(( (!\convert_binary|Mod2|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod2|auto_generated|divider|divider|op_8~5_sumout\))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_8~1_sumout\ & (Remainder_input(2))) ) + ( GND ) + ( \convert_binary|Mod2|auto_generated|divider|divider|op_9~6\ ))
-- \convert_binary|Mod2|auto_generated|divider|divider|op_9~10\ = CARRY(( (!\convert_binary|Mod2|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod2|auto_generated|divider|divider|op_8~5_sumout\))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_8~1_sumout\ & (Remainder_input(2))) ) + ( GND ) + ( \convert_binary|Mod2|auto_generated|divider|divider|op_9~6\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000001000111011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => ALT_INV_Remainder_input(2),
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datad => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_8~5_sumout\,
	cin => \convert_binary|Mod2|auto_generated|divider|divider|op_9~6\,
	sumout => \convert_binary|Mod2|auto_generated|divider|divider|op_9~9_sumout\,
	cout => \convert_binary|Mod2|auto_generated|divider|divider|op_9~10\);

\convert_binary|Mod2|auto_generated|divider|divider|op_9~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|op_9~13_sumout\ = SUM(( (!\convert_binary|Mod2|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod2|auto_generated|divider|divider|op_8~9_sumout\))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[60]~3_combout\)) ) + ( VCC ) + ( \convert_binary|Mod2|auto_generated|divider|divider|op_9~10\ ))
-- \convert_binary|Mod2|auto_generated|divider|divider|op_9~14\ = CARRY(( (!\convert_binary|Mod2|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod2|auto_generated|divider|divider|op_8~9_sumout\))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[60]~3_combout\)) ) + ( VCC ) + ( \convert_binary|Mod2|auto_generated|divider|divider|op_9~10\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000001111001111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datac => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[60]~3_combout\,
	datad => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_8~9_sumout\,
	cin => \convert_binary|Mod2|auto_generated|divider|divider|op_9~10\,
	sumout => \convert_binary|Mod2|auto_generated|divider|divider|op_9~13_sumout\,
	cout => \convert_binary|Mod2|auto_generated|divider|divider|op_9~14\);

\convert_binary|Mod2|auto_generated|divider|divider|op_9~41\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|op_9~41_sumout\ = SUM(( (!\convert_binary|Mod2|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod2|auto_generated|divider|divider|op_8~37_sumout\))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[61]~46_combout\)) ) + ( GND ) + ( \convert_binary|Mod2|auto_generated|divider|divider|op_9~14\ ))
-- \convert_binary|Mod2|auto_generated|divider|divider|op_9~42\ = CARRY(( (!\convert_binary|Mod2|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod2|auto_generated|divider|divider|op_8~37_sumout\))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[61]~46_combout\)) ) + ( GND ) + ( \convert_binary|Mod2|auto_generated|divider|divider|op_9~14\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datac => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[61]~46_combout\,
	datad => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_8~37_sumout\,
	cin => \convert_binary|Mod2|auto_generated|divider|divider|op_9~14\,
	sumout => \convert_binary|Mod2|auto_generated|divider|divider|op_9~41_sumout\,
	cout => \convert_binary|Mod2|auto_generated|divider|divider|op_9~42\);

\convert_binary|Mod2|auto_generated|divider|divider|op_9~37\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|op_9~37_sumout\ = SUM(( (!\convert_binary|Mod2|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod2|auto_generated|divider|divider|op_8~33_sumout\)))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod2|auto_generated|divider|divider|StageOut[62]~42_combout\)) # (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[62]~39_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod2|auto_generated|divider|divider|op_9~42\ ))
-- \convert_binary|Mod2|auto_generated|divider|divider|op_9~38\ = CARRY(( (!\convert_binary|Mod2|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod2|auto_generated|divider|divider|op_8~33_sumout\)))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod2|auto_generated|divider|divider|StageOut[62]~42_combout\)) # (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[62]~39_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod2|auto_generated|divider|divider|op_9~42\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[62]~39_combout\,
	datac => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_8~33_sumout\,
	datad => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[62]~42_combout\,
	cin => \convert_binary|Mod2|auto_generated|divider|divider|op_9~42\,
	sumout => \convert_binary|Mod2|auto_generated|divider|divider|op_9~37_sumout\,
	cout => \convert_binary|Mod2|auto_generated|divider|divider|op_9~38\);

\convert_binary|Mod2|auto_generated|divider|divider|op_9~33\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|op_9~33_sumout\ = SUM(( (!\convert_binary|Mod2|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod2|auto_generated|divider|divider|op_8~29_sumout\))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[63]~37_combout\)) ) + ( VCC ) + ( \convert_binary|Mod2|auto_generated|divider|divider|op_9~38\ ))
-- \convert_binary|Mod2|auto_generated|divider|divider|op_9~34\ = CARRY(( (!\convert_binary|Mod2|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod2|auto_generated|divider|divider|op_8~29_sumout\))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[63]~37_combout\)) ) + ( VCC ) + ( \convert_binary|Mod2|auto_generated|divider|divider|op_9~38\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datac => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[63]~37_combout\,
	datad => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_8~29_sumout\,
	cin => \convert_binary|Mod2|auto_generated|divider|divider|op_9~38\,
	sumout => \convert_binary|Mod2|auto_generated|divider|divider|op_9~33_sumout\,
	cout => \convert_binary|Mod2|auto_generated|divider|divider|op_9~34\);

\convert_binary|Mod2|auto_generated|divider|divider|op_9~29\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|op_9~29_sumout\ = SUM(( (!\convert_binary|Mod2|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod2|auto_generated|divider|divider|op_8~25_sumout\)))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod2|auto_generated|divider|divider|StageOut[64]~28_combout\)) # (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[64]~23_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod2|auto_generated|divider|divider|op_9~34\ ))
-- \convert_binary|Mod2|auto_generated|divider|divider|op_9~30\ = CARRY(( (!\convert_binary|Mod2|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod2|auto_generated|divider|divider|op_8~25_sumout\)))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod2|auto_generated|divider|divider|StageOut[64]~28_combout\)) # (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[64]~23_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod2|auto_generated|divider|divider|op_9~34\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[64]~23_combout\,
	datac => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_8~25_sumout\,
	datad => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[64]~28_combout\,
	cin => \convert_binary|Mod2|auto_generated|divider|divider|op_9~34\,
	sumout => \convert_binary|Mod2|auto_generated|divider|divider|op_9~29_sumout\,
	cout => \convert_binary|Mod2|auto_generated|divider|divider|op_9~30\);

\convert_binary|Mod2|auto_generated|divider|divider|op_9~25\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|op_9~25_sumout\ = SUM(( (!\convert_binary|Mod2|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod2|auto_generated|divider|divider|op_8~21_sumout\))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[65]~21_combout\)) ) + ( VCC ) + ( \convert_binary|Mod2|auto_generated|divider|divider|op_9~30\ ))
-- \convert_binary|Mod2|auto_generated|divider|divider|op_9~26\ = CARRY(( (!\convert_binary|Mod2|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod2|auto_generated|divider|divider|op_8~21_sumout\))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[65]~21_combout\)) ) + ( VCC ) + ( \convert_binary|Mod2|auto_generated|divider|divider|op_9~30\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datac => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[65]~21_combout\,
	datad => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_8~21_sumout\,
	cin => \convert_binary|Mod2|auto_generated|divider|divider|op_9~30\,
	sumout => \convert_binary|Mod2|auto_generated|divider|divider|op_9~25_sumout\,
	cout => \convert_binary|Mod2|auto_generated|divider|divider|op_9~26\);

\convert_binary|Mod2|auto_generated|divider|divider|op_9~17\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|op_9~17_sumout\ = SUM(( (!\convert_binary|Mod2|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod2|auto_generated|divider|divider|op_8~13_sumout\)))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod2|auto_generated|divider|divider|StageOut[66]~13_combout\)) # (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[66]~6_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod2|auto_generated|divider|divider|op_9~26\ ))
-- \convert_binary|Mod2|auto_generated|divider|divider|op_9~18\ = CARRY(( (!\convert_binary|Mod2|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod2|auto_generated|divider|divider|op_8~13_sumout\)))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod2|auto_generated|divider|divider|StageOut[66]~13_combout\)) # (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[66]~6_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod2|auto_generated|divider|divider|op_9~26\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[66]~6_combout\,
	datac => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_8~13_sumout\,
	datad => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[66]~13_combout\,
	cin => \convert_binary|Mod2|auto_generated|divider|divider|op_9~26\,
	sumout => \convert_binary|Mod2|auto_generated|divider|divider|op_9~17_sumout\,
	cout => \convert_binary|Mod2|auto_generated|divider|divider|op_9~18\);

\convert_binary|Mod2|auto_generated|divider|divider|op_9~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|op_9~1_sumout\ = SUM(( VCC ) + ( GND ) + ( \convert_binary|Mod2|auto_generated|divider|divider|op_9~18\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Mod2|auto_generated|divider|divider|op_9~18\,
	sumout => \convert_binary|Mod2|auto_generated|divider|divider|op_9~1_sumout\);

\convert_binary|Mod2|auto_generated|divider|divider|StageOut[77]~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|StageOut[77]~5_combout\ = (!\convert_binary|Mod2|auto_generated|divider|divider|op_8~1_sumout\ & \convert_binary|Mod2|auto_generated|divider|divider|op_8~13_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_8~13_sumout\,
	combout => \convert_binary|Mod2|auto_generated|divider|divider|StageOut[77]~5_combout\);

\convert_binary|Mod2|auto_generated|divider|divider|StageOut[77]~14\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|StageOut[77]~14_combout\ = (\convert_binary|Mod2|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod2|auto_generated|divider|divider|StageOut[66]~13_combout\) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[66]~6_combout\)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001010100010101000101010001010100010101000101010001010100010101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[66]~6_combout\,
	datac => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[66]~13_combout\,
	combout => \convert_binary|Mod2|auto_generated|divider|divider|StageOut[77]~14_combout\);

\convert_binary|Mod2|auto_generated|divider|divider|StageOut[76]~15\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|StageOut[76]~15_combout\ = (!\convert_binary|Mod2|auto_generated|divider|divider|op_8~1_sumout\ & \convert_binary|Mod2|auto_generated|divider|divider|op_8~21_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_8~21_sumout\,
	combout => \convert_binary|Mod2|auto_generated|divider|divider|StageOut[76]~15_combout\);

\convert_binary|Mod2|auto_generated|divider|divider|StageOut[76]~22\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|StageOut[76]~22_combout\ = (\convert_binary|Mod2|auto_generated|divider|divider|op_8~1_sumout\ & \convert_binary|Mod2|auto_generated|divider|divider|StageOut[65]~21_combout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[65]~21_combout\,
	combout => \convert_binary|Mod2|auto_generated|divider|divider|StageOut[76]~22_combout\);

\convert_binary|Mod2|auto_generated|divider|divider|StageOut[75]~29\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|StageOut[75]~29_combout\ = (!\convert_binary|Mod2|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod2|auto_generated|divider|divider|op_8~25_sumout\)))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod2|auto_generated|divider|divider|StageOut[64]~28_combout\)) # (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[64]~23_combout\)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001101101011111000110110101111100011011010111110001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[64]~23_combout\,
	datac => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_8~25_sumout\,
	datad => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[64]~28_combout\,
	combout => \convert_binary|Mod2|auto_generated|divider|divider|StageOut[75]~29_combout\);

\convert_binary|Mod2|auto_generated|divider|divider|StageOut[74]~32\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|StageOut[74]~32_combout\ = (!\convert_binary|Mod2|auto_generated|divider|divider|op_8~1_sumout\ & \convert_binary|Mod2|auto_generated|divider|divider|op_8~29_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_8~29_sumout\,
	combout => \convert_binary|Mod2|auto_generated|divider|divider|StageOut[74]~32_combout\);

\convert_binary|Mod2|auto_generated|divider|divider|StageOut[74]~38\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|StageOut[74]~38_combout\ = (\convert_binary|Mod2|auto_generated|divider|divider|op_8~1_sumout\ & \convert_binary|Mod2|auto_generated|divider|divider|StageOut[63]~37_combout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[63]~37_combout\,
	combout => \convert_binary|Mod2|auto_generated|divider|divider|StageOut[74]~38_combout\);

\convert_binary|Mod2|auto_generated|divider|divider|StageOut[73]~43\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|StageOut[73]~43_combout\ = (!\convert_binary|Mod2|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod2|auto_generated|divider|divider|op_8~33_sumout\)))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod2|auto_generated|divider|divider|StageOut[62]~42_combout\)) # (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[62]~39_combout\)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001101101011111000110110101111100011011010111110001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[62]~39_combout\,
	datac => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_8~33_sumout\,
	datad => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[62]~42_combout\,
	combout => \convert_binary|Mod2|auto_generated|divider|divider|StageOut[73]~43_combout\);

\convert_binary|Mod2|auto_generated|divider|divider|StageOut[72]~44\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|StageOut[72]~44_combout\ = (!\convert_binary|Mod2|auto_generated|divider|divider|op_8~1_sumout\ & \convert_binary|Mod2|auto_generated|divider|divider|op_8~37_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_8~37_sumout\,
	combout => \convert_binary|Mod2|auto_generated|divider|divider|StageOut[72]~44_combout\);

\convert_binary|Mod2|auto_generated|divider|divider|StageOut[72]~47\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|StageOut[72]~47_combout\ = (\convert_binary|Mod2|auto_generated|divider|divider|op_8~1_sumout\ & \convert_binary|Mod2|auto_generated|divider|divider|StageOut[61]~46_combout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[61]~46_combout\,
	combout => \convert_binary|Mod2|auto_generated|divider|divider|StageOut[72]~47_combout\);

\convert_binary|Mod2|auto_generated|divider|divider|StageOut[71]~4\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|StageOut[71]~4_combout\ = (!\convert_binary|Mod2|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod2|auto_generated|divider|divider|op_8~9_sumout\))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[60]~3_combout\))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001101100011011000110110001101100011011000110110001101100011011",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[60]~3_combout\,
	datac => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_8~9_sumout\,
	combout => \convert_binary|Mod2|auto_generated|divider|divider|StageOut[71]~4_combout\);

\convert_binary|Mod2|auto_generated|divider|divider|StageOut[70]~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|StageOut[70]~1_combout\ = (!\convert_binary|Mod2|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod2|auto_generated|divider|divider|op_8~5_sumout\))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_8~1_sumout\ & (Remainder_input(2)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001110100011101000111010001110100011101000111010001110100011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => ALT_INV_Remainder_input(2),
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datac => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_8~5_sumout\,
	combout => \convert_binary|Mod2|auto_generated|divider|divider|StageOut[70]~1_combout\);

\convert_binary|Mod2|auto_generated|divider|divider|op_10~26\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|op_10~26_cout\ = CARRY(( VCC ) + ( VCC ) + ( !VCC ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => GND,
	cout => \convert_binary|Mod2|auto_generated|divider|divider|op_10~26_cout\);

\convert_binary|Mod2|auto_generated|divider|divider|op_10~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|op_10~5_sumout\ = SUM(( Remainder_input(0) ) + ( VCC ) + ( \convert_binary|Mod2|auto_generated|divider|divider|op_10~26_cout\ ))
-- \convert_binary|Mod2|auto_generated|divider|divider|op_10~6\ = CARRY(( Remainder_input(0) ) + ( VCC ) + ( \convert_binary|Mod2|auto_generated|divider|divider|op_10~26_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => ALT_INV_Remainder_input(0),
	cin => \convert_binary|Mod2|auto_generated|divider|divider|op_10~26_cout\,
	sumout => \convert_binary|Mod2|auto_generated|divider|divider|op_10~5_sumout\,
	cout => \convert_binary|Mod2|auto_generated|divider|divider|op_10~6\);

\convert_binary|Mod2|auto_generated|divider|divider|op_10~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|op_10~9_sumout\ = SUM(( (!\convert_binary|Mod2|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Mod2|auto_generated|divider|divider|op_9~5_sumout\))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_9~1_sumout\ & (Remainder_input(1))) ) + ( GND ) + ( \convert_binary|Mod2|auto_generated|divider|divider|op_10~6\ ))
-- \convert_binary|Mod2|auto_generated|divider|divider|op_10~10\ = CARRY(( (!\convert_binary|Mod2|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Mod2|auto_generated|divider|divider|op_9~5_sumout\))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_9~1_sumout\ & (Remainder_input(1))) ) + ( GND ) + ( \convert_binary|Mod2|auto_generated|divider|divider|op_10~6\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000001000111011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => ALT_INV_Remainder_input(1),
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datad => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_9~5_sumout\,
	cin => \convert_binary|Mod2|auto_generated|divider|divider|op_10~6\,
	sumout => \convert_binary|Mod2|auto_generated|divider|divider|op_10~9_sumout\,
	cout => \convert_binary|Mod2|auto_generated|divider|divider|op_10~10\);

\convert_binary|Mod2|auto_generated|divider|divider|op_10~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|op_10~13_sumout\ = SUM(( (!\convert_binary|Mod2|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Mod2|auto_generated|divider|divider|op_9~9_sumout\))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_9~1_sumout\ & (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[70]~1_combout\)) ) + ( VCC ) + ( \convert_binary|Mod2|auto_generated|divider|divider|op_10~10\ ))
-- \convert_binary|Mod2|auto_generated|divider|divider|op_10~14\ = CARRY(( (!\convert_binary|Mod2|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Mod2|auto_generated|divider|divider|op_9~9_sumout\))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_9~1_sumout\ & (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[70]~1_combout\)) ) + ( VCC ) + ( \convert_binary|Mod2|auto_generated|divider|divider|op_10~10\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000001111001111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datac => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[70]~1_combout\,
	datad => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_9~9_sumout\,
	cin => \convert_binary|Mod2|auto_generated|divider|divider|op_10~10\,
	sumout => \convert_binary|Mod2|auto_generated|divider|divider|op_10~13_sumout\,
	cout => \convert_binary|Mod2|auto_generated|divider|divider|op_10~14\);

\convert_binary|Mod2|auto_generated|divider|divider|op_10~17\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|op_10~17_sumout\ = SUM(( (!\convert_binary|Mod2|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Mod2|auto_generated|divider|divider|op_9~13_sumout\))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_9~1_sumout\ & (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[71]~4_combout\)) ) + ( GND ) + ( \convert_binary|Mod2|auto_generated|divider|divider|op_10~14\ ))
-- \convert_binary|Mod2|auto_generated|divider|divider|op_10~18\ = CARRY(( (!\convert_binary|Mod2|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Mod2|auto_generated|divider|divider|op_9~13_sumout\))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_9~1_sumout\ & (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[71]~4_combout\)) ) + ( GND ) + ( \convert_binary|Mod2|auto_generated|divider|divider|op_10~14\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datac => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[71]~4_combout\,
	datad => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_9~13_sumout\,
	cin => \convert_binary|Mod2|auto_generated|divider|divider|op_10~14\,
	sumout => \convert_binary|Mod2|auto_generated|divider|divider|op_10~17_sumout\,
	cout => \convert_binary|Mod2|auto_generated|divider|divider|op_10~18\);

\convert_binary|Mod2|auto_generated|divider|divider|op_10~46\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|op_10~46_cout\ = CARRY(( (!\convert_binary|Mod2|auto_generated|divider|divider|op_9~1_sumout\ & (((\convert_binary|Mod2|auto_generated|divider|divider|op_9~41_sumout\)))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_9~1_sumout\ & (((\convert_binary|Mod2|auto_generated|divider|divider|StageOut[72]~47_combout\)) # (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[72]~44_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod2|auto_generated|divider|divider|op_10~18\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[72]~44_combout\,
	datac => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_9~41_sumout\,
	datad => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[72]~47_combout\,
	cin => \convert_binary|Mod2|auto_generated|divider|divider|op_10~18\,
	cout => \convert_binary|Mod2|auto_generated|divider|divider|op_10~46_cout\);

\convert_binary|Mod2|auto_generated|divider|divider|op_10~42\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|op_10~42_cout\ = CARRY(( (!\convert_binary|Mod2|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Mod2|auto_generated|divider|divider|op_9~37_sumout\))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_9~1_sumout\ & (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[73]~43_combout\)) ) + ( VCC ) + ( \convert_binary|Mod2|auto_generated|divider|divider|op_10~46_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datac => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[73]~43_combout\,
	datad => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_9~37_sumout\,
	cin => \convert_binary|Mod2|auto_generated|divider|divider|op_10~46_cout\,
	cout => \convert_binary|Mod2|auto_generated|divider|divider|op_10~42_cout\);

\convert_binary|Mod2|auto_generated|divider|divider|op_10~38\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|op_10~38_cout\ = CARRY(( (!\convert_binary|Mod2|auto_generated|divider|divider|op_9~1_sumout\ & (((\convert_binary|Mod2|auto_generated|divider|divider|op_9~33_sumout\)))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_9~1_sumout\ & (((\convert_binary|Mod2|auto_generated|divider|divider|StageOut[74]~38_combout\)) # (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[74]~32_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod2|auto_generated|divider|divider|op_10~42_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[74]~32_combout\,
	datac => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_9~33_sumout\,
	datad => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[74]~38_combout\,
	cin => \convert_binary|Mod2|auto_generated|divider|divider|op_10~42_cout\,
	cout => \convert_binary|Mod2|auto_generated|divider|divider|op_10~38_cout\);

\convert_binary|Mod2|auto_generated|divider|divider|op_10~34\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|op_10~34_cout\ = CARRY(( (!\convert_binary|Mod2|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Mod2|auto_generated|divider|divider|op_9~29_sumout\))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_9~1_sumout\ & (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[75]~29_combout\)) ) + ( VCC ) + ( \convert_binary|Mod2|auto_generated|divider|divider|op_10~38_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datac => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[75]~29_combout\,
	datad => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_9~29_sumout\,
	cin => \convert_binary|Mod2|auto_generated|divider|divider|op_10~38_cout\,
	cout => \convert_binary|Mod2|auto_generated|divider|divider|op_10~34_cout\);

\convert_binary|Mod2|auto_generated|divider|divider|op_10~30\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|op_10~30_cout\ = CARRY(( (!\convert_binary|Mod2|auto_generated|divider|divider|op_9~1_sumout\ & (((\convert_binary|Mod2|auto_generated|divider|divider|op_9~25_sumout\)))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_9~1_sumout\ & (((\convert_binary|Mod2|auto_generated|divider|divider|StageOut[76]~22_combout\)) # (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[76]~15_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod2|auto_generated|divider|divider|op_10~34_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[76]~15_combout\,
	datac => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_9~25_sumout\,
	datad => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[76]~22_combout\,
	cin => \convert_binary|Mod2|auto_generated|divider|divider|op_10~34_cout\,
	cout => \convert_binary|Mod2|auto_generated|divider|divider|op_10~30_cout\);

\convert_binary|Mod2|auto_generated|divider|divider|op_10~22\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|op_10~22_cout\ = CARRY(( (!\convert_binary|Mod2|auto_generated|divider|divider|op_9~1_sumout\ & (((\convert_binary|Mod2|auto_generated|divider|divider|op_9~17_sumout\)))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_9~1_sumout\ & (((\convert_binary|Mod2|auto_generated|divider|divider|StageOut[77]~14_combout\)) # (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[77]~5_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod2|auto_generated|divider|divider|op_10~30_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[77]~5_combout\,
	datac => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_9~17_sumout\,
	datad => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[77]~14_combout\,
	cin => \convert_binary|Mod2|auto_generated|divider|divider|op_10~30_cout\,
	cout => \convert_binary|Mod2|auto_generated|divider|divider|op_10~22_cout\);

\convert_binary|Mod2|auto_generated|divider|divider|op_10~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|op_10~1_sumout\ = SUM(( VCC ) + ( GND ) + ( \convert_binary|Mod2|auto_generated|divider|divider|op_10~22_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Mod2|auto_generated|divider|divider|op_10~22_cout\,
	sumout => \convert_binary|Mod2|auto_generated|divider|divider|op_10~1_sumout\);

\convert_binary|Mod2|auto_generated|divider|divider|StageOut[90]~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|StageOut[90]~0_combout\ = (!\convert_binary|Mod2|auto_generated|divider|divider|op_10~1_sumout\ & ((\convert_binary|Mod2|auto_generated|divider|divider|op_10~5_sumout\))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_10~1_sumout\ & (Remainder_input(0)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001110100011101000111010001110100011101000111010001110100011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => ALT_INV_Remainder_input(0),
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_10~1_sumout\,
	datac => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_10~5_sumout\,
	combout => \convert_binary|Mod2|auto_generated|divider|divider|StageOut[90]~0_combout\);

\convert_binary|int_r_1[0]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \convert_binary|Mod2|auto_generated|divider|divider|StageOut[90]~0_combout\,
	clrn => \RST_main~input_o\,
	sclr => \convert_binary|int_r_2[2]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \convert_binary|int_r_1\(0));

\convert_binary|int_r_1~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|int_r_1~0_combout\ = ( \convert_binary|Mod2|auto_generated|divider|divider|op_10~1_sumout\ & ( \convert_binary|Mod2|auto_generated|divider|divider|op_10~9_sumout\ & ( ((!\convert_binary|Mod2|auto_generated|divider|divider|op_9~1_sumout\ & 
-- ((\convert_binary|Mod2|auto_generated|divider|divider|op_9~5_sumout\))) # (\convert_binary|Mod2|auto_generated|divider|divider|op_9~1_sumout\ & (Remainder_input(1)))) # (\convert_binary|int_r_2[2]~0_combout\) ) ) ) # ( 
-- !\convert_binary|Mod2|auto_generated|divider|divider|op_10~1_sumout\ & ( \convert_binary|Mod2|auto_generated|divider|divider|op_10~9_sumout\ ) ) # ( \convert_binary|Mod2|auto_generated|divider|divider|op_10~1_sumout\ & ( 
-- !\convert_binary|Mod2|auto_generated|divider|divider|op_10~9_sumout\ & ( ((!\convert_binary|Mod2|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Mod2|auto_generated|divider|divider|op_9~5_sumout\))) # 
-- (\convert_binary|Mod2|auto_generated|divider|divider|op_9~1_sumout\ & (Remainder_input(1)))) # (\convert_binary|int_r_2[2]~0_combout\) ) ) ) # ( !\convert_binary|Mod2|auto_generated|divider|divider|op_10~1_sumout\ & ( 
-- !\convert_binary|Mod2|auto_generated|divider|divider|op_10~9_sumout\ & ( \convert_binary|int_r_2[2]~0_combout\ ) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0101010101010101010101111111011111111111111111110101011111110111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|ALT_INV_int_r_2[2]~0_combout\,
	datab => ALT_INV_Remainder_input(1),
	datac => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datad => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_9~5_sumout\,
	datae => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_10~1_sumout\,
	dataf => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_10~9_sumout\,
	combout => \convert_binary|int_r_1~0_combout\);

\convert_binary|int_r_1[1]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \convert_binary|int_r_1~0_combout\,
	clrn => \RST_main~input_o\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \convert_binary|int_r_1\(1));

\convert_binary|Mod2|auto_generated|divider|divider|StageOut[92]~2\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod2|auto_generated|divider|divider|StageOut[92]~2_combout\ = ( \convert_binary|Mod2|auto_generated|divider|divider|op_10~13_sumout\ & ( (!\convert_binary|Mod2|auto_generated|divider|divider|op_10~1_sumout\) # 
-- ((!\convert_binary|Mod2|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Mod2|auto_generated|divider|divider|op_9~9_sumout\))) # (\convert_binary|Mod2|auto_generated|divider|divider|op_9~1_sumout\ & 
-- (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[70]~1_combout\))) ) ) # ( !\convert_binary|Mod2|auto_generated|divider|divider|op_10~13_sumout\ & ( (\convert_binary|Mod2|auto_generated|divider|divider|op_10~1_sumout\ & 
-- ((!\convert_binary|Mod2|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Mod2|auto_generated|divider|divider|op_9~9_sumout\))) # (\convert_binary|Mod2|auto_generated|divider|divider|op_9~1_sumout\ & 
-- (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[70]~1_combout\)))) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000011011111111110001101100000000000110111111111100011011",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[70]~1_combout\,
	datac => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_9~9_sumout\,
	datad => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_10~1_sumout\,
	datae => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_10~13_sumout\,
	combout => \convert_binary|Mod2|auto_generated|divider|divider|StageOut[92]~2_combout\);

\convert_binary|int_r_1[2]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \convert_binary|Mod2|auto_generated|divider|divider|StageOut[92]~2_combout\,
	clrn => \RST_main~input_o\,
	sclr => \convert_binary|int_r_2[2]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \convert_binary|int_r_1\(2));

\convert_binary|int_r_1~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|int_r_1~1_combout\ = ( \convert_binary|Mod2|auto_generated|divider|divider|op_10~1_sumout\ & ( \convert_binary|Mod2|auto_generated|divider|divider|op_10~17_sumout\ & ( ((!\convert_binary|Mod2|auto_generated|divider|divider|op_9~1_sumout\ & 
-- ((\convert_binary|Mod2|auto_generated|divider|divider|op_9~13_sumout\))) # (\convert_binary|Mod2|auto_generated|divider|divider|op_9~1_sumout\ & (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[71]~4_combout\))) # 
-- (\convert_binary|int_r_2[2]~0_combout\) ) ) ) # ( !\convert_binary|Mod2|auto_generated|divider|divider|op_10~1_sumout\ & ( \convert_binary|Mod2|auto_generated|divider|divider|op_10~17_sumout\ ) ) # ( 
-- \convert_binary|Mod2|auto_generated|divider|divider|op_10~1_sumout\ & ( !\convert_binary|Mod2|auto_generated|divider|divider|op_10~17_sumout\ & ( ((!\convert_binary|Mod2|auto_generated|divider|divider|op_9~1_sumout\ & 
-- ((\convert_binary|Mod2|auto_generated|divider|divider|op_9~13_sumout\))) # (\convert_binary|Mod2|auto_generated|divider|divider|op_9~1_sumout\ & (\convert_binary|Mod2|auto_generated|divider|divider|StageOut[71]~4_combout\))) # 
-- (\convert_binary|int_r_2[2]~0_combout\) ) ) ) # ( !\convert_binary|Mod2|auto_generated|divider|divider|op_10~1_sumout\ & ( !\convert_binary|Mod2|auto_generated|divider|divider|op_10~17_sumout\ & ( \convert_binary|int_r_2[2]~0_combout\ ) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0101010101010101010101111101111111111111111111110101011111011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|ALT_INV_int_r_2[2]~0_combout\,
	datab => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datac => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_StageOut[71]~4_combout\,
	datad => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_9~13_sumout\,
	datae => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_10~1_sumout\,
	dataf => \convert_binary|Mod2|auto_generated|divider|divider|ALT_INV_op_10~17_sumout\,
	combout => \convert_binary|int_r_1~1_combout\);

\convert_binary|int_r_1[3]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \convert_binary|int_r_1~1_combout\,
	clrn => \RST_main~input_o\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \convert_binary|int_r_1\(3));

\seven_seg_display_4|Mux6~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \seven_seg_display_4|Mux6~0_combout\ = (!\convert_binary|int_r_1\(1) & (!\convert_binary|int_r_1\(3) & (!\convert_binary|int_r_1\(0) $ (!\convert_binary|int_r_1\(2)))))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0100100000000000010010000000000001001000000000000100100000000000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|ALT_INV_int_r_1\(0),
	datab => \convert_binary|ALT_INV_int_r_1\(1),
	datac => \convert_binary|ALT_INV_int_r_1\(2),
	datad => \convert_binary|ALT_INV_int_r_1\(3),
	combout => \seven_seg_display_4|Mux6~0_combout\);

\seven_seg_display_4|seven_seg[0]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \seven_seg_display_4|Mux6~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \seven_seg_display_4|seven_seg\(0));

\seven_seg_display_4|Mux5~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \seven_seg_display_4|Mux5~0_combout\ = (!\convert_binary|int_r_1\(2) & (((\convert_binary|int_r_1\(1) & \convert_binary|int_r_1\(3))))) # (\convert_binary|int_r_1\(2) & ((!\convert_binary|int_r_1\(0) $ (!\convert_binary|int_r_1\(1))) # 
-- (\convert_binary|int_r_1\(3))))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000011000111111000001100011111100000110001111110000011000111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|ALT_INV_int_r_1\(0),
	datab => \convert_binary|ALT_INV_int_r_1\(1),
	datac => \convert_binary|ALT_INV_int_r_1\(2),
	datad => \convert_binary|ALT_INV_int_r_1\(3),
	combout => \seven_seg_display_4|Mux5~0_combout\);

\seven_seg_display_4|seven_seg[1]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \seven_seg_display_4|Mux5~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \seven_seg_display_4|seven_seg\(1));

\seven_seg_display_4|Mux4~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \seven_seg_display_4|Mux4~0_combout\ = (!\convert_binary|int_r_1\(2) & (\convert_binary|int_r_1\(1) & ((!\convert_binary|int_r_1\(0)) # (\convert_binary|int_r_1\(3))))) # (\convert_binary|int_r_1\(2) & (((\convert_binary|int_r_1\(3)))))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010000000111111001000000011111100100000001111110010000000111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|ALT_INV_int_r_1\(0),
	datab => \convert_binary|ALT_INV_int_r_1\(1),
	datac => \convert_binary|ALT_INV_int_r_1\(2),
	datad => \convert_binary|ALT_INV_int_r_1\(3),
	combout => \seven_seg_display_4|Mux4~0_combout\);

\seven_seg_display_4|seven_seg[2]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \seven_seg_display_4|Mux4~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \seven_seg_display_4|seven_seg\(2));

\seven_seg_display_4|Mux3~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \seven_seg_display_4|Mux3~0_combout\ = (!\convert_binary|int_r_1\(3) & ((!\convert_binary|int_r_1\(0) & (!\convert_binary|int_r_1\(1) & \convert_binary|int_r_1\(2))) # (\convert_binary|int_r_1\(0) & (!\convert_binary|int_r_1\(1) $ 
-- (\convert_binary|int_r_1\(2))))))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0100100100000000010010010000000001001001000000000100100100000000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|ALT_INV_int_r_1\(0),
	datab => \convert_binary|ALT_INV_int_r_1\(1),
	datac => \convert_binary|ALT_INV_int_r_1\(2),
	datad => \convert_binary|ALT_INV_int_r_1\(3),
	combout => \seven_seg_display_4|Mux3~0_combout\);

\seven_seg_display_4|seven_seg[3]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \seven_seg_display_4|Mux3~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \seven_seg_display_4|seven_seg\(3));

\seven_seg_display_4|Mux2~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \seven_seg_display_4|Mux2~0_combout\ = (!\convert_binary|int_r_1\(1) & ((!\convert_binary|int_r_1\(2) & (\convert_binary|int_r_1\(0))) # (\convert_binary|int_r_1\(2) & ((!\convert_binary|int_r_1\(3)))))) # (\convert_binary|int_r_1\(1) & 
-- (\convert_binary|int_r_1\(0) & ((!\convert_binary|int_r_1\(3)))))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0101110101000000010111010100000001011101010000000101110101000000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|ALT_INV_int_r_1\(0),
	datab => \convert_binary|ALT_INV_int_r_1\(1),
	datac => \convert_binary|ALT_INV_int_r_1\(2),
	datad => \convert_binary|ALT_INV_int_r_1\(3),
	combout => \seven_seg_display_4|Mux2~0_combout\);

\seven_seg_display_4|seven_seg[4]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \seven_seg_display_4|Mux2~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \seven_seg_display_4|seven_seg\(4));

\seven_seg_display_4|Mux1~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \seven_seg_display_4|Mux1~0_combout\ = (!\convert_binary|int_r_1\(3) & ((!\convert_binary|int_r_1\(0) & (\convert_binary|int_r_1\(1) & !\convert_binary|int_r_1\(2))) # (\convert_binary|int_r_1\(0) & ((!\convert_binary|int_r_1\(2)) # 
-- (\convert_binary|int_r_1\(1))))))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0111000100000000011100010000000001110001000000000111000100000000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|ALT_INV_int_r_1\(0),
	datab => \convert_binary|ALT_INV_int_r_1\(1),
	datac => \convert_binary|ALT_INV_int_r_1\(2),
	datad => \convert_binary|ALT_INV_int_r_1\(3),
	combout => \seven_seg_display_4|Mux1~0_combout\);

\seven_seg_display_4|seven_seg[5]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \seven_seg_display_4|Mux1~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \seven_seg_display_4|seven_seg\(5));

\seven_seg_display_4|Mux0~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \seven_seg_display_4|Mux0~0_combout\ = (!\convert_binary|int_r_1\(3) & ((!\convert_binary|int_r_1\(1) & ((!\convert_binary|int_r_1\(2)))) # (\convert_binary|int_r_1\(1) & (\convert_binary|int_r_1\(0) & \convert_binary|int_r_1\(2)))))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "1100000100000000110000010000000011000001000000001100000100000000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|ALT_INV_int_r_1\(0),
	datab => \convert_binary|ALT_INV_int_r_1\(1),
	datac => \convert_binary|ALT_INV_int_r_1\(2),
	datad => \convert_binary|ALT_INV_int_r_1\(3),
	combout => \seven_seg_display_4|Mux0~0_combout\);

\seven_seg_display_4|seven_seg[6]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \seven_seg_display_4|Mux0~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \seven_seg_display_4|seven_seg\(6));

\convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[0]~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[0]~5_sumout\ = SUM(( Remainder_input(6) ) + ( !VCC ) + ( !VCC ))
-- \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[0]~6\ = CARRY(( Remainder_input(6) ) + ( !VCC ) + ( !VCC ))
-- \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[0]~7\ = SHARE(VCC)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	datad => ALT_INV_Remainder_input(6),
	cin => GND,
	sharein => GND,
	sumout => \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[0]~5_sumout\,
	cout => \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[0]~6\,
	shareout => \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[0]~7\);

\convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[1]~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[1]~9_sumout\ = SUM(( Remainder_input(7) ) + ( \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[0]~7\ ) + ( 
-- \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[0]~6\ ))
-- \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[1]~10\ = CARRY(( Remainder_input(7) ) + ( \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[0]~7\ ) + ( 
-- \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[0]~6\ ))
-- \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[1]~11\ = SHARE(GND)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000011111111",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	datad => ALT_INV_Remainder_input(7),
	cin => \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[0]~6\,
	sharein => \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[0]~7\,
	sumout => \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[1]~9_sumout\,
	cout => \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[1]~10\,
	shareout => \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[1]~11\);

\convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[2]~17\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[2]~17_sumout\ = SUM(( !Remainder_input(8) ) + ( \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[1]~11\ ) + ( 
-- \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[1]~10\ ))
-- \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[2]~18\ = CARRY(( !Remainder_input(8) ) + ( \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[1]~11\ ) + ( 
-- \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[1]~10\ ))
-- \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[2]~19\ = SHARE(Remainder_input(8))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000001111111100000000000000001111111100000000",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	datad => ALT_INV_Remainder_input(8),
	cin => \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[1]~10\,
	sharein => \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[1]~11\,
	sumout => \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[2]~17_sumout\,
	cout => \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[2]~18\,
	shareout => \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[2]~19\);

\convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[3]~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[3]~13_sumout\ = SUM(( Remainder_input(9) ) + ( \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[2]~19\ ) + ( 
-- \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[2]~18\ ))
-- \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[3]~14\ = CARRY(( Remainder_input(9) ) + ( \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[2]~19\ ) + ( 
-- \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[2]~18\ ))
-- \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[3]~15\ = SHARE(GND)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000011111111",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	datad => ALT_INV_Remainder_input(9),
	cin => \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[2]~18\,
	sharein => \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[2]~19\,
	sumout => \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[3]~13_sumout\,
	cout => \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[3]~14\,
	shareout => \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[3]~15\);

\convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[4]~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\ = SUM(( VCC ) + ( \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[3]~15\ ) + ( 
-- \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[3]~14\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[3]~14\,
	sharein => \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[3]~15\,
	sumout => \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\);

\convert_binary|Div2|auto_generated|divider|divider|StageOut[18]~22\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|StageOut[18]~22_combout\ = (!\convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\ & 
-- \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[3]~13_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~1_sumout\,
	datab => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[3]~13_sumout\,
	combout => \convert_binary|Div2|auto_generated|divider|divider|StageOut[18]~22_combout\);

\convert_binary|Div2|auto_generated|divider|divider|StageOut[18]~23\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|StageOut[18]~23_combout\ = (Remainder_input(9) & \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => ALT_INV_Remainder_input(9),
	datab => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~1_sumout\,
	combout => \convert_binary|Div2|auto_generated|divider|divider|StageOut[18]~23_combout\);

\convert_binary|Div2|auto_generated|divider|divider|StageOut[16]~17\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|StageOut[16]~17_combout\ = (!\convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\ & \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[1]~9_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~1_sumout\,
	datab => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[1]~9_sumout\,
	combout => \convert_binary|Div2|auto_generated|divider|divider|StageOut[16]~17_combout\);

\convert_binary|Div2|auto_generated|divider|divider|StageOut[16]~18\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|StageOut[16]~18_combout\ = (Remainder_input(7) & \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => ALT_INV_Remainder_input(7),
	datab => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~1_sumout\,
	combout => \convert_binary|Div2|auto_generated|divider|divider|StageOut[16]~18_combout\);

\convert_binary|Div2|auto_generated|divider|divider|op_5~22\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|op_5~22_cout\ = CARRY(( VCC ) + ( VCC ) + ( !VCC ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => GND,
	cout => \convert_binary|Div2|auto_generated|divider|divider|op_5~22_cout\);

\convert_binary|Div2|auto_generated|divider|divider|op_5~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|op_5~5_sumout\ = SUM(( Remainder_input(5) ) + ( VCC ) + ( \convert_binary|Div2|auto_generated|divider|divider|op_5~22_cout\ ))
-- \convert_binary|Div2|auto_generated|divider|divider|op_5~6\ = CARRY(( Remainder_input(5) ) + ( VCC ) + ( \convert_binary|Div2|auto_generated|divider|divider|op_5~22_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => ALT_INV_Remainder_input(5),
	cin => \convert_binary|Div2|auto_generated|divider|divider|op_5~22_cout\,
	sumout => \convert_binary|Div2|auto_generated|divider|divider|op_5~5_sumout\,
	cout => \convert_binary|Div2|auto_generated|divider|divider|op_5~6\);

\convert_binary|Div2|auto_generated|divider|divider|op_5~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|op_5~9_sumout\ = SUM(( (!\convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\ & ((\convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[0]~5_sumout\))) 
-- # (\convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\ & (Remainder_input(6))) ) + ( GND ) + ( \convert_binary|Div2|auto_generated|divider|divider|op_5~6\ ))
-- \convert_binary|Div2|auto_generated|divider|divider|op_5~10\ = CARRY(( (!\convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\ & ((\convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[0]~5_sumout\))) # 
-- (\convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\ & (Remainder_input(6))) ) + ( GND ) + ( \convert_binary|Div2|auto_generated|divider|divider|op_5~6\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000010111110101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => ALT_INV_Remainder_input(6),
	datac => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~1_sumout\,
	datad => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[0]~5_sumout\,
	cin => \convert_binary|Div2|auto_generated|divider|divider|op_5~6\,
	sumout => \convert_binary|Div2|auto_generated|divider|divider|op_5~9_sumout\,
	cout => \convert_binary|Div2|auto_generated|divider|divider|op_5~10\);

\convert_binary|Div2|auto_generated|divider|divider|op_5~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|op_5~13_sumout\ = SUM(( (\convert_binary|Div2|auto_generated|divider|divider|StageOut[16]~18_combout\) # (\convert_binary|Div2|auto_generated|divider|divider|StageOut[16]~17_combout\) ) + ( VCC ) + ( 
-- \convert_binary|Div2|auto_generated|divider|divider|op_5~10\ ))
-- \convert_binary|Div2|auto_generated|divider|divider|op_5~14\ = CARRY(( (\convert_binary|Div2|auto_generated|divider|divider|StageOut[16]~18_combout\) # (\convert_binary|Div2|auto_generated|divider|divider|StageOut[16]~17_combout\) ) + ( VCC ) + ( 
-- \convert_binary|Div2|auto_generated|divider|divider|op_5~10\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000011001111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datab => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[16]~17_combout\,
	datad => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[16]~18_combout\,
	cin => \convert_binary|Div2|auto_generated|divider|divider|op_5~10\,
	sumout => \convert_binary|Div2|auto_generated|divider|divider|op_5~13_sumout\,
	cout => \convert_binary|Div2|auto_generated|divider|divider|op_5~14\);

\convert_binary|Div2|auto_generated|divider|divider|op_5~25\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|op_5~25_sumout\ = SUM(( (!\convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\ & 
-- ((\convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[2]~17_sumout\))) # (\convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\ & (Remainder_input(8))) ) + ( GND ) + ( 
-- \convert_binary|Div2|auto_generated|divider|divider|op_5~14\ ))
-- \convert_binary|Div2|auto_generated|divider|divider|op_5~26\ = CARRY(( (!\convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\ & ((\convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[2]~17_sumout\))) # 
-- (\convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\ & (Remainder_input(8))) ) + ( GND ) + ( \convert_binary|Div2|auto_generated|divider|divider|op_5~14\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000010111110101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => ALT_INV_Remainder_input(8),
	datac => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~1_sumout\,
	datad => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[2]~17_sumout\,
	cin => \convert_binary|Div2|auto_generated|divider|divider|op_5~14\,
	sumout => \convert_binary|Div2|auto_generated|divider|divider|op_5~25_sumout\,
	cout => \convert_binary|Div2|auto_generated|divider|divider|op_5~26\);

\convert_binary|Div2|auto_generated|divider|divider|op_5~18\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|op_5~18_cout\ = CARRY(( (\convert_binary|Div2|auto_generated|divider|divider|StageOut[18]~23_combout\) # (\convert_binary|Div2|auto_generated|divider|divider|StageOut[18]~22_combout\) ) + ( VCC ) + ( 
-- \convert_binary|Div2|auto_generated|divider|divider|op_5~26\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000011001111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datab => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[18]~22_combout\,
	datad => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[18]~23_combout\,
	cin => \convert_binary|Div2|auto_generated|divider|divider|op_5~26\,
	cout => \convert_binary|Div2|auto_generated|divider|divider|op_5~18_cout\);

\convert_binary|Div2|auto_generated|divider|divider|op_5~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|op_5~1_sumout\ = SUM(( VCC ) + ( GND ) + ( \convert_binary|Div2|auto_generated|divider|divider|op_5~18_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Div2|auto_generated|divider|divider|op_5~18_cout\,
	sumout => \convert_binary|Div2|auto_generated|divider|divider|op_5~1_sumout\);

\convert_binary|Div2|auto_generated|divider|divider|StageOut[17]~19\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|StageOut[17]~19_combout\ = (!\convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\ & 
-- \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[2]~17_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~1_sumout\,
	datab => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[2]~17_sumout\,
	combout => \convert_binary|Div2|auto_generated|divider|divider|StageOut[17]~19_combout\);

\convert_binary|Div2|auto_generated|divider|divider|StageOut[17]~20\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|StageOut[17]~20_combout\ = (Remainder_input(8) & \convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => ALT_INV_Remainder_input(8),
	datab => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~1_sumout\,
	combout => \convert_binary|Div2|auto_generated|divider|divider|StageOut[17]~20_combout\);

\convert_binary|Div2|auto_generated|divider|divider|StageOut[16]~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|StageOut[16]~13_combout\ = (!\convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\ & 
-- ((\convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[1]~9_sumout\))) # (\convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\ & (Remainder_input(7)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001110100011101000111010001110100011101000111010001110100011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => ALT_INV_Remainder_input(7),
	datab => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~1_sumout\,
	datac => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[1]~9_sumout\,
	combout => \convert_binary|Div2|auto_generated|divider|divider|StageOut[16]~13_combout\);

\convert_binary|Div2|auto_generated|divider|divider|StageOut[15]~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|StageOut[15]~9_combout\ = (!\convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\ & 
-- ((\convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[0]~5_sumout\))) # (\convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\ & (Remainder_input(6)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001110100011101000111010001110100011101000111010001110100011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => ALT_INV_Remainder_input(6),
	datab => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~1_sumout\,
	datac => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[0]~5_sumout\,
	combout => \convert_binary|Div2|auto_generated|divider|divider|StageOut[15]~9_combout\);

\convert_binary|Div2|auto_generated|divider|divider|op_6~26\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|op_6~26_cout\ = CARRY(( VCC ) + ( VCC ) + ( !VCC ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => GND,
	cout => \convert_binary|Div2|auto_generated|divider|divider|op_6~26_cout\);

\convert_binary|Div2|auto_generated|divider|divider|op_6~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|op_6~5_sumout\ = SUM(( Remainder_input(4) ) + ( VCC ) + ( \convert_binary|Div2|auto_generated|divider|divider|op_6~26_cout\ ))
-- \convert_binary|Div2|auto_generated|divider|divider|op_6~6\ = CARRY(( Remainder_input(4) ) + ( VCC ) + ( \convert_binary|Div2|auto_generated|divider|divider|op_6~26_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => ALT_INV_Remainder_input(4),
	cin => \convert_binary|Div2|auto_generated|divider|divider|op_6~26_cout\,
	sumout => \convert_binary|Div2|auto_generated|divider|divider|op_6~5_sumout\,
	cout => \convert_binary|Div2|auto_generated|divider|divider|op_6~6\);

\convert_binary|Div2|auto_generated|divider|divider|op_6~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|op_6~9_sumout\ = SUM(( (!\convert_binary|Div2|auto_generated|divider|divider|op_5~1_sumout\ & ((\convert_binary|Div2|auto_generated|divider|divider|op_5~5_sumout\))) # 
-- (\convert_binary|Div2|auto_generated|divider|divider|op_5~1_sumout\ & (Remainder_input(5))) ) + ( GND ) + ( \convert_binary|Div2|auto_generated|divider|divider|op_6~6\ ))
-- \convert_binary|Div2|auto_generated|divider|divider|op_6~10\ = CARRY(( (!\convert_binary|Div2|auto_generated|divider|divider|op_5~1_sumout\ & ((\convert_binary|Div2|auto_generated|divider|divider|op_5~5_sumout\))) # 
-- (\convert_binary|Div2|auto_generated|divider|divider|op_5~1_sumout\ & (Remainder_input(5))) ) + ( GND ) + ( \convert_binary|Div2|auto_generated|divider|divider|op_6~6\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000001000111011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => ALT_INV_Remainder_input(5),
	datab => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\,
	datad => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_5~5_sumout\,
	cin => \convert_binary|Div2|auto_generated|divider|divider|op_6~6\,
	sumout => \convert_binary|Div2|auto_generated|divider|divider|op_6~9_sumout\,
	cout => \convert_binary|Div2|auto_generated|divider|divider|op_6~10\);

\convert_binary|Div2|auto_generated|divider|divider|op_6~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|op_6~13_sumout\ = SUM(( (!\convert_binary|Div2|auto_generated|divider|divider|op_5~1_sumout\ & ((\convert_binary|Div2|auto_generated|divider|divider|op_5~9_sumout\))) # 
-- (\convert_binary|Div2|auto_generated|divider|divider|op_5~1_sumout\ & (\convert_binary|Div2|auto_generated|divider|divider|StageOut[15]~9_combout\)) ) + ( VCC ) + ( \convert_binary|Div2|auto_generated|divider|divider|op_6~10\ ))
-- \convert_binary|Div2|auto_generated|divider|divider|op_6~14\ = CARRY(( (!\convert_binary|Div2|auto_generated|divider|divider|op_5~1_sumout\ & ((\convert_binary|Div2|auto_generated|divider|divider|op_5~9_sumout\))) # 
-- (\convert_binary|Div2|auto_generated|divider|divider|op_5~1_sumout\ & (\convert_binary|Div2|auto_generated|divider|divider|StageOut[15]~9_combout\)) ) + ( VCC ) + ( \convert_binary|Div2|auto_generated|divider|divider|op_6~10\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000001111001111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datab => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\,
	datac => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[15]~9_combout\,
	datad => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_5~9_sumout\,
	cin => \convert_binary|Div2|auto_generated|divider|divider|op_6~10\,
	sumout => \convert_binary|Div2|auto_generated|divider|divider|op_6~13_sumout\,
	cout => \convert_binary|Div2|auto_generated|divider|divider|op_6~14\);

\convert_binary|Div2|auto_generated|divider|divider|op_6~17\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|op_6~17_sumout\ = SUM(( (!\convert_binary|Div2|auto_generated|divider|divider|op_5~1_sumout\ & ((\convert_binary|Div2|auto_generated|divider|divider|op_5~13_sumout\))) # 
-- (\convert_binary|Div2|auto_generated|divider|divider|op_5~1_sumout\ & (\convert_binary|Div2|auto_generated|divider|divider|StageOut[16]~13_combout\)) ) + ( GND ) + ( \convert_binary|Div2|auto_generated|divider|divider|op_6~14\ ))
-- \convert_binary|Div2|auto_generated|divider|divider|op_6~18\ = CARRY(( (!\convert_binary|Div2|auto_generated|divider|divider|op_5~1_sumout\ & ((\convert_binary|Div2|auto_generated|divider|divider|op_5~13_sumout\))) # 
-- (\convert_binary|Div2|auto_generated|divider|divider|op_5~1_sumout\ & (\convert_binary|Div2|auto_generated|divider|divider|StageOut[16]~13_combout\)) ) + ( GND ) + ( \convert_binary|Div2|auto_generated|divider|divider|op_6~14\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\,
	datac => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[16]~13_combout\,
	datad => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_5~13_sumout\,
	cin => \convert_binary|Div2|auto_generated|divider|divider|op_6~14\,
	sumout => \convert_binary|Div2|auto_generated|divider|divider|op_6~17_sumout\,
	cout => \convert_binary|Div2|auto_generated|divider|divider|op_6~18\);

\convert_binary|Div2|auto_generated|divider|divider|op_6~22\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|op_6~22_cout\ = CARRY(( (!\convert_binary|Div2|auto_generated|divider|divider|op_5~1_sumout\ & (((\convert_binary|Div2|auto_generated|divider|divider|op_5~25_sumout\)))) # 
-- (\convert_binary|Div2|auto_generated|divider|divider|op_5~1_sumout\ & (((\convert_binary|Div2|auto_generated|divider|divider|StageOut[17]~20_combout\)) # (\convert_binary|Div2|auto_generated|divider|divider|StageOut[17]~19_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Div2|auto_generated|divider|divider|op_6~18\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\,
	datab => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[17]~19_combout\,
	datac => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_5~25_sumout\,
	datad => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[17]~20_combout\,
	cin => \convert_binary|Div2|auto_generated|divider|divider|op_6~18\,
	cout => \convert_binary|Div2|auto_generated|divider|divider|op_6~22_cout\);

\convert_binary|Div2|auto_generated|divider|divider|op_6~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|op_6~1_sumout\ = SUM(( VCC ) + ( GND ) + ( \convert_binary|Div2|auto_generated|divider|divider|op_6~22_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Div2|auto_generated|divider|divider|op_6~22_cout\,
	sumout => \convert_binary|Div2|auto_generated|divider|divider|op_6~1_sumout\);

\convert_binary|Div2|auto_generated|divider|divider|StageOut[22]~12\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|StageOut[22]~12_combout\ = (!\convert_binary|Div2|auto_generated|divider|divider|op_5~1_sumout\ & \convert_binary|Div2|auto_generated|divider|divider|op_5~13_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\,
	datab => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_5~13_sumout\,
	combout => \convert_binary|Div2|auto_generated|divider|divider|StageOut[22]~12_combout\);

\convert_binary|Div2|auto_generated|divider|divider|StageOut[22]~14\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|StageOut[22]~14_combout\ = (\convert_binary|Div2|auto_generated|divider|divider|op_5~1_sumout\ & \convert_binary|Div2|auto_generated|divider|divider|StageOut[16]~13_combout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\,
	datab => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[16]~13_combout\,
	combout => \convert_binary|Div2|auto_generated|divider|divider|StageOut[22]~14_combout\);

\convert_binary|Div2|auto_generated|divider|divider|StageOut[21]~10\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|StageOut[21]~10_combout\ = (!\convert_binary|Div2|auto_generated|divider|divider|op_5~1_sumout\ & ((\convert_binary|Div2|auto_generated|divider|divider|op_5~9_sumout\))) # 
-- (\convert_binary|Div2|auto_generated|divider|divider|op_5~1_sumout\ & (\convert_binary|Div2|auto_generated|divider|divider|StageOut[15]~9_combout\))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001101100011011000110110001101100011011000110110001101100011011",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\,
	datab => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[15]~9_combout\,
	datac => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_5~9_sumout\,
	combout => \convert_binary|Div2|auto_generated|divider|divider|StageOut[21]~10_combout\);

\convert_binary|Div2|auto_generated|divider|divider|StageOut[20]~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|StageOut[20]~5_combout\ = (!\convert_binary|Div2|auto_generated|divider|divider|op_5~1_sumout\ & ((\convert_binary|Div2|auto_generated|divider|divider|op_5~5_sumout\))) # 
-- (\convert_binary|Div2|auto_generated|divider|divider|op_5~1_sumout\ & (Remainder_input(5)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001110100011101000111010001110100011101000111010001110100011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => ALT_INV_Remainder_input(5),
	datab => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\,
	datac => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_5~5_sumout\,
	combout => \convert_binary|Div2|auto_generated|divider|divider|StageOut[20]~5_combout\);

\convert_binary|Div2|auto_generated|divider|divider|op_7~26\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|op_7~26_cout\ = CARRY(( VCC ) + ( VCC ) + ( !VCC ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => GND,
	cout => \convert_binary|Div2|auto_generated|divider|divider|op_7~26_cout\);

\convert_binary|Div2|auto_generated|divider|divider|op_7~21\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|op_7~21_sumout\ = SUM(( Remainder_input(3) ) + ( VCC ) + ( \convert_binary|Div2|auto_generated|divider|divider|op_7~26_cout\ ))
-- \convert_binary|Div2|auto_generated|divider|divider|op_7~22\ = CARRY(( Remainder_input(3) ) + ( VCC ) + ( \convert_binary|Div2|auto_generated|divider|divider|op_7~26_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => ALT_INV_Remainder_input(3),
	cin => \convert_binary|Div2|auto_generated|divider|divider|op_7~26_cout\,
	sumout => \convert_binary|Div2|auto_generated|divider|divider|op_7~21_sumout\,
	cout => \convert_binary|Div2|auto_generated|divider|divider|op_7~22\);

\convert_binary|Div2|auto_generated|divider|divider|op_7~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|op_7~9_sumout\ = SUM(( (!\convert_binary|Div2|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Div2|auto_generated|divider|divider|op_6~5_sumout\))) # 
-- (\convert_binary|Div2|auto_generated|divider|divider|op_6~1_sumout\ & (Remainder_input(4))) ) + ( GND ) + ( \convert_binary|Div2|auto_generated|divider|divider|op_7~22\ ))
-- \convert_binary|Div2|auto_generated|divider|divider|op_7~10\ = CARRY(( (!\convert_binary|Div2|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Div2|auto_generated|divider|divider|op_6~5_sumout\))) # 
-- (\convert_binary|Div2|auto_generated|divider|divider|op_6~1_sumout\ & (Remainder_input(4))) ) + ( GND ) + ( \convert_binary|Div2|auto_generated|divider|divider|op_7~22\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000001000111011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => ALT_INV_Remainder_input(4),
	datab => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datad => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_6~5_sumout\,
	cin => \convert_binary|Div2|auto_generated|divider|divider|op_7~22\,
	sumout => \convert_binary|Div2|auto_generated|divider|divider|op_7~9_sumout\,
	cout => \convert_binary|Div2|auto_generated|divider|divider|op_7~10\);

\convert_binary|Div2|auto_generated|divider|divider|op_7~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|op_7~13_sumout\ = SUM(( (!\convert_binary|Div2|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Div2|auto_generated|divider|divider|op_6~9_sumout\))) # 
-- (\convert_binary|Div2|auto_generated|divider|divider|op_6~1_sumout\ & (\convert_binary|Div2|auto_generated|divider|divider|StageOut[20]~5_combout\)) ) + ( VCC ) + ( \convert_binary|Div2|auto_generated|divider|divider|op_7~10\ ))
-- \convert_binary|Div2|auto_generated|divider|divider|op_7~14\ = CARRY(( (!\convert_binary|Div2|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Div2|auto_generated|divider|divider|op_6~9_sumout\))) # 
-- (\convert_binary|Div2|auto_generated|divider|divider|op_6~1_sumout\ & (\convert_binary|Div2|auto_generated|divider|divider|StageOut[20]~5_combout\)) ) + ( VCC ) + ( \convert_binary|Div2|auto_generated|divider|divider|op_7~10\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000001111001111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datab => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datac => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[20]~5_combout\,
	datad => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_6~9_sumout\,
	cin => \convert_binary|Div2|auto_generated|divider|divider|op_7~10\,
	sumout => \convert_binary|Div2|auto_generated|divider|divider|op_7~13_sumout\,
	cout => \convert_binary|Div2|auto_generated|divider|divider|op_7~14\);

\convert_binary|Div2|auto_generated|divider|divider|op_7~17\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|op_7~17_sumout\ = SUM(( (!\convert_binary|Div2|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Div2|auto_generated|divider|divider|op_6~13_sumout\))) # 
-- (\convert_binary|Div2|auto_generated|divider|divider|op_6~1_sumout\ & (\convert_binary|Div2|auto_generated|divider|divider|StageOut[21]~10_combout\)) ) + ( GND ) + ( \convert_binary|Div2|auto_generated|divider|divider|op_7~14\ ))
-- \convert_binary|Div2|auto_generated|divider|divider|op_7~18\ = CARRY(( (!\convert_binary|Div2|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Div2|auto_generated|divider|divider|op_6~13_sumout\))) # 
-- (\convert_binary|Div2|auto_generated|divider|divider|op_6~1_sumout\ & (\convert_binary|Div2|auto_generated|divider|divider|StageOut[21]~10_combout\)) ) + ( GND ) + ( \convert_binary|Div2|auto_generated|divider|divider|op_7~14\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datac => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[21]~10_combout\,
	datad => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_6~13_sumout\,
	cin => \convert_binary|Div2|auto_generated|divider|divider|op_7~14\,
	sumout => \convert_binary|Div2|auto_generated|divider|divider|op_7~17_sumout\,
	cout => \convert_binary|Div2|auto_generated|divider|divider|op_7~18\);

\convert_binary|Div2|auto_generated|divider|divider|op_7~6\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|op_7~6_cout\ = CARRY(( (!\convert_binary|Div2|auto_generated|divider|divider|op_6~1_sumout\ & (((\convert_binary|Div2|auto_generated|divider|divider|op_6~17_sumout\)))) # 
-- (\convert_binary|Div2|auto_generated|divider|divider|op_6~1_sumout\ & (((\convert_binary|Div2|auto_generated|divider|divider|StageOut[22]~14_combout\)) # (\convert_binary|Div2|auto_generated|divider|divider|StageOut[22]~12_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Div2|auto_generated|divider|divider|op_7~18\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datab => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[22]~12_combout\,
	datac => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_6~17_sumout\,
	datad => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[22]~14_combout\,
	cin => \convert_binary|Div2|auto_generated|divider|divider|op_7~18\,
	cout => \convert_binary|Div2|auto_generated|divider|divider|op_7~6_cout\);

\convert_binary|Div2|auto_generated|divider|divider|op_7~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|op_7~1_sumout\ = SUM(( VCC ) + ( GND ) + ( \convert_binary|Div2|auto_generated|divider|divider|op_7~6_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Div2|auto_generated|divider|divider|op_7~6_cout\,
	sumout => \convert_binary|Div2|auto_generated|divider|divider|op_7~1_sumout\);

\convert_binary|Div2|auto_generated|divider|divider|StageOut[27]~8\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|StageOut[27]~8_combout\ = (!\convert_binary|Div2|auto_generated|divider|divider|op_6~1_sumout\ & \convert_binary|Div2|auto_generated|divider|divider|op_6~13_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datab => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_6~13_sumout\,
	combout => \convert_binary|Div2|auto_generated|divider|divider|StageOut[27]~8_combout\);

\convert_binary|Div2|auto_generated|divider|divider|StageOut[27]~11\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|StageOut[27]~11_combout\ = (\convert_binary|Div2|auto_generated|divider|divider|op_6~1_sumout\ & \convert_binary|Div2|auto_generated|divider|divider|StageOut[21]~10_combout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datab => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[21]~10_combout\,
	combout => \convert_binary|Div2|auto_generated|divider|divider|StageOut[27]~11_combout\);

\convert_binary|Div2|auto_generated|divider|divider|StageOut[26]~6\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|StageOut[26]~6_combout\ = (!\convert_binary|Div2|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Div2|auto_generated|divider|divider|op_6~9_sumout\))) # 
-- (\convert_binary|Div2|auto_generated|divider|divider|op_6~1_sumout\ & (\convert_binary|Div2|auto_generated|divider|divider|StageOut[20]~5_combout\))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001101100011011000110110001101100011011000110110001101100011011",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datab => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[20]~5_combout\,
	datac => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_6~9_sumout\,
	combout => \convert_binary|Div2|auto_generated|divider|divider|StageOut[26]~6_combout\);

\convert_binary|Div2|auto_generated|divider|divider|StageOut[25]~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|StageOut[25]~1_combout\ = (!\convert_binary|Div2|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Div2|auto_generated|divider|divider|op_6~5_sumout\))) # 
-- (\convert_binary|Div2|auto_generated|divider|divider|op_6~1_sumout\ & (Remainder_input(4)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001110100011101000111010001110100011101000111010001110100011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => ALT_INV_Remainder_input(4),
	datab => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datac => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_6~5_sumout\,
	combout => \convert_binary|Div2|auto_generated|divider|divider|StageOut[25]~1_combout\);

\convert_binary|Div2|auto_generated|divider|divider|op_8~26\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|op_8~26_cout\ = CARRY(( VCC ) + ( VCC ) + ( !VCC ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => GND,
	cout => \convert_binary|Div2|auto_generated|divider|divider|op_8~26_cout\);

\convert_binary|Div2|auto_generated|divider|divider|op_8~21\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|op_8~21_sumout\ = SUM(( Remainder_input(2) ) + ( VCC ) + ( \convert_binary|Div2|auto_generated|divider|divider|op_8~26_cout\ ))
-- \convert_binary|Div2|auto_generated|divider|divider|op_8~22\ = CARRY(( Remainder_input(2) ) + ( VCC ) + ( \convert_binary|Div2|auto_generated|divider|divider|op_8~26_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => ALT_INV_Remainder_input(2),
	cin => \convert_binary|Div2|auto_generated|divider|divider|op_8~26_cout\,
	sumout => \convert_binary|Div2|auto_generated|divider|divider|op_8~21_sumout\,
	cout => \convert_binary|Div2|auto_generated|divider|divider|op_8~22\);

\convert_binary|Div2|auto_generated|divider|divider|op_8~17\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|op_8~17_sumout\ = SUM(( (!\convert_binary|Div2|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Div2|auto_generated|divider|divider|op_7~21_sumout\))) # 
-- (\convert_binary|Div2|auto_generated|divider|divider|op_7~1_sumout\ & (Remainder_input(3))) ) + ( GND ) + ( \convert_binary|Div2|auto_generated|divider|divider|op_8~22\ ))
-- \convert_binary|Div2|auto_generated|divider|divider|op_8~18\ = CARRY(( (!\convert_binary|Div2|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Div2|auto_generated|divider|divider|op_7~21_sumout\))) # 
-- (\convert_binary|Div2|auto_generated|divider|divider|op_7~1_sumout\ & (Remainder_input(3))) ) + ( GND ) + ( \convert_binary|Div2|auto_generated|divider|divider|op_8~22\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000001000111011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => ALT_INV_Remainder_input(3),
	datab => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datad => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_7~21_sumout\,
	cin => \convert_binary|Div2|auto_generated|divider|divider|op_8~22\,
	sumout => \convert_binary|Div2|auto_generated|divider|divider|op_8~17_sumout\,
	cout => \convert_binary|Div2|auto_generated|divider|divider|op_8~18\);

\convert_binary|Div2|auto_generated|divider|divider|op_8~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|op_8~9_sumout\ = SUM(( (!\convert_binary|Div2|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Div2|auto_generated|divider|divider|op_7~9_sumout\))) # 
-- (\convert_binary|Div2|auto_generated|divider|divider|op_7~1_sumout\ & (\convert_binary|Div2|auto_generated|divider|divider|StageOut[25]~1_combout\)) ) + ( VCC ) + ( \convert_binary|Div2|auto_generated|divider|divider|op_8~18\ ))
-- \convert_binary|Div2|auto_generated|divider|divider|op_8~10\ = CARRY(( (!\convert_binary|Div2|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Div2|auto_generated|divider|divider|op_7~9_sumout\))) # 
-- (\convert_binary|Div2|auto_generated|divider|divider|op_7~1_sumout\ & (\convert_binary|Div2|auto_generated|divider|divider|StageOut[25]~1_combout\)) ) + ( VCC ) + ( \convert_binary|Div2|auto_generated|divider|divider|op_8~18\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000001111001111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datab => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datac => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[25]~1_combout\,
	datad => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_7~9_sumout\,
	cin => \convert_binary|Div2|auto_generated|divider|divider|op_8~18\,
	sumout => \convert_binary|Div2|auto_generated|divider|divider|op_8~9_sumout\,
	cout => \convert_binary|Div2|auto_generated|divider|divider|op_8~10\);

\convert_binary|Div2|auto_generated|divider|divider|op_8~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|op_8~13_sumout\ = SUM(( (!\convert_binary|Div2|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Div2|auto_generated|divider|divider|op_7~13_sumout\))) # 
-- (\convert_binary|Div2|auto_generated|divider|divider|op_7~1_sumout\ & (\convert_binary|Div2|auto_generated|divider|divider|StageOut[26]~6_combout\)) ) + ( GND ) + ( \convert_binary|Div2|auto_generated|divider|divider|op_8~10\ ))
-- \convert_binary|Div2|auto_generated|divider|divider|op_8~14\ = CARRY(( (!\convert_binary|Div2|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Div2|auto_generated|divider|divider|op_7~13_sumout\))) # 
-- (\convert_binary|Div2|auto_generated|divider|divider|op_7~1_sumout\ & (\convert_binary|Div2|auto_generated|divider|divider|StageOut[26]~6_combout\)) ) + ( GND ) + ( \convert_binary|Div2|auto_generated|divider|divider|op_8~10\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datac => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[26]~6_combout\,
	datad => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_7~13_sumout\,
	cin => \convert_binary|Div2|auto_generated|divider|divider|op_8~10\,
	sumout => \convert_binary|Div2|auto_generated|divider|divider|op_8~13_sumout\,
	cout => \convert_binary|Div2|auto_generated|divider|divider|op_8~14\);

\convert_binary|Div2|auto_generated|divider|divider|op_8~6\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|op_8~6_cout\ = CARRY(( (!\convert_binary|Div2|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Div2|auto_generated|divider|divider|op_7~17_sumout\)))) # 
-- (\convert_binary|Div2|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Div2|auto_generated|divider|divider|StageOut[27]~11_combout\)) # (\convert_binary|Div2|auto_generated|divider|divider|StageOut[27]~8_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Div2|auto_generated|divider|divider|op_8~14\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[27]~8_combout\,
	datac => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_7~17_sumout\,
	datad => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[27]~11_combout\,
	cin => \convert_binary|Div2|auto_generated|divider|divider|op_8~14\,
	cout => \convert_binary|Div2|auto_generated|divider|divider|op_8~6_cout\);

\convert_binary|Div2|auto_generated|divider|divider|op_8~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|op_8~1_sumout\ = SUM(( VCC ) + ( GND ) + ( \convert_binary|Div2|auto_generated|divider|divider|op_8~6_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Div2|auto_generated|divider|divider|op_8~6_cout\,
	sumout => \convert_binary|Div2|auto_generated|divider|divider|op_8~1_sumout\);

\convert_binary|Div2|auto_generated|divider|divider|StageOut[32]~4\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|StageOut[32]~4_combout\ = (!\convert_binary|Div2|auto_generated|divider|divider|op_7~1_sumout\ & \convert_binary|Div2|auto_generated|divider|divider|op_7~13_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_7~13_sumout\,
	combout => \convert_binary|Div2|auto_generated|divider|divider|StageOut[32]~4_combout\);

\convert_binary|Div2|auto_generated|divider|divider|StageOut[32]~7\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|StageOut[32]~7_combout\ = (\convert_binary|Div2|auto_generated|divider|divider|op_7~1_sumout\ & \convert_binary|Div2|auto_generated|divider|divider|StageOut[26]~6_combout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[26]~6_combout\,
	combout => \convert_binary|Div2|auto_generated|divider|divider|StageOut[32]~7_combout\);

\convert_binary|Div2|auto_generated|divider|divider|StageOut[31]~2\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|StageOut[31]~2_combout\ = (!\convert_binary|Div2|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Div2|auto_generated|divider|divider|op_7~9_sumout\))) # 
-- (\convert_binary|Div2|auto_generated|divider|divider|op_7~1_sumout\ & (\convert_binary|Div2|auto_generated|divider|divider|StageOut[25]~1_combout\))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001101100011011000110110001101100011011000110110001101100011011",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[25]~1_combout\,
	datac => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_7~9_sumout\,
	combout => \convert_binary|Div2|auto_generated|divider|divider|StageOut[31]~2_combout\);

\convert_binary|Div2|auto_generated|divider|divider|StageOut[30]~15\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|StageOut[30]~15_combout\ = (!\convert_binary|Div2|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Div2|auto_generated|divider|divider|op_7~21_sumout\))) # 
-- (\convert_binary|Div2|auto_generated|divider|divider|op_7~1_sumout\ & (Remainder_input(3)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001110100011101000111010001110100011101000111010001110100011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => ALT_INV_Remainder_input(3),
	datab => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datac => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_7~21_sumout\,
	combout => \convert_binary|Div2|auto_generated|divider|divider|StageOut[30]~15_combout\);

\convert_binary|Div2|auto_generated|divider|divider|op_9~26\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|op_9~26_cout\ = CARRY(( VCC ) + ( VCC ) + ( !VCC ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => GND,
	cout => \convert_binary|Div2|auto_generated|divider|divider|op_9~26_cout\);

\convert_binary|Div2|auto_generated|divider|divider|op_9~21\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|op_9~21_sumout\ = SUM(( Remainder_input(1) ) + ( VCC ) + ( \convert_binary|Div2|auto_generated|divider|divider|op_9~26_cout\ ))
-- \convert_binary|Div2|auto_generated|divider|divider|op_9~22\ = CARRY(( Remainder_input(1) ) + ( VCC ) + ( \convert_binary|Div2|auto_generated|divider|divider|op_9~26_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => ALT_INV_Remainder_input(1),
	cin => \convert_binary|Div2|auto_generated|divider|divider|op_9~26_cout\,
	sumout => \convert_binary|Div2|auto_generated|divider|divider|op_9~21_sumout\,
	cout => \convert_binary|Div2|auto_generated|divider|divider|op_9~22\);

\convert_binary|Div2|auto_generated|divider|divider|op_9~17\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|op_9~17_sumout\ = SUM(( (!\convert_binary|Div2|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Div2|auto_generated|divider|divider|op_8~21_sumout\))) # 
-- (\convert_binary|Div2|auto_generated|divider|divider|op_8~1_sumout\ & (Remainder_input(2))) ) + ( GND ) + ( \convert_binary|Div2|auto_generated|divider|divider|op_9~22\ ))
-- \convert_binary|Div2|auto_generated|divider|divider|op_9~18\ = CARRY(( (!\convert_binary|Div2|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Div2|auto_generated|divider|divider|op_8~21_sumout\))) # 
-- (\convert_binary|Div2|auto_generated|divider|divider|op_8~1_sumout\ & (Remainder_input(2))) ) + ( GND ) + ( \convert_binary|Div2|auto_generated|divider|divider|op_9~22\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000001000111011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => ALT_INV_Remainder_input(2),
	datab => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datad => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_8~21_sumout\,
	cin => \convert_binary|Div2|auto_generated|divider|divider|op_9~22\,
	sumout => \convert_binary|Div2|auto_generated|divider|divider|op_9~17_sumout\,
	cout => \convert_binary|Div2|auto_generated|divider|divider|op_9~18\);

\convert_binary|Div2|auto_generated|divider|divider|op_9~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|op_9~13_sumout\ = SUM(( (!\convert_binary|Div2|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Div2|auto_generated|divider|divider|op_8~17_sumout\))) # 
-- (\convert_binary|Div2|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Div2|auto_generated|divider|divider|StageOut[30]~15_combout\)) ) + ( VCC ) + ( \convert_binary|Div2|auto_generated|divider|divider|op_9~18\ ))
-- \convert_binary|Div2|auto_generated|divider|divider|op_9~14\ = CARRY(( (!\convert_binary|Div2|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Div2|auto_generated|divider|divider|op_8~17_sumout\))) # 
-- (\convert_binary|Div2|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Div2|auto_generated|divider|divider|StageOut[30]~15_combout\)) ) + ( VCC ) + ( \convert_binary|Div2|auto_generated|divider|divider|op_9~18\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000001111001111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datab => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datac => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[30]~15_combout\,
	datad => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_8~17_sumout\,
	cin => \convert_binary|Div2|auto_generated|divider|divider|op_9~18\,
	sumout => \convert_binary|Div2|auto_generated|divider|divider|op_9~13_sumout\,
	cout => \convert_binary|Div2|auto_generated|divider|divider|op_9~14\);

\convert_binary|Div2|auto_generated|divider|divider|op_9~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|op_9~9_sumout\ = SUM(( (!\convert_binary|Div2|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Div2|auto_generated|divider|divider|op_8~9_sumout\))) # 
-- (\convert_binary|Div2|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Div2|auto_generated|divider|divider|StageOut[31]~2_combout\)) ) + ( GND ) + ( \convert_binary|Div2|auto_generated|divider|divider|op_9~14\ ))
-- \convert_binary|Div2|auto_generated|divider|divider|op_9~10\ = CARRY(( (!\convert_binary|Div2|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Div2|auto_generated|divider|divider|op_8~9_sumout\))) # 
-- (\convert_binary|Div2|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Div2|auto_generated|divider|divider|StageOut[31]~2_combout\)) ) + ( GND ) + ( \convert_binary|Div2|auto_generated|divider|divider|op_9~14\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datac => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[31]~2_combout\,
	datad => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_8~9_sumout\,
	cin => \convert_binary|Div2|auto_generated|divider|divider|op_9~14\,
	sumout => \convert_binary|Div2|auto_generated|divider|divider|op_9~9_sumout\,
	cout => \convert_binary|Div2|auto_generated|divider|divider|op_9~10\);

\convert_binary|Div2|auto_generated|divider|divider|op_9~6\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|op_9~6_cout\ = CARRY(( (!\convert_binary|Div2|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Div2|auto_generated|divider|divider|op_8~13_sumout\)))) # 
-- (\convert_binary|Div2|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Div2|auto_generated|divider|divider|StageOut[32]~7_combout\)) # (\convert_binary|Div2|auto_generated|divider|divider|StageOut[32]~4_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Div2|auto_generated|divider|divider|op_9~10\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[32]~4_combout\,
	datac => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_8~13_sumout\,
	datad => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[32]~7_combout\,
	cin => \convert_binary|Div2|auto_generated|divider|divider|op_9~10\,
	cout => \convert_binary|Div2|auto_generated|divider|divider|op_9~6_cout\);

\convert_binary|Div2|auto_generated|divider|divider|op_9~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|op_9~1_sumout\ = SUM(( VCC ) + ( GND ) + ( \convert_binary|Div2|auto_generated|divider|divider|op_9~6_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Div2|auto_generated|divider|divider|op_9~6_cout\,
	sumout => \convert_binary|Div2|auto_generated|divider|divider|op_9~1_sumout\);

\convert_binary|Div2|auto_generated|divider|divider|StageOut[37]~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|StageOut[37]~0_combout\ = (!\convert_binary|Div2|auto_generated|divider|divider|op_8~1_sumout\ & \convert_binary|Div2|auto_generated|divider|divider|op_8~9_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_8~9_sumout\,
	combout => \convert_binary|Div2|auto_generated|divider|divider|StageOut[37]~0_combout\);

\convert_binary|Div2|auto_generated|divider|divider|StageOut[37]~3\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|StageOut[37]~3_combout\ = (\convert_binary|Div2|auto_generated|divider|divider|op_8~1_sumout\ & \convert_binary|Div2|auto_generated|divider|divider|StageOut[31]~2_combout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[31]~2_combout\,
	combout => \convert_binary|Div2|auto_generated|divider|divider|StageOut[37]~3_combout\);

\convert_binary|Div2|auto_generated|divider|divider|StageOut[36]~16\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|StageOut[36]~16_combout\ = (!\convert_binary|Div2|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Div2|auto_generated|divider|divider|op_8~17_sumout\))) # 
-- (\convert_binary|Div2|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Div2|auto_generated|divider|divider|StageOut[30]~15_combout\))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001101100011011000110110001101100011011000110110001101100011011",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[30]~15_combout\,
	datac => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_8~17_sumout\,
	combout => \convert_binary|Div2|auto_generated|divider|divider|StageOut[36]~16_combout\);

\convert_binary|Div2|auto_generated|divider|divider|StageOut[35]~21\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|StageOut[35]~21_combout\ = (!\convert_binary|Div2|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Div2|auto_generated|divider|divider|op_8~21_sumout\))) # 
-- (\convert_binary|Div2|auto_generated|divider|divider|op_8~1_sumout\ & (Remainder_input(2)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001110100011101000111010001110100011101000111010001110100011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => ALT_INV_Remainder_input(2),
	datab => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datac => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_8~21_sumout\,
	combout => \convert_binary|Div2|auto_generated|divider|divider|StageOut[35]~21_combout\);

\convert_binary|Div2|auto_generated|divider|divider|op_10~26\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|op_10~26_cout\ = CARRY(( VCC ) + ( VCC ) + ( !VCC ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => GND,
	cout => \convert_binary|Div2|auto_generated|divider|divider|op_10~26_cout\);

\convert_binary|Div2|auto_generated|divider|divider|op_10~22\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|op_10~22_cout\ = CARRY(( Remainder_input(0) ) + ( VCC ) + ( \convert_binary|Div2|auto_generated|divider|divider|op_10~26_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => ALT_INV_Remainder_input(0),
	cin => \convert_binary|Div2|auto_generated|divider|divider|op_10~26_cout\,
	cout => \convert_binary|Div2|auto_generated|divider|divider|op_10~22_cout\);

\convert_binary|Div2|auto_generated|divider|divider|op_10~18\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|op_10~18_cout\ = CARRY(( (!\convert_binary|Div2|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Div2|auto_generated|divider|divider|op_9~21_sumout\))) # 
-- (\convert_binary|Div2|auto_generated|divider|divider|op_9~1_sumout\ & (Remainder_input(1))) ) + ( GND ) + ( \convert_binary|Div2|auto_generated|divider|divider|op_10~22_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000001000111011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => ALT_INV_Remainder_input(1),
	datab => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datad => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_9~21_sumout\,
	cin => \convert_binary|Div2|auto_generated|divider|divider|op_10~22_cout\,
	cout => \convert_binary|Div2|auto_generated|divider|divider|op_10~18_cout\);

\convert_binary|Div2|auto_generated|divider|divider|op_10~14\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|op_10~14_cout\ = CARRY(( (!\convert_binary|Div2|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Div2|auto_generated|divider|divider|op_9~17_sumout\))) # 
-- (\convert_binary|Div2|auto_generated|divider|divider|op_9~1_sumout\ & (\convert_binary|Div2|auto_generated|divider|divider|StageOut[35]~21_combout\)) ) + ( VCC ) + ( \convert_binary|Div2|auto_generated|divider|divider|op_10~18_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000001111001111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datab => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datac => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[35]~21_combout\,
	datad => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_9~17_sumout\,
	cin => \convert_binary|Div2|auto_generated|divider|divider|op_10~18_cout\,
	cout => \convert_binary|Div2|auto_generated|divider|divider|op_10~14_cout\);

\convert_binary|Div2|auto_generated|divider|divider|op_10~10\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|op_10~10_cout\ = CARRY(( (!\convert_binary|Div2|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Div2|auto_generated|divider|divider|op_9~13_sumout\))) # 
-- (\convert_binary|Div2|auto_generated|divider|divider|op_9~1_sumout\ & (\convert_binary|Div2|auto_generated|divider|divider|StageOut[36]~16_combout\)) ) + ( GND ) + ( \convert_binary|Div2|auto_generated|divider|divider|op_10~14_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datac => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[36]~16_combout\,
	datad => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_9~13_sumout\,
	cin => \convert_binary|Div2|auto_generated|divider|divider|op_10~14_cout\,
	cout => \convert_binary|Div2|auto_generated|divider|divider|op_10~10_cout\);

\convert_binary|Div2|auto_generated|divider|divider|op_10~6\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|op_10~6_cout\ = CARRY(( (!\convert_binary|Div2|auto_generated|divider|divider|op_9~1_sumout\ & (((\convert_binary|Div2|auto_generated|divider|divider|op_9~9_sumout\)))) # 
-- (\convert_binary|Div2|auto_generated|divider|divider|op_9~1_sumout\ & (((\convert_binary|Div2|auto_generated|divider|divider|StageOut[37]~3_combout\)) # (\convert_binary|Div2|auto_generated|divider|divider|StageOut[37]~0_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Div2|auto_generated|divider|divider|op_10~10_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datab => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[37]~0_combout\,
	datac => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_9~9_sumout\,
	datad => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_StageOut[37]~3_combout\,
	cin => \convert_binary|Div2|auto_generated|divider|divider|op_10~10_cout\,
	cout => \convert_binary|Div2|auto_generated|divider|divider|op_10~6_cout\);

\convert_binary|Div2|auto_generated|divider|divider|op_10~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div2|auto_generated|divider|divider|op_10~1_sumout\ = SUM(( VCC ) + ( GND ) + ( \convert_binary|Div2|auto_generated|divider|divider|op_10~6_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Div2|auto_generated|divider|divider|op_10~6_cout\,
	sumout => \convert_binary|Div2|auto_generated|divider|divider|op_10~1_sumout\);

\convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[0]~21\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[0]~21_sumout\ = SUM(( !\convert_binary|Div2|auto_generated|divider|divider|op_5~1_sumout\ ) + ( !VCC ) + ( !VCC ))
-- \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[0]~22\ = CARRY(( !\convert_binary|Div2|auto_generated|divider|divider|op_5~1_sumout\ ) + ( !VCC ) + ( !VCC ))
-- \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[0]~23\ = SHARE(VCC)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000001111111100000000",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	datad => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\,
	cin => GND,
	sharein => GND,
	sumout => \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[0]~21_sumout\,
	cout => \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[0]~22\,
	shareout => \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[0]~23\);

\convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[1]~17\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[1]~17_sumout\ = SUM(( !\convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\ ) + ( 
-- \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[0]~23\ ) + ( \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[0]~22\ ))
-- \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[1]~18\ = CARRY(( !\convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\ ) + ( 
-- \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[0]~23\ ) + ( \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[0]~22\ ))
-- \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[1]~19\ = SHARE(GND)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111100000000",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	datad => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~1_sumout\,
	cin => \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[0]~22\,
	sharein => \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[0]~23\,
	sumout => \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[1]~17_sumout\,
	cout => \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[1]~18\,
	shareout => \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[1]~19\);

\convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[2]~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[2]~13_sumout\ = SUM(( VCC ) + ( \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[1]~19\ ) + ( 
-- \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[1]~18\ ))
-- \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[2]~14\ = CARRY(( VCC ) + ( \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[1]~19\ ) + ( 
-- \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[1]~18\ ))
-- \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[2]~15\ = SHARE(GND)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[1]~18\,
	sharein => \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[1]~19\,
	sumout => \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[2]~13_sumout\,
	cout => \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[2]~14\,
	shareout => \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[2]~15\);

\convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[3]~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[3]~9_sumout\ = SUM(( GND ) + ( \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[2]~15\ ) + ( 
-- \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[2]~14\ ))
-- \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[3]~10\ = CARRY(( GND ) + ( \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[2]~15\ ) + ( 
-- \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[2]~14\ ))
-- \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[3]~11\ = SHARE(GND)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000000000000",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[2]~14\,
	sharein => \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[2]~15\,
	sumout => \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[3]~9_sumout\,
	cout => \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[3]~10\,
	shareout => \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[3]~11\);

\convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[4]~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[4]~5_sumout\ = SUM(( VCC ) + ( \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[3]~11\ ) + ( 
-- \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[3]~10\ ))
-- \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[4]~6\ = CARRY(( VCC ) + ( \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[3]~11\ ) + ( 
-- \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[3]~10\ ))
-- \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[4]~7\ = SHARE(GND)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[3]~10\,
	sharein => \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[3]~11\,
	sumout => \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[4]~5_sumout\,
	cout => \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[4]~6\,
	shareout => \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[4]~7\);

\convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[5]~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ = SUM(( VCC ) + ( \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[4]~7\ ) + ( 
-- \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[4]~6\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[4]~6\,
	sharein => \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[4]~7\,
	sumout => \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\);

\convert_binary|Mod3|auto_generated|divider|divider|op_6~30\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|op_6~30_cout\ = CARRY(( VCC ) + ( VCC ) + ( !VCC ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => GND,
	cout => \convert_binary|Mod3|auto_generated|divider|divider|op_6~30_cout\);

\convert_binary|Mod3|auto_generated|divider|divider|op_6~25\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|op_6~25_sumout\ = SUM(( !\convert_binary|Div2|auto_generated|divider|divider|op_6~1_sumout\ ) + ( VCC ) + ( \convert_binary|Mod3|auto_generated|divider|divider|op_6~30_cout\ ))
-- \convert_binary|Mod3|auto_generated|divider|divider|op_6~26\ = CARRY(( !\convert_binary|Div2|auto_generated|divider|divider|op_6~1_sumout\ ) + ( VCC ) + ( \convert_binary|Mod3|auto_generated|divider|divider|op_6~30_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111100000000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	cin => \convert_binary|Mod3|auto_generated|divider|divider|op_6~30_cout\,
	sumout => \convert_binary|Mod3|auto_generated|divider|divider|op_6~25_sumout\,
	cout => \convert_binary|Mod3|auto_generated|divider|divider|op_6~26\);

\convert_binary|Mod3|auto_generated|divider|divider|op_6~21\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|op_6~21_sumout\ = SUM(( (!\convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ & 
-- ((\convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[0]~21_sumout\))) # (\convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ & (!\convert_binary|Div2|auto_generated|divider|divider|op_5~1_sumout\)) ) 
-- + ( GND ) + ( \convert_binary|Mod3|auto_generated|divider|divider|op_6~26\ ))
-- \convert_binary|Mod3|auto_generated|divider|divider|op_6~22\ = CARRY(( (!\convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ & ((\convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[0]~21_sumout\))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ & (!\convert_binary|Div2|auto_generated|divider|divider|op_5~1_sumout\)) ) + ( GND ) + ( \convert_binary|Mod3|auto_generated|divider|divider|op_6~26\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000010001011101110",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\,
	datab => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[5]~1_sumout\,
	datad => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[0]~21_sumout\,
	cin => \convert_binary|Mod3|auto_generated|divider|divider|op_6~26\,
	sumout => \convert_binary|Mod3|auto_generated|divider|divider|op_6~21_sumout\,
	cout => \convert_binary|Mod3|auto_generated|divider|divider|op_6~22\);

\convert_binary|Mod3|auto_generated|divider|divider|op_6~17\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|op_6~17_sumout\ = SUM(( (!\convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ & 
-- ((\convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[1]~17_sumout\))) # (\convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ & 
-- (!\convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\)) ) + ( VCC ) + ( \convert_binary|Mod3|auto_generated|divider|divider|op_6~22\ ))
-- \convert_binary|Mod3|auto_generated|divider|divider|op_6~18\ = CARRY(( (!\convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ & ((\convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[1]~17_sumout\))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ & (!\convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\)) ) + ( VCC ) + ( \convert_binary|Mod3|auto_generated|divider|divider|op_6~22\ 
-- ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000011000011111100",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datab => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[5]~1_sumout\,
	datac => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~1_sumout\,
	datad => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[1]~17_sumout\,
	cin => \convert_binary|Mod3|auto_generated|divider|divider|op_6~22\,
	sumout => \convert_binary|Mod3|auto_generated|divider|divider|op_6~17_sumout\,
	cout => \convert_binary|Mod3|auto_generated|divider|divider|op_6~18\);

\convert_binary|Mod3|auto_generated|divider|divider|op_6~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|op_6~13_sumout\ = SUM(( (!\convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ & \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[2]~13_sumout\) ) 
-- + ( GND ) + ( \convert_binary|Mod3|auto_generated|divider|divider|op_6~18\ ))
-- \convert_binary|Mod3|auto_generated|divider|divider|op_6~14\ = CARRY(( (!\convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ & \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[2]~13_sumout\) ) + ( 
-- GND ) + ( \convert_binary|Mod3|auto_generated|divider|divider|op_6~18\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000010101010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[5]~1_sumout\,
	datad => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[2]~13_sumout\,
	cin => \convert_binary|Mod3|auto_generated|divider|divider|op_6~18\,
	sumout => \convert_binary|Mod3|auto_generated|divider|divider|op_6~13_sumout\,
	cout => \convert_binary|Mod3|auto_generated|divider|divider|op_6~14\);

\convert_binary|Mod3|auto_generated|divider|divider|op_6~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|op_6~9_sumout\ = SUM(( (!\convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ & \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[3]~9_sumout\) ) + 
-- ( VCC ) + ( \convert_binary|Mod3|auto_generated|divider|divider|op_6~14\ ))
-- \convert_binary|Mod3|auto_generated|divider|divider|op_6~10\ = CARRY(( (!\convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ & \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[3]~9_sumout\) ) + ( 
-- VCC ) + ( \convert_binary|Mod3|auto_generated|divider|divider|op_6~14\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000010101010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[5]~1_sumout\,
	datad => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[3]~9_sumout\,
	cin => \convert_binary|Mod3|auto_generated|divider|divider|op_6~14\,
	sumout => \convert_binary|Mod3|auto_generated|divider|divider|op_6~9_sumout\,
	cout => \convert_binary|Mod3|auto_generated|divider|divider|op_6~10\);

\convert_binary|Mod3|auto_generated|divider|divider|op_6~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|op_6~5_sumout\ = SUM(( (!\convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ & \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[4]~5_sumout\) ) + 
-- ( VCC ) + ( \convert_binary|Mod3|auto_generated|divider|divider|op_6~10\ ))
-- \convert_binary|Mod3|auto_generated|divider|divider|op_6~6\ = CARRY(( (!\convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ & \convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[4]~5_sumout\) ) + ( 
-- VCC ) + ( \convert_binary|Mod3|auto_generated|divider|divider|op_6~10\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000010101010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[5]~1_sumout\,
	datad => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[4]~5_sumout\,
	cin => \convert_binary|Mod3|auto_generated|divider|divider|op_6~10\,
	sumout => \convert_binary|Mod3|auto_generated|divider|divider|op_6~5_sumout\,
	cout => \convert_binary|Mod3|auto_generated|divider|divider|op_6~6\);

\convert_binary|Mod3|auto_generated|divider|divider|op_6~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|op_6~1_sumout\ = SUM(( VCC ) + ( GND ) + ( \convert_binary|Mod3|auto_generated|divider|divider|op_6~6\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Mod3|auto_generated|divider|divider|op_6~6\,
	sumout => \convert_binary|Mod3|auto_generated|divider|divider|op_6~1_sumout\);

\convert_binary|Mod3|auto_generated|divider|divider|StageOut[41]~22\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|StageOut[41]~22_combout\ = (!\convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ & 
-- ((\convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[1]~17_sumout\))) # (\convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ & 
-- (!\convert_binary|Div2|auto_generated|divider|divider|add_sub_3_result_int[4]~1_sumout\))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010111000101110001011100010111000101110001011100010111000101110",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_add_sub_3_result_int[4]~1_sumout\,
	datab => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[5]~1_sumout\,
	datac => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[1]~17_sumout\,
	combout => \convert_binary|Mod3|auto_generated|divider|divider|StageOut[41]~22_combout\);

\convert_binary|Mod3|auto_generated|divider|divider|StageOut[40]~27\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|StageOut[40]~27_combout\ = (!\convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ & 
-- ((\convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[0]~21_sumout\))) # (\convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ & (!\convert_binary|Div2|auto_generated|divider|divider|op_5~1_sumout\))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010111000101110001011100010111000101110001011100010111000101110",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_5~1_sumout\,
	datab => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[5]~1_sumout\,
	datac => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[0]~21_sumout\,
	combout => \convert_binary|Mod3|auto_generated|divider|divider|StageOut[40]~27_combout\);

\convert_binary|Mod3|auto_generated|divider|divider|op_7~14\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|op_7~14_cout\ = CARRY(( VCC ) + ( VCC ) + ( !VCC ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => GND,
	cout => \convert_binary|Mod3|auto_generated|divider|divider|op_7~14_cout\);

\convert_binary|Mod3|auto_generated|divider|divider|op_7~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|op_7~5_sumout\ = SUM(( !\convert_binary|Div2|auto_generated|divider|divider|op_7~1_sumout\ ) + ( VCC ) + ( \convert_binary|Mod3|auto_generated|divider|divider|op_7~14_cout\ ))
-- \convert_binary|Mod3|auto_generated|divider|divider|op_7~6\ = CARRY(( !\convert_binary|Div2|auto_generated|divider|divider|op_7~1_sumout\ ) + ( VCC ) + ( \convert_binary|Mod3|auto_generated|divider|divider|op_7~14_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111100000000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	cin => \convert_binary|Mod3|auto_generated|divider|divider|op_7~14_cout\,
	sumout => \convert_binary|Mod3|auto_generated|divider|divider|op_7~5_sumout\,
	cout => \convert_binary|Mod3|auto_generated|divider|divider|op_7~6\);

\convert_binary|Mod3|auto_generated|divider|divider|op_7~33\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|op_7~33_sumout\ = SUM(( (!\convert_binary|Mod3|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Mod3|auto_generated|divider|divider|op_6~25_sumout\))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_6~1_sumout\ & (!\convert_binary|Div2|auto_generated|divider|divider|op_6~1_sumout\)) ) + ( GND ) + ( \convert_binary|Mod3|auto_generated|divider|divider|op_7~6\ ))
-- \convert_binary|Mod3|auto_generated|divider|divider|op_7~34\ = CARRY(( (!\convert_binary|Mod3|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Mod3|auto_generated|divider|divider|op_6~25_sumout\))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_6~1_sumout\ & (!\convert_binary|Div2|auto_generated|divider|divider|op_6~1_sumout\)) ) + ( GND ) + ( \convert_binary|Mod3|auto_generated|divider|divider|op_7~6\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000010001011101110",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datab => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datad => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_6~25_sumout\,
	cin => \convert_binary|Mod3|auto_generated|divider|divider|op_7~6\,
	sumout => \convert_binary|Mod3|auto_generated|divider|divider|op_7~33_sumout\,
	cout => \convert_binary|Mod3|auto_generated|divider|divider|op_7~34\);

\convert_binary|Mod3|auto_generated|divider|divider|op_7~29\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|op_7~29_sumout\ = SUM(( (!\convert_binary|Mod3|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Mod3|auto_generated|divider|divider|op_6~21_sumout\))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_6~1_sumout\ & (\convert_binary|Mod3|auto_generated|divider|divider|StageOut[40]~27_combout\)) ) + ( VCC ) + ( \convert_binary|Mod3|auto_generated|divider|divider|op_7~34\ ))
-- \convert_binary|Mod3|auto_generated|divider|divider|op_7~30\ = CARRY(( (!\convert_binary|Mod3|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Mod3|auto_generated|divider|divider|op_6~21_sumout\))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_6~1_sumout\ & (\convert_binary|Mod3|auto_generated|divider|divider|StageOut[40]~27_combout\)) ) + ( VCC ) + ( \convert_binary|Mod3|auto_generated|divider|divider|op_7~34\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000001111001111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datab => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datac => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[40]~27_combout\,
	datad => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_6~21_sumout\,
	cin => \convert_binary|Mod3|auto_generated|divider|divider|op_7~34\,
	sumout => \convert_binary|Mod3|auto_generated|divider|divider|op_7~29_sumout\,
	cout => \convert_binary|Mod3|auto_generated|divider|divider|op_7~30\);

\convert_binary|Mod3|auto_generated|divider|divider|op_7~25\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|op_7~25_sumout\ = SUM(( (!\convert_binary|Mod3|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Mod3|auto_generated|divider|divider|op_6~17_sumout\))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_6~1_sumout\ & (\convert_binary|Mod3|auto_generated|divider|divider|StageOut[41]~22_combout\)) ) + ( GND ) + ( \convert_binary|Mod3|auto_generated|divider|divider|op_7~30\ ))
-- \convert_binary|Mod3|auto_generated|divider|divider|op_7~26\ = CARRY(( (!\convert_binary|Mod3|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Mod3|auto_generated|divider|divider|op_6~17_sumout\))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_6~1_sumout\ & (\convert_binary|Mod3|auto_generated|divider|divider|StageOut[41]~22_combout\)) ) + ( GND ) + ( \convert_binary|Mod3|auto_generated|divider|divider|op_7~30\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datac => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[41]~22_combout\,
	datad => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_6~17_sumout\,
	cin => \convert_binary|Mod3|auto_generated|divider|divider|op_7~30\,
	sumout => \convert_binary|Mod3|auto_generated|divider|divider|op_7~25_sumout\,
	cout => \convert_binary|Mod3|auto_generated|divider|divider|op_7~26\);

\convert_binary|Mod3|auto_generated|divider|divider|op_7~21\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|op_7~21_sumout\ = SUM(( (!\convert_binary|Mod3|auto_generated|divider|divider|op_6~1_sumout\ & (((\convert_binary|Mod3|auto_generated|divider|divider|op_6~13_sumout\)))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_6~1_sumout\ & (\convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[2]~13_sumout\ & (!\convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\))) ) + 
-- ( VCC ) + ( \convert_binary|Mod3|auto_generated|divider|divider|op_7~26\ ))
-- \convert_binary|Mod3|auto_generated|divider|divider|op_7~22\ = CARRY(( (!\convert_binary|Mod3|auto_generated|divider|divider|op_6~1_sumout\ & (((\convert_binary|Mod3|auto_generated|divider|divider|op_6~13_sumout\)))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_6~1_sumout\ & (\convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[2]~13_sumout\ & (!\convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\))) ) + 
-- ( VCC ) + ( \convert_binary|Mod3|auto_generated|divider|divider|op_7~26\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001000010111010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datab => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[2]~13_sumout\,
	datac => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[5]~1_sumout\,
	datad => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_6~13_sumout\,
	cin => \convert_binary|Mod3|auto_generated|divider|divider|op_7~26\,
	sumout => \convert_binary|Mod3|auto_generated|divider|divider|op_7~21_sumout\,
	cout => \convert_binary|Mod3|auto_generated|divider|divider|op_7~22\);

\convert_binary|Mod3|auto_generated|divider|divider|op_7~17\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|op_7~17_sumout\ = SUM(( (!\convert_binary|Mod3|auto_generated|divider|divider|op_6~1_sumout\ & (((\convert_binary|Mod3|auto_generated|divider|divider|op_6~9_sumout\)))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_6~1_sumout\ & (!\convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ & (\convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[3]~9_sumout\))) ) + ( 
-- VCC ) + ( \convert_binary|Mod3|auto_generated|divider|divider|op_7~22\ ))
-- \convert_binary|Mod3|auto_generated|divider|divider|op_7~18\ = CARRY(( (!\convert_binary|Mod3|auto_generated|divider|divider|op_6~1_sumout\ & (((\convert_binary|Mod3|auto_generated|divider|divider|op_6~9_sumout\)))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_6~1_sumout\ & (!\convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ & (\convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[3]~9_sumout\))) ) + ( 
-- VCC ) + ( \convert_binary|Mod3|auto_generated|divider|divider|op_7~22\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000010010101110",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datab => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[5]~1_sumout\,
	datac => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[3]~9_sumout\,
	datad => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_6~9_sumout\,
	cin => \convert_binary|Mod3|auto_generated|divider|divider|op_7~22\,
	sumout => \convert_binary|Mod3|auto_generated|divider|divider|op_7~17_sumout\,
	cout => \convert_binary|Mod3|auto_generated|divider|divider|op_7~18\);

\convert_binary|Mod3|auto_generated|divider|divider|op_7~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|op_7~9_sumout\ = SUM(( (!\convert_binary|Mod3|auto_generated|divider|divider|op_6~1_sumout\ & (((\convert_binary|Mod3|auto_generated|divider|divider|op_6~5_sumout\)))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_6~1_sumout\ & (!\convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ & (\convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[4]~5_sumout\))) ) + ( 
-- VCC ) + ( \convert_binary|Mod3|auto_generated|divider|divider|op_7~18\ ))
-- \convert_binary|Mod3|auto_generated|divider|divider|op_7~10\ = CARRY(( (!\convert_binary|Mod3|auto_generated|divider|divider|op_6~1_sumout\ & (((\convert_binary|Mod3|auto_generated|divider|divider|op_6~5_sumout\)))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_6~1_sumout\ & (!\convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ & (\convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[4]~5_sumout\))) ) + ( 
-- VCC ) + ( \convert_binary|Mod3|auto_generated|divider|divider|op_7~18\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000010010101110",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datab => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[5]~1_sumout\,
	datac => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[4]~5_sumout\,
	datad => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_6~5_sumout\,
	cin => \convert_binary|Mod3|auto_generated|divider|divider|op_7~18\,
	sumout => \convert_binary|Mod3|auto_generated|divider|divider|op_7~9_sumout\,
	cout => \convert_binary|Mod3|auto_generated|divider|divider|op_7~10\);

\convert_binary|Mod3|auto_generated|divider|divider|op_7~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|op_7~1_sumout\ = SUM(( VCC ) + ( GND ) + ( \convert_binary|Mod3|auto_generated|divider|divider|op_7~10\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Mod3|auto_generated|divider|divider|op_7~10\,
	sumout => \convert_binary|Mod3|auto_generated|divider|divider|op_7~1_sumout\);

\convert_binary|Mod3|auto_generated|divider|divider|StageOut[55]~7\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|StageOut[55]~7_combout\ = (!\convert_binary|Mod3|auto_generated|divider|divider|op_6~1_sumout\ & \convert_binary|Mod3|auto_generated|divider|divider|op_6~5_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datab => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_6~5_sumout\,
	combout => \convert_binary|Mod3|auto_generated|divider|divider|StageOut[55]~7_combout\);

\convert_binary|Mod3|auto_generated|divider|divider|StageOut[55]~8\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|StageOut[55]~8_combout\ = (!\convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ & (\convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[4]~5_sumout\ 
-- & \convert_binary|Mod3|auto_generated|divider|divider|op_6~1_sumout\))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000001000000010000000100000001000000010000000100000001000000010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[5]~1_sumout\,
	datab => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[4]~5_sumout\,
	datac => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	combout => \convert_binary|Mod3|auto_generated|divider|divider|StageOut[55]~8_combout\);

\convert_binary|Mod3|auto_generated|divider|divider|StageOut[54]~12\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|StageOut[54]~12_combout\ = (!\convert_binary|Mod3|auto_generated|divider|divider|op_6~1_sumout\ & \convert_binary|Mod3|auto_generated|divider|divider|op_6~9_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datab => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_6~9_sumout\,
	combout => \convert_binary|Mod3|auto_generated|divider|divider|StageOut[54]~12_combout\);

\convert_binary|Mod3|auto_generated|divider|divider|StageOut[54]~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|StageOut[54]~13_combout\ = (!\convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ & (\convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[3]~9_sumout\ 
-- & \convert_binary|Mod3|auto_generated|divider|divider|op_6~1_sumout\))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000001000000010000000100000001000000010000000100000001000000010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[5]~1_sumout\,
	datab => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[3]~9_sumout\,
	datac => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	combout => \convert_binary|Mod3|auto_generated|divider|divider|StageOut[54]~13_combout\);

\convert_binary|Mod3|auto_generated|divider|divider|StageOut[53]~17\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|StageOut[53]~17_combout\ = (!\convert_binary|Mod3|auto_generated|divider|divider|op_6~1_sumout\ & (((\convert_binary|Mod3|auto_generated|divider|divider|op_6~13_sumout\)))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_6~1_sumout\ & (!\convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[5]~1_sumout\ & (\convert_binary|Mod3|auto_generated|divider|divider|add_sub_4_result_int[2]~13_sumout\)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000001011110010000000101111001000000010111100100000001011110010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[5]~1_sumout\,
	datab => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_add_sub_4_result_int[2]~13_sumout\,
	datac => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datad => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_6~13_sumout\,
	combout => \convert_binary|Mod3|auto_generated|divider|divider|StageOut[53]~17_combout\);

\convert_binary|Mod3|auto_generated|divider|divider|StageOut[52]~21\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|StageOut[52]~21_combout\ = (!\convert_binary|Mod3|auto_generated|divider|divider|op_6~1_sumout\ & \convert_binary|Mod3|auto_generated|divider|divider|op_6~17_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datab => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_6~17_sumout\,
	combout => \convert_binary|Mod3|auto_generated|divider|divider|StageOut[52]~21_combout\);

\convert_binary|Mod3|auto_generated|divider|divider|StageOut[52]~23\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|StageOut[52]~23_combout\ = (\convert_binary|Mod3|auto_generated|divider|divider|op_6~1_sumout\ & \convert_binary|Mod3|auto_generated|divider|divider|StageOut[41]~22_combout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datab => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[41]~22_combout\,
	combout => \convert_binary|Mod3|auto_generated|divider|divider|StageOut[52]~23_combout\);

\convert_binary|Mod3|auto_generated|divider|divider|StageOut[51]~28\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|StageOut[51]~28_combout\ = (!\convert_binary|Mod3|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Mod3|auto_generated|divider|divider|op_6~21_sumout\))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_6~1_sumout\ & (\convert_binary|Mod3|auto_generated|divider|divider|StageOut[40]~27_combout\))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001101100011011000110110001101100011011000110110001101100011011",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datab => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[40]~27_combout\,
	datac => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_6~21_sumout\,
	combout => \convert_binary|Mod3|auto_generated|divider|divider|StageOut[51]~28_combout\);

\convert_binary|Mod3|auto_generated|divider|divider|StageOut[50]~32\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|StageOut[50]~32_combout\ = (!\convert_binary|Mod3|auto_generated|divider|divider|op_6~1_sumout\ & ((\convert_binary|Mod3|auto_generated|divider|divider|op_6~25_sumout\))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_6~1_sumout\ & (!\convert_binary|Div2|auto_generated|divider|divider|op_6~1_sumout\))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010111000101110001011100010111000101110001011100010111000101110",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datab => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_6~1_sumout\,
	datac => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_6~25_sumout\,
	combout => \convert_binary|Mod3|auto_generated|divider|divider|StageOut[50]~32_combout\);

\convert_binary|Mod3|auto_generated|divider|divider|op_8~18\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|op_8~18_cout\ = CARRY(( VCC ) + ( VCC ) + ( !VCC ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => GND,
	cout => \convert_binary|Mod3|auto_generated|divider|divider|op_8~18_cout\);

\convert_binary|Mod3|auto_generated|divider|divider|op_8~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|op_8~5_sumout\ = SUM(( !\convert_binary|Div2|auto_generated|divider|divider|op_8~1_sumout\ ) + ( VCC ) + ( \convert_binary|Mod3|auto_generated|divider|divider|op_8~18_cout\ ))
-- \convert_binary|Mod3|auto_generated|divider|divider|op_8~6\ = CARRY(( !\convert_binary|Div2|auto_generated|divider|divider|op_8~1_sumout\ ) + ( VCC ) + ( \convert_binary|Mod3|auto_generated|divider|divider|op_8~18_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111100000000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	cin => \convert_binary|Mod3|auto_generated|divider|divider|op_8~18_cout\,
	sumout => \convert_binary|Mod3|auto_generated|divider|divider|op_8~5_sumout\,
	cout => \convert_binary|Mod3|auto_generated|divider|divider|op_8~6\);

\convert_binary|Mod3|auto_generated|divider|divider|op_8~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|op_8~9_sumout\ = SUM(( (!\convert_binary|Mod3|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Mod3|auto_generated|divider|divider|op_7~5_sumout\))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_7~1_sumout\ & (!\convert_binary|Div2|auto_generated|divider|divider|op_7~1_sumout\)) ) + ( GND ) + ( \convert_binary|Mod3|auto_generated|divider|divider|op_8~6\ ))
-- \convert_binary|Mod3|auto_generated|divider|divider|op_8~10\ = CARRY(( (!\convert_binary|Mod3|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Mod3|auto_generated|divider|divider|op_7~5_sumout\))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_7~1_sumout\ & (!\convert_binary|Div2|auto_generated|divider|divider|op_7~1_sumout\)) ) + ( GND ) + ( \convert_binary|Mod3|auto_generated|divider|divider|op_8~6\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000010001011101110",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datad => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_7~5_sumout\,
	cin => \convert_binary|Mod3|auto_generated|divider|divider|op_8~6\,
	sumout => \convert_binary|Mod3|auto_generated|divider|divider|op_8~9_sumout\,
	cout => \convert_binary|Mod3|auto_generated|divider|divider|op_8~10\);

\convert_binary|Mod3|auto_generated|divider|divider|op_8~37\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|op_8~37_sumout\ = SUM(( (!\convert_binary|Mod3|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Mod3|auto_generated|divider|divider|op_7~33_sumout\))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_7~1_sumout\ & (\convert_binary|Mod3|auto_generated|divider|divider|StageOut[50]~32_combout\)) ) + ( VCC ) + ( \convert_binary|Mod3|auto_generated|divider|divider|op_8~10\ ))
-- \convert_binary|Mod3|auto_generated|divider|divider|op_8~38\ = CARRY(( (!\convert_binary|Mod3|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Mod3|auto_generated|divider|divider|op_7~33_sumout\))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_7~1_sumout\ & (\convert_binary|Mod3|auto_generated|divider|divider|StageOut[50]~32_combout\)) ) + ( VCC ) + ( \convert_binary|Mod3|auto_generated|divider|divider|op_8~10\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000001111001111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datab => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datac => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[50]~32_combout\,
	datad => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_7~33_sumout\,
	cin => \convert_binary|Mod3|auto_generated|divider|divider|op_8~10\,
	sumout => \convert_binary|Mod3|auto_generated|divider|divider|op_8~37_sumout\,
	cout => \convert_binary|Mod3|auto_generated|divider|divider|op_8~38\);

\convert_binary|Mod3|auto_generated|divider|divider|op_8~33\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|op_8~33_sumout\ = SUM(( (!\convert_binary|Mod3|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Mod3|auto_generated|divider|divider|op_7~29_sumout\))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_7~1_sumout\ & (\convert_binary|Mod3|auto_generated|divider|divider|StageOut[51]~28_combout\)) ) + ( GND ) + ( \convert_binary|Mod3|auto_generated|divider|divider|op_8~38\ ))
-- \convert_binary|Mod3|auto_generated|divider|divider|op_8~34\ = CARRY(( (!\convert_binary|Mod3|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Mod3|auto_generated|divider|divider|op_7~29_sumout\))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_7~1_sumout\ & (\convert_binary|Mod3|auto_generated|divider|divider|StageOut[51]~28_combout\)) ) + ( GND ) + ( \convert_binary|Mod3|auto_generated|divider|divider|op_8~38\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datac => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[51]~28_combout\,
	datad => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_7~29_sumout\,
	cin => \convert_binary|Mod3|auto_generated|divider|divider|op_8~38\,
	sumout => \convert_binary|Mod3|auto_generated|divider|divider|op_8~33_sumout\,
	cout => \convert_binary|Mod3|auto_generated|divider|divider|op_8~34\);

\convert_binary|Mod3|auto_generated|divider|divider|op_8~29\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|op_8~29_sumout\ = SUM(( (!\convert_binary|Mod3|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod3|auto_generated|divider|divider|op_7~25_sumout\)))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod3|auto_generated|divider|divider|StageOut[52]~23_combout\)) # (\convert_binary|Mod3|auto_generated|divider|divider|StageOut[52]~21_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod3|auto_generated|divider|divider|op_8~34\ ))
-- \convert_binary|Mod3|auto_generated|divider|divider|op_8~30\ = CARRY(( (!\convert_binary|Mod3|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod3|auto_generated|divider|divider|op_7~25_sumout\)))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod3|auto_generated|divider|divider|StageOut[52]~23_combout\)) # (\convert_binary|Mod3|auto_generated|divider|divider|StageOut[52]~21_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod3|auto_generated|divider|divider|op_8~34\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[52]~21_combout\,
	datac => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_7~25_sumout\,
	datad => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[52]~23_combout\,
	cin => \convert_binary|Mod3|auto_generated|divider|divider|op_8~34\,
	sumout => \convert_binary|Mod3|auto_generated|divider|divider|op_8~29_sumout\,
	cout => \convert_binary|Mod3|auto_generated|divider|divider|op_8~30\);

\convert_binary|Mod3|auto_generated|divider|divider|op_8~25\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|op_8~25_sumout\ = SUM(( (!\convert_binary|Mod3|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Mod3|auto_generated|divider|divider|op_7~21_sumout\))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_7~1_sumout\ & (\convert_binary|Mod3|auto_generated|divider|divider|StageOut[53]~17_combout\)) ) + ( VCC ) + ( \convert_binary|Mod3|auto_generated|divider|divider|op_8~30\ ))
-- \convert_binary|Mod3|auto_generated|divider|divider|op_8~26\ = CARRY(( (!\convert_binary|Mod3|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Mod3|auto_generated|divider|divider|op_7~21_sumout\))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_7~1_sumout\ & (\convert_binary|Mod3|auto_generated|divider|divider|StageOut[53]~17_combout\)) ) + ( VCC ) + ( \convert_binary|Mod3|auto_generated|divider|divider|op_8~30\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datac => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[53]~17_combout\,
	datad => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_7~21_sumout\,
	cin => \convert_binary|Mod3|auto_generated|divider|divider|op_8~30\,
	sumout => \convert_binary|Mod3|auto_generated|divider|divider|op_8~25_sumout\,
	cout => \convert_binary|Mod3|auto_generated|divider|divider|op_8~26\);

\convert_binary|Mod3|auto_generated|divider|divider|op_8~21\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|op_8~21_sumout\ = SUM(( (!\convert_binary|Mod3|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod3|auto_generated|divider|divider|op_7~17_sumout\)))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod3|auto_generated|divider|divider|StageOut[54]~13_combout\)) # (\convert_binary|Mod3|auto_generated|divider|divider|StageOut[54]~12_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod3|auto_generated|divider|divider|op_8~26\ ))
-- \convert_binary|Mod3|auto_generated|divider|divider|op_8~22\ = CARRY(( (!\convert_binary|Mod3|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod3|auto_generated|divider|divider|op_7~17_sumout\)))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod3|auto_generated|divider|divider|StageOut[54]~13_combout\)) # (\convert_binary|Mod3|auto_generated|divider|divider|StageOut[54]~12_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod3|auto_generated|divider|divider|op_8~26\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[54]~12_combout\,
	datac => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_7~17_sumout\,
	datad => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[54]~13_combout\,
	cin => \convert_binary|Mod3|auto_generated|divider|divider|op_8~26\,
	sumout => \convert_binary|Mod3|auto_generated|divider|divider|op_8~21_sumout\,
	cout => \convert_binary|Mod3|auto_generated|divider|divider|op_8~22\);

\convert_binary|Mod3|auto_generated|divider|divider|op_8~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|op_8~13_sumout\ = SUM(( (!\convert_binary|Mod3|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod3|auto_generated|divider|divider|op_7~9_sumout\)))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod3|auto_generated|divider|divider|StageOut[55]~8_combout\)) # (\convert_binary|Mod3|auto_generated|divider|divider|StageOut[55]~7_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod3|auto_generated|divider|divider|op_8~22\ ))
-- \convert_binary|Mod3|auto_generated|divider|divider|op_8~14\ = CARRY(( (!\convert_binary|Mod3|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod3|auto_generated|divider|divider|op_7~9_sumout\)))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod3|auto_generated|divider|divider|StageOut[55]~8_combout\)) # (\convert_binary|Mod3|auto_generated|divider|divider|StageOut[55]~7_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod3|auto_generated|divider|divider|op_8~22\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[55]~7_combout\,
	datac => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_7~9_sumout\,
	datad => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[55]~8_combout\,
	cin => \convert_binary|Mod3|auto_generated|divider|divider|op_8~22\,
	sumout => \convert_binary|Mod3|auto_generated|divider|divider|op_8~13_sumout\,
	cout => \convert_binary|Mod3|auto_generated|divider|divider|op_8~14\);

\convert_binary|Mod3|auto_generated|divider|divider|op_8~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|op_8~1_sumout\ = SUM(( VCC ) + ( GND ) + ( \convert_binary|Mod3|auto_generated|divider|divider|op_8~14\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Mod3|auto_generated|divider|divider|op_8~14\,
	sumout => \convert_binary|Mod3|auto_generated|divider|divider|op_8~1_sumout\);

\convert_binary|Mod3|auto_generated|divider|divider|StageOut[66]~6\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|StageOut[66]~6_combout\ = (!\convert_binary|Mod3|auto_generated|divider|divider|op_7~1_sumout\ & \convert_binary|Mod3|auto_generated|divider|divider|op_7~9_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_7~9_sumout\,
	combout => \convert_binary|Mod3|auto_generated|divider|divider|StageOut[66]~6_combout\);

\convert_binary|Mod3|auto_generated|divider|divider|StageOut[66]~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|StageOut[66]~9_combout\ = (\convert_binary|Mod3|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Mod3|auto_generated|divider|divider|StageOut[55]~8_combout\) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|StageOut[55]~7_combout\)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001010100010101000101010001010100010101000101010001010100010101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[55]~7_combout\,
	datac => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[55]~8_combout\,
	combout => \convert_binary|Mod3|auto_generated|divider|divider|StageOut[66]~9_combout\);

\convert_binary|Mod3|auto_generated|divider|divider|StageOut[65]~14\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|StageOut[65]~14_combout\ = (!\convert_binary|Mod3|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod3|auto_generated|divider|divider|op_7~17_sumout\)))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod3|auto_generated|divider|divider|StageOut[54]~13_combout\)) # (\convert_binary|Mod3|auto_generated|divider|divider|StageOut[54]~12_combout\)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001101101011111000110110101111100011011010111110001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[54]~12_combout\,
	datac => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_7~17_sumout\,
	datad => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[54]~13_combout\,
	combout => \convert_binary|Mod3|auto_generated|divider|divider|StageOut[65]~14_combout\);

\convert_binary|Mod3|auto_generated|divider|divider|StageOut[64]~16\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|StageOut[64]~16_combout\ = (!\convert_binary|Mod3|auto_generated|divider|divider|op_7~1_sumout\ & \convert_binary|Mod3|auto_generated|divider|divider|op_7~21_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_7~21_sumout\,
	combout => \convert_binary|Mod3|auto_generated|divider|divider|StageOut[64]~16_combout\);

\convert_binary|Mod3|auto_generated|divider|divider|StageOut[64]~18\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|StageOut[64]~18_combout\ = (\convert_binary|Mod3|auto_generated|divider|divider|op_7~1_sumout\ & \convert_binary|Mod3|auto_generated|divider|divider|StageOut[53]~17_combout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[53]~17_combout\,
	combout => \convert_binary|Mod3|auto_generated|divider|divider|StageOut[64]~18_combout\);

\convert_binary|Mod3|auto_generated|divider|divider|StageOut[63]~24\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|StageOut[63]~24_combout\ = (!\convert_binary|Mod3|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod3|auto_generated|divider|divider|op_7~25_sumout\)))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_7~1_sumout\ & (((\convert_binary|Mod3|auto_generated|divider|divider|StageOut[52]~23_combout\)) # (\convert_binary|Mod3|auto_generated|divider|divider|StageOut[52]~21_combout\)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001101101011111000110110101111100011011010111110001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[52]~21_combout\,
	datac => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_7~25_sumout\,
	datad => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[52]~23_combout\,
	combout => \convert_binary|Mod3|auto_generated|divider|divider|StageOut[63]~24_combout\);

\convert_binary|Mod3|auto_generated|divider|divider|StageOut[62]~26\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|StageOut[62]~26_combout\ = (!\convert_binary|Mod3|auto_generated|divider|divider|op_7~1_sumout\ & \convert_binary|Mod3|auto_generated|divider|divider|op_7~29_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_7~29_sumout\,
	combout => \convert_binary|Mod3|auto_generated|divider|divider|StageOut[62]~26_combout\);

\convert_binary|Mod3|auto_generated|divider|divider|StageOut[62]~29\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|StageOut[62]~29_combout\ = (\convert_binary|Mod3|auto_generated|divider|divider|op_7~1_sumout\ & \convert_binary|Mod3|auto_generated|divider|divider|StageOut[51]~28_combout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[51]~28_combout\,
	combout => \convert_binary|Mod3|auto_generated|divider|divider|StageOut[62]~29_combout\);

\convert_binary|Mod3|auto_generated|divider|divider|StageOut[61]~33\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|StageOut[61]~33_combout\ = (!\convert_binary|Mod3|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Mod3|auto_generated|divider|divider|op_7~33_sumout\))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_7~1_sumout\ & (\convert_binary|Mod3|auto_generated|divider|divider|StageOut[50]~32_combout\))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001101100011011000110110001101100011011000110110001101100011011",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[50]~32_combout\,
	datac => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_7~33_sumout\,
	combout => \convert_binary|Mod3|auto_generated|divider|divider|StageOut[61]~33_combout\);

\convert_binary|Mod3|auto_generated|divider|divider|StageOut[60]~3\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|StageOut[60]~3_combout\ = (!\convert_binary|Mod3|auto_generated|divider|divider|op_7~1_sumout\ & ((\convert_binary|Mod3|auto_generated|divider|divider|op_7~5_sumout\))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_7~1_sumout\ & (!\convert_binary|Div2|auto_generated|divider|divider|op_7~1_sumout\))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010111000101110001011100010111000101110001011100010111000101110",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datab => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_7~1_sumout\,
	datac => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_7~5_sumout\,
	combout => \convert_binary|Mod3|auto_generated|divider|divider|StageOut[60]~3_combout\);

\convert_binary|Mod3|auto_generated|divider|divider|op_9~22\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|op_9~22_cout\ = CARRY(( VCC ) + ( VCC ) + ( !VCC ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => GND,
	cout => \convert_binary|Mod3|auto_generated|divider|divider|op_9~22_cout\);

\convert_binary|Mod3|auto_generated|divider|divider|op_9~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|op_9~5_sumout\ = SUM(( !\convert_binary|Div2|auto_generated|divider|divider|op_9~1_sumout\ ) + ( VCC ) + ( \convert_binary|Mod3|auto_generated|divider|divider|op_9~22_cout\ ))
-- \convert_binary|Mod3|auto_generated|divider|divider|op_9~6\ = CARRY(( !\convert_binary|Div2|auto_generated|divider|divider|op_9~1_sumout\ ) + ( VCC ) + ( \convert_binary|Mod3|auto_generated|divider|divider|op_9~22_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111100000000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	cin => \convert_binary|Mod3|auto_generated|divider|divider|op_9~22_cout\,
	sumout => \convert_binary|Mod3|auto_generated|divider|divider|op_9~5_sumout\,
	cout => \convert_binary|Mod3|auto_generated|divider|divider|op_9~6\);

\convert_binary|Mod3|auto_generated|divider|divider|op_9~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|op_9~9_sumout\ = SUM(( (!\convert_binary|Mod3|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod3|auto_generated|divider|divider|op_8~5_sumout\))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_8~1_sumout\ & (!\convert_binary|Div2|auto_generated|divider|divider|op_8~1_sumout\)) ) + ( GND ) + ( \convert_binary|Mod3|auto_generated|divider|divider|op_9~6\ ))
-- \convert_binary|Mod3|auto_generated|divider|divider|op_9~10\ = CARRY(( (!\convert_binary|Mod3|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod3|auto_generated|divider|divider|op_8~5_sumout\))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_8~1_sumout\ & (!\convert_binary|Div2|auto_generated|divider|divider|op_8~1_sumout\)) ) + ( GND ) + ( \convert_binary|Mod3|auto_generated|divider|divider|op_9~6\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000010001011101110",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datad => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_8~5_sumout\,
	cin => \convert_binary|Mod3|auto_generated|divider|divider|op_9~6\,
	sumout => \convert_binary|Mod3|auto_generated|divider|divider|op_9~9_sumout\,
	cout => \convert_binary|Mod3|auto_generated|divider|divider|op_9~10\);

\convert_binary|Mod3|auto_generated|divider|divider|op_9~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|op_9~13_sumout\ = SUM(( (!\convert_binary|Mod3|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod3|auto_generated|divider|divider|op_8~9_sumout\))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Mod3|auto_generated|divider|divider|StageOut[60]~3_combout\)) ) + ( VCC ) + ( \convert_binary|Mod3|auto_generated|divider|divider|op_9~10\ ))
-- \convert_binary|Mod3|auto_generated|divider|divider|op_9~14\ = CARRY(( (!\convert_binary|Mod3|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod3|auto_generated|divider|divider|op_8~9_sumout\))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Mod3|auto_generated|divider|divider|StageOut[60]~3_combout\)) ) + ( VCC ) + ( \convert_binary|Mod3|auto_generated|divider|divider|op_9~10\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000001111001111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datab => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datac => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[60]~3_combout\,
	datad => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_8~9_sumout\,
	cin => \convert_binary|Mod3|auto_generated|divider|divider|op_9~10\,
	sumout => \convert_binary|Mod3|auto_generated|divider|divider|op_9~13_sumout\,
	cout => \convert_binary|Mod3|auto_generated|divider|divider|op_9~14\);

\convert_binary|Mod3|auto_generated|divider|divider|op_9~41\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|op_9~41_sumout\ = SUM(( (!\convert_binary|Mod3|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod3|auto_generated|divider|divider|op_8~37_sumout\))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Mod3|auto_generated|divider|divider|StageOut[61]~33_combout\)) ) + ( GND ) + ( \convert_binary|Mod3|auto_generated|divider|divider|op_9~14\ ))
-- \convert_binary|Mod3|auto_generated|divider|divider|op_9~42\ = CARRY(( (!\convert_binary|Mod3|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod3|auto_generated|divider|divider|op_8~37_sumout\))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Mod3|auto_generated|divider|divider|StageOut[61]~33_combout\)) ) + ( GND ) + ( \convert_binary|Mod3|auto_generated|divider|divider|op_9~14\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datac => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[61]~33_combout\,
	datad => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_8~37_sumout\,
	cin => \convert_binary|Mod3|auto_generated|divider|divider|op_9~14\,
	sumout => \convert_binary|Mod3|auto_generated|divider|divider|op_9~41_sumout\,
	cout => \convert_binary|Mod3|auto_generated|divider|divider|op_9~42\);

\convert_binary|Mod3|auto_generated|divider|divider|op_9~37\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|op_9~37_sumout\ = SUM(( (!\convert_binary|Mod3|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod3|auto_generated|divider|divider|op_8~33_sumout\)))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod3|auto_generated|divider|divider|StageOut[62]~29_combout\)) # (\convert_binary|Mod3|auto_generated|divider|divider|StageOut[62]~26_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod3|auto_generated|divider|divider|op_9~42\ ))
-- \convert_binary|Mod3|auto_generated|divider|divider|op_9~38\ = CARRY(( (!\convert_binary|Mod3|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod3|auto_generated|divider|divider|op_8~33_sumout\)))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod3|auto_generated|divider|divider|StageOut[62]~29_combout\)) # (\convert_binary|Mod3|auto_generated|divider|divider|StageOut[62]~26_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod3|auto_generated|divider|divider|op_9~42\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[62]~26_combout\,
	datac => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_8~33_sumout\,
	datad => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[62]~29_combout\,
	cin => \convert_binary|Mod3|auto_generated|divider|divider|op_9~42\,
	sumout => \convert_binary|Mod3|auto_generated|divider|divider|op_9~37_sumout\,
	cout => \convert_binary|Mod3|auto_generated|divider|divider|op_9~38\);

\convert_binary|Mod3|auto_generated|divider|divider|op_9~33\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|op_9~33_sumout\ = SUM(( (!\convert_binary|Mod3|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod3|auto_generated|divider|divider|op_8~29_sumout\))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Mod3|auto_generated|divider|divider|StageOut[63]~24_combout\)) ) + ( VCC ) + ( \convert_binary|Mod3|auto_generated|divider|divider|op_9~38\ ))
-- \convert_binary|Mod3|auto_generated|divider|divider|op_9~34\ = CARRY(( (!\convert_binary|Mod3|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod3|auto_generated|divider|divider|op_8~29_sumout\))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Mod3|auto_generated|divider|divider|StageOut[63]~24_combout\)) ) + ( VCC ) + ( \convert_binary|Mod3|auto_generated|divider|divider|op_9~38\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datac => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[63]~24_combout\,
	datad => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_8~29_sumout\,
	cin => \convert_binary|Mod3|auto_generated|divider|divider|op_9~38\,
	sumout => \convert_binary|Mod3|auto_generated|divider|divider|op_9~33_sumout\,
	cout => \convert_binary|Mod3|auto_generated|divider|divider|op_9~34\);

\convert_binary|Mod3|auto_generated|divider|divider|op_9~29\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|op_9~29_sumout\ = SUM(( (!\convert_binary|Mod3|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod3|auto_generated|divider|divider|op_8~25_sumout\)))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod3|auto_generated|divider|divider|StageOut[64]~18_combout\)) # (\convert_binary|Mod3|auto_generated|divider|divider|StageOut[64]~16_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod3|auto_generated|divider|divider|op_9~34\ ))
-- \convert_binary|Mod3|auto_generated|divider|divider|op_9~30\ = CARRY(( (!\convert_binary|Mod3|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod3|auto_generated|divider|divider|op_8~25_sumout\)))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod3|auto_generated|divider|divider|StageOut[64]~18_combout\)) # (\convert_binary|Mod3|auto_generated|divider|divider|StageOut[64]~16_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod3|auto_generated|divider|divider|op_9~34\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[64]~16_combout\,
	datac => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_8~25_sumout\,
	datad => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[64]~18_combout\,
	cin => \convert_binary|Mod3|auto_generated|divider|divider|op_9~34\,
	sumout => \convert_binary|Mod3|auto_generated|divider|divider|op_9~29_sumout\,
	cout => \convert_binary|Mod3|auto_generated|divider|divider|op_9~30\);

\convert_binary|Mod3|auto_generated|divider|divider|op_9~25\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|op_9~25_sumout\ = SUM(( (!\convert_binary|Mod3|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod3|auto_generated|divider|divider|op_8~21_sumout\))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Mod3|auto_generated|divider|divider|StageOut[65]~14_combout\)) ) + ( VCC ) + ( \convert_binary|Mod3|auto_generated|divider|divider|op_9~30\ ))
-- \convert_binary|Mod3|auto_generated|divider|divider|op_9~26\ = CARRY(( (!\convert_binary|Mod3|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod3|auto_generated|divider|divider|op_8~21_sumout\))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Mod3|auto_generated|divider|divider|StageOut[65]~14_combout\)) ) + ( VCC ) + ( \convert_binary|Mod3|auto_generated|divider|divider|op_9~30\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datac => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[65]~14_combout\,
	datad => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_8~21_sumout\,
	cin => \convert_binary|Mod3|auto_generated|divider|divider|op_9~30\,
	sumout => \convert_binary|Mod3|auto_generated|divider|divider|op_9~25_sumout\,
	cout => \convert_binary|Mod3|auto_generated|divider|divider|op_9~26\);

\convert_binary|Mod3|auto_generated|divider|divider|op_9~17\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|op_9~17_sumout\ = SUM(( (!\convert_binary|Mod3|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod3|auto_generated|divider|divider|op_8~13_sumout\)))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod3|auto_generated|divider|divider|StageOut[66]~9_combout\)) # (\convert_binary|Mod3|auto_generated|divider|divider|StageOut[66]~6_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod3|auto_generated|divider|divider|op_9~26\ ))
-- \convert_binary|Mod3|auto_generated|divider|divider|op_9~18\ = CARRY(( (!\convert_binary|Mod3|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod3|auto_generated|divider|divider|op_8~13_sumout\)))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod3|auto_generated|divider|divider|StageOut[66]~9_combout\)) # (\convert_binary|Mod3|auto_generated|divider|divider|StageOut[66]~6_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod3|auto_generated|divider|divider|op_9~26\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[66]~6_combout\,
	datac => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_8~13_sumout\,
	datad => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[66]~9_combout\,
	cin => \convert_binary|Mod3|auto_generated|divider|divider|op_9~26\,
	sumout => \convert_binary|Mod3|auto_generated|divider|divider|op_9~17_sumout\,
	cout => \convert_binary|Mod3|auto_generated|divider|divider|op_9~18\);

\convert_binary|Mod3|auto_generated|divider|divider|op_9~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|op_9~1_sumout\ = SUM(( VCC ) + ( GND ) + ( \convert_binary|Mod3|auto_generated|divider|divider|op_9~18\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Mod3|auto_generated|divider|divider|op_9~18\,
	sumout => \convert_binary|Mod3|auto_generated|divider|divider|op_9~1_sumout\);

\convert_binary|Mod3|auto_generated|divider|divider|StageOut[77]~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|StageOut[77]~5_combout\ = (!\convert_binary|Mod3|auto_generated|divider|divider|op_8~1_sumout\ & \convert_binary|Mod3|auto_generated|divider|divider|op_8~13_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_8~13_sumout\,
	combout => \convert_binary|Mod3|auto_generated|divider|divider|StageOut[77]~5_combout\);

\convert_binary|Mod3|auto_generated|divider|divider|StageOut[77]~10\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|StageOut[77]~10_combout\ = (\convert_binary|Mod3|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod3|auto_generated|divider|divider|StageOut[66]~9_combout\) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|StageOut[66]~6_combout\)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001010100010101000101010001010100010101000101010001010100010101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[66]~6_combout\,
	datac => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[66]~9_combout\,
	combout => \convert_binary|Mod3|auto_generated|divider|divider|StageOut[77]~10_combout\);

\convert_binary|Mod3|auto_generated|divider|divider|StageOut[76]~11\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|StageOut[76]~11_combout\ = (!\convert_binary|Mod3|auto_generated|divider|divider|op_8~1_sumout\ & \convert_binary|Mod3|auto_generated|divider|divider|op_8~21_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_8~21_sumout\,
	combout => \convert_binary|Mod3|auto_generated|divider|divider|StageOut[76]~11_combout\);

\convert_binary|Mod3|auto_generated|divider|divider|StageOut[76]~15\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|StageOut[76]~15_combout\ = (\convert_binary|Mod3|auto_generated|divider|divider|op_8~1_sumout\ & \convert_binary|Mod3|auto_generated|divider|divider|StageOut[65]~14_combout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[65]~14_combout\,
	combout => \convert_binary|Mod3|auto_generated|divider|divider|StageOut[76]~15_combout\);

\convert_binary|Mod3|auto_generated|divider|divider|StageOut[75]~19\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|StageOut[75]~19_combout\ = (!\convert_binary|Mod3|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod3|auto_generated|divider|divider|op_8~25_sumout\)))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod3|auto_generated|divider|divider|StageOut[64]~18_combout\)) # (\convert_binary|Mod3|auto_generated|divider|divider|StageOut[64]~16_combout\)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001101101011111000110110101111100011011010111110001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[64]~16_combout\,
	datac => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_8~25_sumout\,
	datad => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[64]~18_combout\,
	combout => \convert_binary|Mod3|auto_generated|divider|divider|StageOut[75]~19_combout\);

\convert_binary|Mod3|auto_generated|divider|divider|StageOut[74]~20\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|StageOut[74]~20_combout\ = (!\convert_binary|Mod3|auto_generated|divider|divider|op_8~1_sumout\ & \convert_binary|Mod3|auto_generated|divider|divider|op_8~29_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_8~29_sumout\,
	combout => \convert_binary|Mod3|auto_generated|divider|divider|StageOut[74]~20_combout\);

\convert_binary|Mod3|auto_generated|divider|divider|StageOut[74]~25\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|StageOut[74]~25_combout\ = (\convert_binary|Mod3|auto_generated|divider|divider|op_8~1_sumout\ & \convert_binary|Mod3|auto_generated|divider|divider|StageOut[63]~24_combout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[63]~24_combout\,
	combout => \convert_binary|Mod3|auto_generated|divider|divider|StageOut[74]~25_combout\);

\convert_binary|Mod3|auto_generated|divider|divider|StageOut[73]~30\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|StageOut[73]~30_combout\ = (!\convert_binary|Mod3|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod3|auto_generated|divider|divider|op_8~33_sumout\)))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Mod3|auto_generated|divider|divider|StageOut[62]~29_combout\)) # (\convert_binary|Mod3|auto_generated|divider|divider|StageOut[62]~26_combout\)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001101101011111000110110101111100011011010111110001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[62]~26_combout\,
	datac => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_8~33_sumout\,
	datad => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[62]~29_combout\,
	combout => \convert_binary|Mod3|auto_generated|divider|divider|StageOut[73]~30_combout\);

\convert_binary|Mod3|auto_generated|divider|divider|StageOut[72]~31\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|StageOut[72]~31_combout\ = (!\convert_binary|Mod3|auto_generated|divider|divider|op_8~1_sumout\ & \convert_binary|Mod3|auto_generated|divider|divider|op_8~37_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_8~37_sumout\,
	combout => \convert_binary|Mod3|auto_generated|divider|divider|StageOut[72]~31_combout\);

\convert_binary|Mod3|auto_generated|divider|divider|StageOut[72]~34\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|StageOut[72]~34_combout\ = (\convert_binary|Mod3|auto_generated|divider|divider|op_8~1_sumout\ & \convert_binary|Mod3|auto_generated|divider|divider|StageOut[61]~33_combout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[61]~33_combout\,
	combout => \convert_binary|Mod3|auto_generated|divider|divider|StageOut[72]~34_combout\);

\convert_binary|Mod3|auto_generated|divider|divider|StageOut[71]~4\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|StageOut[71]~4_combout\ = (!\convert_binary|Mod3|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod3|auto_generated|divider|divider|op_8~9_sumout\))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Mod3|auto_generated|divider|divider|StageOut[60]~3_combout\))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001101100011011000110110001101100011011000110110001101100011011",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[60]~3_combout\,
	datac => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_8~9_sumout\,
	combout => \convert_binary|Mod3|auto_generated|divider|divider|StageOut[71]~4_combout\);

\convert_binary|Mod3|auto_generated|divider|divider|StageOut[70]~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|StageOut[70]~1_combout\ = (!\convert_binary|Mod3|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Mod3|auto_generated|divider|divider|op_8~5_sumout\))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_8~1_sumout\ & (!\convert_binary|Div2|auto_generated|divider|divider|op_8~1_sumout\))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010111000101110001011100010111000101110001011100010111000101110",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datac => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_8~5_sumout\,
	combout => \convert_binary|Mod3|auto_generated|divider|divider|StageOut[70]~1_combout\);

\convert_binary|Mod3|auto_generated|divider|divider|op_10~26\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|op_10~26_cout\ = CARRY(( VCC ) + ( VCC ) + ( !VCC ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => GND,
	cout => \convert_binary|Mod3|auto_generated|divider|divider|op_10~26_cout\);

\convert_binary|Mod3|auto_generated|divider|divider|op_10~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|op_10~5_sumout\ = SUM(( !\convert_binary|Div2|auto_generated|divider|divider|op_10~1_sumout\ ) + ( VCC ) + ( \convert_binary|Mod3|auto_generated|divider|divider|op_10~26_cout\ ))
-- \convert_binary|Mod3|auto_generated|divider|divider|op_10~6\ = CARRY(( !\convert_binary|Div2|auto_generated|divider|divider|op_10~1_sumout\ ) + ( VCC ) + ( \convert_binary|Mod3|auto_generated|divider|divider|op_10~26_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111100000000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_10~1_sumout\,
	cin => \convert_binary|Mod3|auto_generated|divider|divider|op_10~26_cout\,
	sumout => \convert_binary|Mod3|auto_generated|divider|divider|op_10~5_sumout\,
	cout => \convert_binary|Mod3|auto_generated|divider|divider|op_10~6\);

\convert_binary|Mod3|auto_generated|divider|divider|op_10~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|op_10~9_sumout\ = SUM(( (!\convert_binary|Mod3|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Mod3|auto_generated|divider|divider|op_9~5_sumout\))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_9~1_sumout\ & (!\convert_binary|Div2|auto_generated|divider|divider|op_9~1_sumout\)) ) + ( GND ) + ( \convert_binary|Mod3|auto_generated|divider|divider|op_10~6\ ))
-- \convert_binary|Mod3|auto_generated|divider|divider|op_10~10\ = CARRY(( (!\convert_binary|Mod3|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Mod3|auto_generated|divider|divider|op_9~5_sumout\))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_9~1_sumout\ & (!\convert_binary|Div2|auto_generated|divider|divider|op_9~1_sumout\)) ) + ( GND ) + ( \convert_binary|Mod3|auto_generated|divider|divider|op_10~6\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000010001011101110",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datab => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datad => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_9~5_sumout\,
	cin => \convert_binary|Mod3|auto_generated|divider|divider|op_10~6\,
	sumout => \convert_binary|Mod3|auto_generated|divider|divider|op_10~9_sumout\,
	cout => \convert_binary|Mod3|auto_generated|divider|divider|op_10~10\);

\convert_binary|Mod3|auto_generated|divider|divider|op_10~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|op_10~13_sumout\ = SUM(( (!\convert_binary|Mod3|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Mod3|auto_generated|divider|divider|op_9~9_sumout\))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_9~1_sumout\ & (\convert_binary|Mod3|auto_generated|divider|divider|StageOut[70]~1_combout\)) ) + ( VCC ) + ( \convert_binary|Mod3|auto_generated|divider|divider|op_10~10\ ))
-- \convert_binary|Mod3|auto_generated|divider|divider|op_10~14\ = CARRY(( (!\convert_binary|Mod3|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Mod3|auto_generated|divider|divider|op_9~9_sumout\))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_9~1_sumout\ & (\convert_binary|Mod3|auto_generated|divider|divider|StageOut[70]~1_combout\)) ) + ( VCC ) + ( \convert_binary|Mod3|auto_generated|divider|divider|op_10~10\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000001111001111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datab => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datac => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[70]~1_combout\,
	datad => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_9~9_sumout\,
	cin => \convert_binary|Mod3|auto_generated|divider|divider|op_10~10\,
	sumout => \convert_binary|Mod3|auto_generated|divider|divider|op_10~13_sumout\,
	cout => \convert_binary|Mod3|auto_generated|divider|divider|op_10~14\);

\convert_binary|Mod3|auto_generated|divider|divider|op_10~17\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|op_10~17_sumout\ = SUM(( (!\convert_binary|Mod3|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Mod3|auto_generated|divider|divider|op_9~13_sumout\))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_9~1_sumout\ & (\convert_binary|Mod3|auto_generated|divider|divider|StageOut[71]~4_combout\)) ) + ( GND ) + ( \convert_binary|Mod3|auto_generated|divider|divider|op_10~14\ ))
-- \convert_binary|Mod3|auto_generated|divider|divider|op_10~18\ = CARRY(( (!\convert_binary|Mod3|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Mod3|auto_generated|divider|divider|op_9~13_sumout\))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_9~1_sumout\ & (\convert_binary|Mod3|auto_generated|divider|divider|StageOut[71]~4_combout\)) ) + ( GND ) + ( \convert_binary|Mod3|auto_generated|divider|divider|op_10~14\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datac => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[71]~4_combout\,
	datad => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_9~13_sumout\,
	cin => \convert_binary|Mod3|auto_generated|divider|divider|op_10~14\,
	sumout => \convert_binary|Mod3|auto_generated|divider|divider|op_10~17_sumout\,
	cout => \convert_binary|Mod3|auto_generated|divider|divider|op_10~18\);

\convert_binary|Mod3|auto_generated|divider|divider|op_10~46\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|op_10~46_cout\ = CARRY(( (!\convert_binary|Mod3|auto_generated|divider|divider|op_9~1_sumout\ & (((\convert_binary|Mod3|auto_generated|divider|divider|op_9~41_sumout\)))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_9~1_sumout\ & (((\convert_binary|Mod3|auto_generated|divider|divider|StageOut[72]~34_combout\)) # (\convert_binary|Mod3|auto_generated|divider|divider|StageOut[72]~31_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod3|auto_generated|divider|divider|op_10~18\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datab => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[72]~31_combout\,
	datac => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_9~41_sumout\,
	datad => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[72]~34_combout\,
	cin => \convert_binary|Mod3|auto_generated|divider|divider|op_10~18\,
	cout => \convert_binary|Mod3|auto_generated|divider|divider|op_10~46_cout\);

\convert_binary|Mod3|auto_generated|divider|divider|op_10~42\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|op_10~42_cout\ = CARRY(( (!\convert_binary|Mod3|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Mod3|auto_generated|divider|divider|op_9~37_sumout\))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_9~1_sumout\ & (\convert_binary|Mod3|auto_generated|divider|divider|StageOut[73]~30_combout\)) ) + ( VCC ) + ( \convert_binary|Mod3|auto_generated|divider|divider|op_10~46_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datac => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[73]~30_combout\,
	datad => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_9~37_sumout\,
	cin => \convert_binary|Mod3|auto_generated|divider|divider|op_10~46_cout\,
	cout => \convert_binary|Mod3|auto_generated|divider|divider|op_10~42_cout\);

\convert_binary|Mod3|auto_generated|divider|divider|op_10~38\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|op_10~38_cout\ = CARRY(( (!\convert_binary|Mod3|auto_generated|divider|divider|op_9~1_sumout\ & (((\convert_binary|Mod3|auto_generated|divider|divider|op_9~33_sumout\)))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_9~1_sumout\ & (((\convert_binary|Mod3|auto_generated|divider|divider|StageOut[74]~25_combout\)) # (\convert_binary|Mod3|auto_generated|divider|divider|StageOut[74]~20_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod3|auto_generated|divider|divider|op_10~42_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datab => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[74]~20_combout\,
	datac => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_9~33_sumout\,
	datad => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[74]~25_combout\,
	cin => \convert_binary|Mod3|auto_generated|divider|divider|op_10~42_cout\,
	cout => \convert_binary|Mod3|auto_generated|divider|divider|op_10~38_cout\);

\convert_binary|Mod3|auto_generated|divider|divider|op_10~34\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|op_10~34_cout\ = CARRY(( (!\convert_binary|Mod3|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Mod3|auto_generated|divider|divider|op_9~29_sumout\))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_9~1_sumout\ & (\convert_binary|Mod3|auto_generated|divider|divider|StageOut[75]~19_combout\)) ) + ( VCC ) + ( \convert_binary|Mod3|auto_generated|divider|divider|op_10~38_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datac => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[75]~19_combout\,
	datad => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_9~29_sumout\,
	cin => \convert_binary|Mod3|auto_generated|divider|divider|op_10~38_cout\,
	cout => \convert_binary|Mod3|auto_generated|divider|divider|op_10~34_cout\);

\convert_binary|Mod3|auto_generated|divider|divider|op_10~30\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|op_10~30_cout\ = CARRY(( (!\convert_binary|Mod3|auto_generated|divider|divider|op_9~1_sumout\ & (((\convert_binary|Mod3|auto_generated|divider|divider|op_9~25_sumout\)))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_9~1_sumout\ & (((\convert_binary|Mod3|auto_generated|divider|divider|StageOut[76]~15_combout\)) # (\convert_binary|Mod3|auto_generated|divider|divider|StageOut[76]~11_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod3|auto_generated|divider|divider|op_10~34_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datab => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[76]~11_combout\,
	datac => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_9~25_sumout\,
	datad => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[76]~15_combout\,
	cin => \convert_binary|Mod3|auto_generated|divider|divider|op_10~34_cout\,
	cout => \convert_binary|Mod3|auto_generated|divider|divider|op_10~30_cout\);

\convert_binary|Mod3|auto_generated|divider|divider|op_10~22\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|op_10~22_cout\ = CARRY(( (!\convert_binary|Mod3|auto_generated|divider|divider|op_9~1_sumout\ & (((\convert_binary|Mod3|auto_generated|divider|divider|op_9~17_sumout\)))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_9~1_sumout\ & (((\convert_binary|Mod3|auto_generated|divider|divider|StageOut[77]~10_combout\)) # (\convert_binary|Mod3|auto_generated|divider|divider|StageOut[77]~5_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Mod3|auto_generated|divider|divider|op_10~30_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datab => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[77]~5_combout\,
	datac => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_9~17_sumout\,
	datad => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[77]~10_combout\,
	cin => \convert_binary|Mod3|auto_generated|divider|divider|op_10~30_cout\,
	cout => \convert_binary|Mod3|auto_generated|divider|divider|op_10~22_cout\);

\convert_binary|Mod3|auto_generated|divider|divider|op_10~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|op_10~1_sumout\ = SUM(( VCC ) + ( GND ) + ( \convert_binary|Mod3|auto_generated|divider|divider|op_10~22_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Mod3|auto_generated|divider|divider|op_10~22_cout\,
	sumout => \convert_binary|Mod3|auto_generated|divider|divider|op_10~1_sumout\);

\convert_binary|Mod3|auto_generated|divider|divider|StageOut[90]~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|StageOut[90]~0_combout\ = (!\convert_binary|Mod3|auto_generated|divider|divider|op_10~1_sumout\ & ((\convert_binary|Mod3|auto_generated|divider|divider|op_10~5_sumout\))) # 
-- (\convert_binary|Mod3|auto_generated|divider|divider|op_10~1_sumout\ & (!\convert_binary|Div2|auto_generated|divider|divider|op_10~1_sumout\))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010111000101110001011100010111000101110001011100010111000101110",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_10~1_sumout\,
	datab => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_10~1_sumout\,
	datac => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_10~5_sumout\,
	combout => \convert_binary|Mod3|auto_generated|divider|divider|StageOut[90]~0_combout\);

\convert_binary|int_r_2[0]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \convert_binary|Mod3|auto_generated|divider|divider|StageOut[90]~0_combout\,
	clrn => \RST_main~input_o\,
	sclr => \convert_binary|int_r_2[2]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \convert_binary|int_r_2\(0));

\convert_binary|int_r_2~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|int_r_2~1_combout\ = ( \convert_binary|Mod3|auto_generated|divider|divider|op_10~1_sumout\ & ( \convert_binary|Mod3|auto_generated|divider|divider|op_10~9_sumout\ & ( ((!\convert_binary|Mod3|auto_generated|divider|divider|op_9~1_sumout\ & 
-- ((\convert_binary|Mod3|auto_generated|divider|divider|op_9~5_sumout\))) # (\convert_binary|Mod3|auto_generated|divider|divider|op_9~1_sumout\ & (!\convert_binary|Div2|auto_generated|divider|divider|op_9~1_sumout\))) # 
-- (\convert_binary|int_r_2[2]~0_combout\) ) ) ) # ( !\convert_binary|Mod3|auto_generated|divider|divider|op_10~1_sumout\ & ( \convert_binary|Mod3|auto_generated|divider|divider|op_10~9_sumout\ ) ) # ( 
-- \convert_binary|Mod3|auto_generated|divider|divider|op_10~1_sumout\ & ( !\convert_binary|Mod3|auto_generated|divider|divider|op_10~9_sumout\ & ( ((!\convert_binary|Mod3|auto_generated|divider|divider|op_9~1_sumout\ & 
-- ((\convert_binary|Mod3|auto_generated|divider|divider|op_9~5_sumout\))) # (\convert_binary|Mod3|auto_generated|divider|divider|op_9~1_sumout\ & (!\convert_binary|Div2|auto_generated|divider|divider|op_9~1_sumout\))) # 
-- (\convert_binary|int_r_2[2]~0_combout\) ) ) ) # ( !\convert_binary|Mod3|auto_generated|divider|divider|op_10~1_sumout\ & ( !\convert_binary|Mod3|auto_generated|divider|divider|op_10~9_sumout\ & ( \convert_binary|int_r_2[2]~0_combout\ ) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0101010101010101010111011111110111111111111111110101110111111101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|ALT_INV_int_r_2[2]~0_combout\,
	datab => \convert_binary|Div2|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datac => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datad => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_9~5_sumout\,
	datae => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_10~1_sumout\,
	dataf => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_10~9_sumout\,
	combout => \convert_binary|int_r_2~1_combout\);

\convert_binary|int_r_2[1]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \convert_binary|int_r_2~1_combout\,
	clrn => \RST_main~input_o\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \convert_binary|int_r_2\(1));

\convert_binary|Mod3|auto_generated|divider|divider|StageOut[92]~2\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Mod3|auto_generated|divider|divider|StageOut[92]~2_combout\ = ( \convert_binary|Mod3|auto_generated|divider|divider|op_10~13_sumout\ & ( (!\convert_binary|Mod3|auto_generated|divider|divider|op_10~1_sumout\) # 
-- ((!\convert_binary|Mod3|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Mod3|auto_generated|divider|divider|op_9~9_sumout\))) # (\convert_binary|Mod3|auto_generated|divider|divider|op_9~1_sumout\ & 
-- (\convert_binary|Mod3|auto_generated|divider|divider|StageOut[70]~1_combout\))) ) ) # ( !\convert_binary|Mod3|auto_generated|divider|divider|op_10~13_sumout\ & ( (\convert_binary|Mod3|auto_generated|divider|divider|op_10~1_sumout\ & 
-- ((!\convert_binary|Mod3|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Mod3|auto_generated|divider|divider|op_9~9_sumout\))) # (\convert_binary|Mod3|auto_generated|divider|divider|op_9~1_sumout\ & 
-- (\convert_binary|Mod3|auto_generated|divider|divider|StageOut[70]~1_combout\)))) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000011011111111110001101100000000000110111111111100011011",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datab => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[70]~1_combout\,
	datac => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_9~9_sumout\,
	datad => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_10~1_sumout\,
	datae => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_10~13_sumout\,
	combout => \convert_binary|Mod3|auto_generated|divider|divider|StageOut[92]~2_combout\);

\convert_binary|int_r_2[2]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \convert_binary|Mod3|auto_generated|divider|divider|StageOut[92]~2_combout\,
	clrn => \RST_main~input_o\,
	sclr => \convert_binary|int_r_2[2]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \convert_binary|int_r_2\(2));

\convert_binary|int_r_2~2\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|int_r_2~2_combout\ = ( \convert_binary|Mod3|auto_generated|divider|divider|op_10~1_sumout\ & ( \convert_binary|Mod3|auto_generated|divider|divider|op_10~17_sumout\ & ( ((!\convert_binary|Mod3|auto_generated|divider|divider|op_9~1_sumout\ & 
-- ((\convert_binary|Mod3|auto_generated|divider|divider|op_9~13_sumout\))) # (\convert_binary|Mod3|auto_generated|divider|divider|op_9~1_sumout\ & (\convert_binary|Mod3|auto_generated|divider|divider|StageOut[71]~4_combout\))) # 
-- (\convert_binary|int_r_2[2]~0_combout\) ) ) ) # ( !\convert_binary|Mod3|auto_generated|divider|divider|op_10~1_sumout\ & ( \convert_binary|Mod3|auto_generated|divider|divider|op_10~17_sumout\ ) ) # ( 
-- \convert_binary|Mod3|auto_generated|divider|divider|op_10~1_sumout\ & ( !\convert_binary|Mod3|auto_generated|divider|divider|op_10~17_sumout\ & ( ((!\convert_binary|Mod3|auto_generated|divider|divider|op_9~1_sumout\ & 
-- ((\convert_binary|Mod3|auto_generated|divider|divider|op_9~13_sumout\))) # (\convert_binary|Mod3|auto_generated|divider|divider|op_9~1_sumout\ & (\convert_binary|Mod3|auto_generated|divider|divider|StageOut[71]~4_combout\))) # 
-- (\convert_binary|int_r_2[2]~0_combout\) ) ) ) # ( !\convert_binary|Mod3|auto_generated|divider|divider|op_10~1_sumout\ & ( !\convert_binary|Mod3|auto_generated|divider|divider|op_10~17_sumout\ & ( \convert_binary|int_r_2[2]~0_combout\ ) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0101010101010101010101111101111111111111111111110101011111011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|ALT_INV_int_r_2[2]~0_combout\,
	datab => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datac => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_StageOut[71]~4_combout\,
	datad => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_9~13_sumout\,
	datae => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_10~1_sumout\,
	dataf => \convert_binary|Mod3|auto_generated|divider|divider|ALT_INV_op_10~17_sumout\,
	combout => \convert_binary|int_r_2~2_combout\);

\convert_binary|int_r_2[3]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \convert_binary|int_r_2~2_combout\,
	clrn => \RST_main~input_o\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \convert_binary|int_r_2\(3));

\seven_seg_display_5|Mux6~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \seven_seg_display_5|Mux6~0_combout\ = (!\convert_binary|int_r_2\(1) & (!\convert_binary|int_r_2\(3) & (!\convert_binary|int_r_2\(0) $ (!\convert_binary|int_r_2\(2)))))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0100100000000000010010000000000001001000000000000100100000000000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|ALT_INV_int_r_2\(0),
	datab => \convert_binary|ALT_INV_int_r_2\(1),
	datac => \convert_binary|ALT_INV_int_r_2\(2),
	datad => \convert_binary|ALT_INV_int_r_2\(3),
	combout => \seven_seg_display_5|Mux6~0_combout\);

\seven_seg_display_5|seven_seg[0]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \seven_seg_display_5|Mux6~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \seven_seg_display_5|seven_seg\(0));

\seven_seg_display_5|Mux5~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \seven_seg_display_5|Mux5~0_combout\ = (!\convert_binary|int_r_2\(2) & (((\convert_binary|int_r_2\(1) & \convert_binary|int_r_2\(3))))) # (\convert_binary|int_r_2\(2) & ((!\convert_binary|int_r_2\(0) $ (!\convert_binary|int_r_2\(1))) # 
-- (\convert_binary|int_r_2\(3))))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000011000111111000001100011111100000110001111110000011000111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|ALT_INV_int_r_2\(0),
	datab => \convert_binary|ALT_INV_int_r_2\(1),
	datac => \convert_binary|ALT_INV_int_r_2\(2),
	datad => \convert_binary|ALT_INV_int_r_2\(3),
	combout => \seven_seg_display_5|Mux5~0_combout\);

\seven_seg_display_5|seven_seg[1]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \seven_seg_display_5|Mux5~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \seven_seg_display_5|seven_seg\(1));

\seven_seg_display_5|Mux4~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \seven_seg_display_5|Mux4~0_combout\ = (!\convert_binary|int_r_2\(2) & (\convert_binary|int_r_2\(1) & ((!\convert_binary|int_r_2\(0)) # (\convert_binary|int_r_2\(3))))) # (\convert_binary|int_r_2\(2) & (((\convert_binary|int_r_2\(3)))))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010000000111111001000000011111100100000001111110010000000111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|ALT_INV_int_r_2\(0),
	datab => \convert_binary|ALT_INV_int_r_2\(1),
	datac => \convert_binary|ALT_INV_int_r_2\(2),
	datad => \convert_binary|ALT_INV_int_r_2\(3),
	combout => \seven_seg_display_5|Mux4~0_combout\);

\seven_seg_display_5|seven_seg[2]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \seven_seg_display_5|Mux4~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \seven_seg_display_5|seven_seg\(2));

\seven_seg_display_5|Mux3~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \seven_seg_display_5|Mux3~0_combout\ = (!\convert_binary|int_r_2\(3) & ((!\convert_binary|int_r_2\(0) & (!\convert_binary|int_r_2\(1) & \convert_binary|int_r_2\(2))) # (\convert_binary|int_r_2\(0) & (!\convert_binary|int_r_2\(1) $ 
-- (\convert_binary|int_r_2\(2))))))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0100100100000000010010010000000001001001000000000100100100000000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|ALT_INV_int_r_2\(0),
	datab => \convert_binary|ALT_INV_int_r_2\(1),
	datac => \convert_binary|ALT_INV_int_r_2\(2),
	datad => \convert_binary|ALT_INV_int_r_2\(3),
	combout => \seven_seg_display_5|Mux3~0_combout\);

\seven_seg_display_5|seven_seg[3]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \seven_seg_display_5|Mux3~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \seven_seg_display_5|seven_seg\(3));

\seven_seg_display_5|Mux2~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \seven_seg_display_5|Mux2~0_combout\ = (!\convert_binary|int_r_2\(1) & ((!\convert_binary|int_r_2\(2) & (\convert_binary|int_r_2\(0))) # (\convert_binary|int_r_2\(2) & ((!\convert_binary|int_r_2\(3)))))) # (\convert_binary|int_r_2\(1) & 
-- (\convert_binary|int_r_2\(0) & ((!\convert_binary|int_r_2\(3)))))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0101110101000000010111010100000001011101010000000101110101000000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|ALT_INV_int_r_2\(0),
	datab => \convert_binary|ALT_INV_int_r_2\(1),
	datac => \convert_binary|ALT_INV_int_r_2\(2),
	datad => \convert_binary|ALT_INV_int_r_2\(3),
	combout => \seven_seg_display_5|Mux2~0_combout\);

\seven_seg_display_5|seven_seg[4]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \seven_seg_display_5|Mux2~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \seven_seg_display_5|seven_seg\(4));

\seven_seg_display_5|Mux1~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \seven_seg_display_5|Mux1~0_combout\ = (!\convert_binary|int_r_2\(3) & ((!\convert_binary|int_r_2\(0) & (\convert_binary|int_r_2\(1) & !\convert_binary|int_r_2\(2))) # (\convert_binary|int_r_2\(0) & ((!\convert_binary|int_r_2\(2)) # 
-- (\convert_binary|int_r_2\(1))))))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0111000100000000011100010000000001110001000000000111000100000000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|ALT_INV_int_r_2\(0),
	datab => \convert_binary|ALT_INV_int_r_2\(1),
	datac => \convert_binary|ALT_INV_int_r_2\(2),
	datad => \convert_binary|ALT_INV_int_r_2\(3),
	combout => \seven_seg_display_5|Mux1~0_combout\);

\seven_seg_display_5|seven_seg[5]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \seven_seg_display_5|Mux1~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \seven_seg_display_5|seven_seg\(5));

\seven_seg_display_5|Mux0~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \seven_seg_display_5|Mux0~0_combout\ = (!\convert_binary|int_r_2\(3) & ((!\convert_binary|int_r_2\(1) & ((!\convert_binary|int_r_2\(2)))) # (\convert_binary|int_r_2\(1) & (\convert_binary|int_r_2\(0) & \convert_binary|int_r_2\(2)))))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "1100000100000000110000010000000011000001000000001100000100000000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|ALT_INV_int_r_2\(0),
	datab => \convert_binary|ALT_INV_int_r_2\(1),
	datac => \convert_binary|ALT_INV_int_r_2\(2),
	datad => \convert_binary|ALT_INV_int_r_2\(3),
	combout => \seven_seg_display_5|Mux0~0_combout\);

\seven_seg_display_5|seven_seg[6]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \seven_seg_display_5|Mux0~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \seven_seg_display_5|seven_seg\(6));

\convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[0]~29\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[0]~29_sumout\ = SUM(( Remainder_input(3) ) + ( !VCC ) + ( !VCC ))
-- \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[0]~30\ = CARRY(( Remainder_input(3) ) + ( !VCC ) + ( !VCC ))
-- \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[0]~31\ = SHARE(VCC)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000000011111111",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	datad => ALT_INV_Remainder_input(3),
	cin => GND,
	sharein => GND,
	sumout => \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[0]~29_sumout\,
	cout => \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[0]~30\,
	shareout => \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[0]~31\);

\convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[1]~25\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[1]~25_sumout\ = SUM(( !Remainder_input(4) ) + ( \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[0]~31\ ) + ( 
-- \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[0]~30\ ))
-- \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[1]~26\ = CARRY(( !Remainder_input(4) ) + ( \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[0]~31\ ) + ( 
-- \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[0]~30\ ))
-- \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[1]~27\ = SHARE(Remainder_input(4))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000001111111100000000000000001111111100000000",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	datad => ALT_INV_Remainder_input(4),
	cin => \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[0]~30\,
	sharein => \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[0]~31\,
	sumout => \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[1]~25_sumout\,
	cout => \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[1]~26\,
	shareout => \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[1]~27\);

\convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[2]~21\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[2]~21_sumout\ = SUM(( Remainder_input(5) ) + ( \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[1]~27\ ) + ( 
-- \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[1]~26\ ))
-- \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[2]~22\ = CARRY(( Remainder_input(5) ) + ( \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[1]~27\ ) + ( 
-- \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[1]~26\ ))
-- \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[2]~23\ = SHARE(GND)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000011111111",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	datad => ALT_INV_Remainder_input(5),
	cin => \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[1]~26\,
	sharein => \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[1]~27\,
	sumout => \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[2]~21_sumout\,
	cout => \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[2]~22\,
	shareout => \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[2]~23\);

\convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[3]~17\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[3]~17_sumout\ = SUM(( !Remainder_input(6) ) + ( \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[2]~23\ ) + ( 
-- \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[2]~22\ ))
-- \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[3]~18\ = CARRY(( !Remainder_input(6) ) + ( \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[2]~23\ ) + ( 
-- \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[2]~22\ ))
-- \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[3]~19\ = SHARE(Remainder_input(6))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000001111111100000000000000001111111100000000",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	datad => ALT_INV_Remainder_input(6),
	cin => \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[2]~22\,
	sharein => \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[2]~23\,
	sumout => \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[3]~17_sumout\,
	cout => \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[3]~18\,
	shareout => \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[3]~19\);

\convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[4]~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[4]~9_sumout\ = SUM(( !Remainder_input(7) ) + ( \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[3]~19\ ) + ( 
-- \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[3]~18\ ))
-- \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[4]~10\ = CARRY(( !Remainder_input(7) ) + ( \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[3]~19\ ) + ( 
-- \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[3]~18\ ))
-- \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[4]~11\ = SHARE(Remainder_input(7))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000001111111100000000000000001111111100000000",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	datad => ALT_INV_Remainder_input(7),
	cin => \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[3]~18\,
	sharein => \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[3]~19\,
	sumout => \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[4]~9_sumout\,
	cout => \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[4]~10\,
	shareout => \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[4]~11\);

\convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[5]~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[5]~13_sumout\ = SUM(( Remainder_input(8) ) + ( \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[4]~11\ ) + ( 
-- \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[4]~10\ ))
-- \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[5]~14\ = CARRY(( Remainder_input(8) ) + ( \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[4]~11\ ) + ( 
-- \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[4]~10\ ))
-- \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[5]~15\ = SHARE(GND)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000011111111",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	datad => ALT_INV_Remainder_input(8),
	cin => \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[4]~10\,
	sharein => \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[4]~11\,
	sumout => \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[5]~13_sumout\,
	cout => \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[5]~14\,
	shareout => \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[5]~15\);

\convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[6]~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[6]~5_sumout\ = SUM(( Remainder_input(9) ) + ( \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[5]~15\ ) + ( 
-- \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[5]~14\ ))
-- \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[6]~6\ = CARRY(( Remainder_input(9) ) + ( \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[5]~15\ ) + ( 
-- \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[5]~14\ ))
-- \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[6]~7\ = SHARE(GND)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000011111111",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	datad => ALT_INV_Remainder_input(9),
	cin => \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[5]~14\,
	sharein => \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[5]~15\,
	sumout => \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[6]~5_sumout\,
	cout => \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[6]~6\,
	shareout => \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[6]~7\);

\convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[7]~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\ = SUM(( VCC ) + ( \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[6]~7\ ) + ( 
-- \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[6]~6\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "on")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[6]~6\,
	sharein => \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[6]~7\,
	sumout => \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\);

\convert_binary|Div3|auto_generated|divider|divider|StageOut[53]~5\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div3|auto_generated|divider|divider|StageOut[53]~5_combout\ = (!\convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\ & \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[5]~13_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[7]~1_sumout\,
	datab => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[5]~13_sumout\,
	combout => \convert_binary|Div3|auto_generated|divider|divider|StageOut[53]~5_combout\);

\convert_binary|Div3|auto_generated|divider|divider|StageOut[53]~4\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div3|auto_generated|divider|divider|StageOut[53]~4_combout\ = (Remainder_input(8) & \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => ALT_INV_Remainder_input(8),
	datab => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[7]~1_sumout\,
	combout => \convert_binary|Div3|auto_generated|divider|divider|StageOut[53]~4_combout\);

\convert_binary|Div3|auto_generated|divider|divider|StageOut[51]~7\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div3|auto_generated|divider|divider|StageOut[51]~7_combout\ = (!\convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\ & \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[3]~17_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[7]~1_sumout\,
	datab => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[3]~17_sumout\,
	combout => \convert_binary|Div3|auto_generated|divider|divider|StageOut[51]~7_combout\);

\convert_binary|Div3|auto_generated|divider|divider|StageOut[51]~8\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div3|auto_generated|divider|divider|StageOut[51]~8_combout\ = (Remainder_input(6) & \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => ALT_INV_Remainder_input(6),
	datab => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[7]~1_sumout\,
	combout => \convert_binary|Div3|auto_generated|divider|divider|StageOut[51]~8_combout\);

\convert_binary|Div3|auto_generated|divider|divider|StageOut[49]~15\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div3|auto_generated|divider|divider|StageOut[49]~15_combout\ = (!\convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\ & 
-- \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[1]~25_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[7]~1_sumout\,
	datab => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[1]~25_sumout\,
	combout => \convert_binary|Div3|auto_generated|divider|divider|StageOut[49]~15_combout\);

\convert_binary|Div3|auto_generated|divider|divider|StageOut[49]~16\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div3|auto_generated|divider|divider|StageOut[49]~16_combout\ = (Remainder_input(4) & \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => ALT_INV_Remainder_input(4),
	datab => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[7]~1_sumout\,
	combout => \convert_binary|Div3|auto_generated|divider|divider|StageOut[49]~16_combout\);

\convert_binary|Div3|auto_generated|divider|divider|op_8~38\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div3|auto_generated|divider|divider|op_8~38_cout\ = CARRY(( VCC ) + ( VCC ) + ( !VCC ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => GND,
	cout => \convert_binary|Div3|auto_generated|divider|divider|op_8~38_cout\);

\convert_binary|Div3|auto_generated|divider|divider|op_8~33\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div3|auto_generated|divider|divider|op_8~33_sumout\ = SUM(( Remainder_input(2) ) + ( VCC ) + ( \convert_binary|Div3|auto_generated|divider|divider|op_8~38_cout\ ))
-- \convert_binary|Div3|auto_generated|divider|divider|op_8~34\ = CARRY(( Remainder_input(2) ) + ( VCC ) + ( \convert_binary|Div3|auto_generated|divider|divider|op_8~38_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => ALT_INV_Remainder_input(2),
	cin => \convert_binary|Div3|auto_generated|divider|divider|op_8~38_cout\,
	sumout => \convert_binary|Div3|auto_generated|divider|divider|op_8~33_sumout\,
	cout => \convert_binary|Div3|auto_generated|divider|divider|op_8~34\);

\convert_binary|Div3|auto_generated|divider|divider|op_8~29\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div3|auto_generated|divider|divider|op_8~29_sumout\ = SUM(( (!\convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\ & 
-- ((\convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[0]~29_sumout\))) # (\convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\ & (Remainder_input(3))) ) + ( VCC ) + ( 
-- \convert_binary|Div3|auto_generated|divider|divider|op_8~34\ ))
-- \convert_binary|Div3|auto_generated|divider|divider|op_8~30\ = CARRY(( (!\convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\ & ((\convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[0]~29_sumout\))) # 
-- (\convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\ & (Remainder_input(3))) ) + ( VCC ) + ( \convert_binary|Div3|auto_generated|divider|divider|op_8~34\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000010111110101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => ALT_INV_Remainder_input(3),
	datac => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[7]~1_sumout\,
	datad => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[0]~29_sumout\,
	cin => \convert_binary|Div3|auto_generated|divider|divider|op_8~34\,
	sumout => \convert_binary|Div3|auto_generated|divider|divider|op_8~29_sumout\,
	cout => \convert_binary|Div3|auto_generated|divider|divider|op_8~30\);

\convert_binary|Div3|auto_generated|divider|divider|op_8~25\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div3|auto_generated|divider|divider|op_8~25_sumout\ = SUM(( (\convert_binary|Div3|auto_generated|divider|divider|StageOut[49]~16_combout\) # (\convert_binary|Div3|auto_generated|divider|divider|StageOut[49]~15_combout\) ) + ( GND ) + ( 
-- \convert_binary|Div3|auto_generated|divider|divider|op_8~30\ ))
-- \convert_binary|Div3|auto_generated|divider|divider|op_8~26\ = CARRY(( (\convert_binary|Div3|auto_generated|divider|divider|StageOut[49]~16_combout\) # (\convert_binary|Div3|auto_generated|divider|divider|StageOut[49]~15_combout\) ) + ( GND ) + ( 
-- \convert_binary|Div3|auto_generated|divider|divider|op_8~30\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000011001111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datab => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[49]~15_combout\,
	datad => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[49]~16_combout\,
	cin => \convert_binary|Div3|auto_generated|divider|divider|op_8~30\,
	sumout => \convert_binary|Div3|auto_generated|divider|divider|op_8~25_sumout\,
	cout => \convert_binary|Div3|auto_generated|divider|divider|op_8~26\);

\convert_binary|Div3|auto_generated|divider|divider|op_8~21\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div3|auto_generated|divider|divider|op_8~21_sumout\ = SUM(( (!\convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\ & 
-- ((\convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[2]~21_sumout\))) # (\convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\ & (Remainder_input(5))) ) + ( VCC ) + ( 
-- \convert_binary|Div3|auto_generated|divider|divider|op_8~26\ ))
-- \convert_binary|Div3|auto_generated|divider|divider|op_8~22\ = CARRY(( (!\convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\ & ((\convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[2]~21_sumout\))) # 
-- (\convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\ & (Remainder_input(5))) ) + ( VCC ) + ( \convert_binary|Div3|auto_generated|divider|divider|op_8~26\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000010111110101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => ALT_INV_Remainder_input(5),
	datac => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[7]~1_sumout\,
	datad => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[2]~21_sumout\,
	cin => \convert_binary|Div3|auto_generated|divider|divider|op_8~26\,
	sumout => \convert_binary|Div3|auto_generated|divider|divider|op_8~21_sumout\,
	cout => \convert_binary|Div3|auto_generated|divider|divider|op_8~22\);

\convert_binary|Div3|auto_generated|divider|divider|op_8~17\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div3|auto_generated|divider|divider|op_8~17_sumout\ = SUM(( (\convert_binary|Div3|auto_generated|divider|divider|StageOut[51]~8_combout\) # (\convert_binary|Div3|auto_generated|divider|divider|StageOut[51]~7_combout\) ) + ( VCC ) + ( 
-- \convert_binary|Div3|auto_generated|divider|divider|op_8~22\ ))
-- \convert_binary|Div3|auto_generated|divider|divider|op_8~18\ = CARRY(( (\convert_binary|Div3|auto_generated|divider|divider|StageOut[51]~8_combout\) # (\convert_binary|Div3|auto_generated|divider|divider|StageOut[51]~7_combout\) ) + ( VCC ) + ( 
-- \convert_binary|Div3|auto_generated|divider|divider|op_8~22\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000011001111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datab => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[51]~7_combout\,
	datad => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[51]~8_combout\,
	cin => \convert_binary|Div3|auto_generated|divider|divider|op_8~22\,
	sumout => \convert_binary|Div3|auto_generated|divider|divider|op_8~17_sumout\,
	cout => \convert_binary|Div3|auto_generated|divider|divider|op_8~18\);

\convert_binary|Div3|auto_generated|divider|divider|op_8~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div3|auto_generated|divider|divider|op_8~9_sumout\ = SUM(( (!\convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\ & ((\convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[4]~9_sumout\))) 
-- # (\convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\ & (Remainder_input(7))) ) + ( GND ) + ( \convert_binary|Div3|auto_generated|divider|divider|op_8~18\ ))
-- \convert_binary|Div3|auto_generated|divider|divider|op_8~10\ = CARRY(( (!\convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\ & ((\convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[4]~9_sumout\))) # 
-- (\convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\ & (Remainder_input(7))) ) + ( GND ) + ( \convert_binary|Div3|auto_generated|divider|divider|op_8~18\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000010111110101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => ALT_INV_Remainder_input(7),
	datac => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[7]~1_sumout\,
	datad => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[4]~9_sumout\,
	cin => \convert_binary|Div3|auto_generated|divider|divider|op_8~18\,
	sumout => \convert_binary|Div3|auto_generated|divider|divider|op_8~9_sumout\,
	cout => \convert_binary|Div3|auto_generated|divider|divider|op_8~10\);

\convert_binary|Div3|auto_generated|divider|divider|op_8~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div3|auto_generated|divider|divider|op_8~13_sumout\ = SUM(( (\convert_binary|Div3|auto_generated|divider|divider|StageOut[53]~4_combout\) # (\convert_binary|Div3|auto_generated|divider|divider|StageOut[53]~5_combout\) ) + ( GND ) + ( 
-- \convert_binary|Div3|auto_generated|divider|divider|op_8~10\ ))
-- \convert_binary|Div3|auto_generated|divider|divider|op_8~14\ = CARRY(( (\convert_binary|Div3|auto_generated|divider|divider|StageOut[53]~4_combout\) # (\convert_binary|Div3|auto_generated|divider|divider|StageOut[53]~5_combout\) ) + ( GND ) + ( 
-- \convert_binary|Div3|auto_generated|divider|divider|op_8~10\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000011001111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datab => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[53]~5_combout\,
	datad => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[53]~4_combout\,
	cin => \convert_binary|Div3|auto_generated|divider|divider|op_8~10\,
	sumout => \convert_binary|Div3|auto_generated|divider|divider|op_8~13_sumout\,
	cout => \convert_binary|Div3|auto_generated|divider|divider|op_8~14\);

\convert_binary|Div3|auto_generated|divider|divider|op_8~6\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div3|auto_generated|divider|divider|op_8~6_cout\ = CARRY(( (!\convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\ & ((\convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[6]~5_sumout\))) 
-- # (\convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\ & (Remainder_input(9))) ) + ( VCC ) + ( \convert_binary|Div3|auto_generated|divider|divider|op_8~14\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000010111110101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => ALT_INV_Remainder_input(9),
	datac => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[7]~1_sumout\,
	datad => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[6]~5_sumout\,
	cin => \convert_binary|Div3|auto_generated|divider|divider|op_8~14\,
	cout => \convert_binary|Div3|auto_generated|divider|divider|op_8~6_cout\);

\convert_binary|Div3|auto_generated|divider|divider|op_8~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div3|auto_generated|divider|divider|op_8~1_sumout\ = SUM(( VCC ) + ( GND ) + ( \convert_binary|Div3|auto_generated|divider|divider|op_8~6_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Div3|auto_generated|divider|divider|op_8~6_cout\,
	sumout => \convert_binary|Div3|auto_generated|divider|divider|op_8~1_sumout\);

\convert_binary|Div3|auto_generated|divider|divider|StageOut[52]~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div3|auto_generated|divider|divider|StageOut[52]~1_combout\ = (!\convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\ & \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[4]~9_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[7]~1_sumout\,
	datab => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[4]~9_sumout\,
	combout => \convert_binary|Div3|auto_generated|divider|divider|StageOut[52]~1_combout\);

\convert_binary|Div3|auto_generated|divider|divider|StageOut[52]~2\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div3|auto_generated|divider|divider|StageOut[52]~2_combout\ = (Remainder_input(7) & \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => ALT_INV_Remainder_input(7),
	datab => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[7]~1_sumout\,
	combout => \convert_binary|Div3|auto_generated|divider|divider|StageOut[52]~2_combout\);

\convert_binary|Div3|auto_generated|divider|divider|StageOut[51]~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div3|auto_generated|divider|divider|StageOut[51]~9_combout\ = (\convert_binary|Div3|auto_generated|divider|divider|StageOut[51]~8_combout\) # (\convert_binary|Div3|auto_generated|divider|divider|StageOut[51]~7_combout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0111011101110111011101110111011101110111011101110111011101110111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[51]~7_combout\,
	datab => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[51]~8_combout\,
	combout => \convert_binary|Div3|auto_generated|divider|divider|StageOut[51]~9_combout\);

\convert_binary|Div3|auto_generated|divider|divider|StageOut[50]~11\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div3|auto_generated|divider|divider|StageOut[50]~11_combout\ = (!\convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\ & 
-- \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[2]~21_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[7]~1_sumout\,
	datab => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[2]~21_sumout\,
	combout => \convert_binary|Div3|auto_generated|divider|divider|StageOut[50]~11_combout\);

\convert_binary|Div3|auto_generated|divider|divider|StageOut[50]~12\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div3|auto_generated|divider|divider|StageOut[50]~12_combout\ = (Remainder_input(5) & \convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => ALT_INV_Remainder_input(5),
	datab => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[7]~1_sumout\,
	combout => \convert_binary|Div3|auto_generated|divider|divider|StageOut[50]~12_combout\);

\convert_binary|Div3|auto_generated|divider|divider|StageOut[49]~17\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div3|auto_generated|divider|divider|StageOut[49]~17_combout\ = (\convert_binary|Div3|auto_generated|divider|divider|StageOut[49]~16_combout\) # (\convert_binary|Div3|auto_generated|divider|divider|StageOut[49]~15_combout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0111011101110111011101110111011101110111011101110111011101110111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[49]~15_combout\,
	datab => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[49]~16_combout\,
	combout => \convert_binary|Div3|auto_generated|divider|divider|StageOut[49]~17_combout\);

\convert_binary|Div3|auto_generated|divider|divider|StageOut[48]~19\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div3|auto_generated|divider|divider|StageOut[48]~19_combout\ = (!\convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\ & 
-- ((\convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[0]~29_sumout\))) # (\convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\ & (Remainder_input(3)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001110100011101000111010001110100011101000111010001110100011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => ALT_INV_Remainder_input(3),
	datab => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[7]~1_sumout\,
	datac => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[0]~29_sumout\,
	combout => \convert_binary|Div3|auto_generated|divider|divider|StageOut[48]~19_combout\);

\convert_binary|Div3|auto_generated|divider|divider|op_9~38\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div3|auto_generated|divider|divider|op_9~38_cout\ = CARRY(( VCC ) + ( VCC ) + ( !VCC ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => GND,
	cout => \convert_binary|Div3|auto_generated|divider|divider|op_9~38_cout\);

\convert_binary|Div3|auto_generated|divider|divider|op_9~33\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div3|auto_generated|divider|divider|op_9~33_sumout\ = SUM(( Remainder_input(1) ) + ( VCC ) + ( \convert_binary|Div3|auto_generated|divider|divider|op_9~38_cout\ ))
-- \convert_binary|Div3|auto_generated|divider|divider|op_9~34\ = CARRY(( Remainder_input(1) ) + ( VCC ) + ( \convert_binary|Div3|auto_generated|divider|divider|op_9~38_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => ALT_INV_Remainder_input(1),
	cin => \convert_binary|Div3|auto_generated|divider|divider|op_9~38_cout\,
	sumout => \convert_binary|Div3|auto_generated|divider|divider|op_9~33_sumout\,
	cout => \convert_binary|Div3|auto_generated|divider|divider|op_9~34\);

\convert_binary|Div3|auto_generated|divider|divider|op_9~29\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div3|auto_generated|divider|divider|op_9~29_sumout\ = SUM(( (!\convert_binary|Div3|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Div3|auto_generated|divider|divider|op_8~33_sumout\))) # 
-- (\convert_binary|Div3|auto_generated|divider|divider|op_8~1_sumout\ & (Remainder_input(2))) ) + ( VCC ) + ( \convert_binary|Div3|auto_generated|divider|divider|op_9~34\ ))
-- \convert_binary|Div3|auto_generated|divider|divider|op_9~30\ = CARRY(( (!\convert_binary|Div3|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Div3|auto_generated|divider|divider|op_8~33_sumout\))) # 
-- (\convert_binary|Div3|auto_generated|divider|divider|op_8~1_sumout\ & (Remainder_input(2))) ) + ( VCC ) + ( \convert_binary|Div3|auto_generated|divider|divider|op_9~34\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001000111011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => ALT_INV_Remainder_input(2),
	datab => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datad => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_8~33_sumout\,
	cin => \convert_binary|Div3|auto_generated|divider|divider|op_9~34\,
	sumout => \convert_binary|Div3|auto_generated|divider|divider|op_9~29_sumout\,
	cout => \convert_binary|Div3|auto_generated|divider|divider|op_9~30\);

\convert_binary|Div3|auto_generated|divider|divider|op_9~25\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div3|auto_generated|divider|divider|op_9~25_sumout\ = SUM(( (!\convert_binary|Div3|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Div3|auto_generated|divider|divider|op_8~29_sumout\))) # 
-- (\convert_binary|Div3|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Div3|auto_generated|divider|divider|StageOut[48]~19_combout\)) ) + ( GND ) + ( \convert_binary|Div3|auto_generated|divider|divider|op_9~30\ ))
-- \convert_binary|Div3|auto_generated|divider|divider|op_9~26\ = CARRY(( (!\convert_binary|Div3|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Div3|auto_generated|divider|divider|op_8~29_sumout\))) # 
-- (\convert_binary|Div3|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Div3|auto_generated|divider|divider|StageOut[48]~19_combout\)) ) + ( GND ) + ( \convert_binary|Div3|auto_generated|divider|divider|op_9~30\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000001111001111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datab => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datac => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[48]~19_combout\,
	datad => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_8~29_sumout\,
	cin => \convert_binary|Div3|auto_generated|divider|divider|op_9~30\,
	sumout => \convert_binary|Div3|auto_generated|divider|divider|op_9~25_sumout\,
	cout => \convert_binary|Div3|auto_generated|divider|divider|op_9~26\);

\convert_binary|Div3|auto_generated|divider|divider|op_9~21\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div3|auto_generated|divider|divider|op_9~21_sumout\ = SUM(( (!\convert_binary|Div3|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Div3|auto_generated|divider|divider|op_8~25_sumout\))) # 
-- (\convert_binary|Div3|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Div3|auto_generated|divider|divider|StageOut[49]~17_combout\)) ) + ( VCC ) + ( \convert_binary|Div3|auto_generated|divider|divider|op_9~26\ ))
-- \convert_binary|Div3|auto_generated|divider|divider|op_9~22\ = CARRY(( (!\convert_binary|Div3|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Div3|auto_generated|divider|divider|op_8~25_sumout\))) # 
-- (\convert_binary|Div3|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Div3|auto_generated|divider|divider|StageOut[49]~17_combout\)) ) + ( VCC ) + ( \convert_binary|Div3|auto_generated|divider|divider|op_9~26\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datac => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[49]~17_combout\,
	datad => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_8~25_sumout\,
	cin => \convert_binary|Div3|auto_generated|divider|divider|op_9~26\,
	sumout => \convert_binary|Div3|auto_generated|divider|divider|op_9~21_sumout\,
	cout => \convert_binary|Div3|auto_generated|divider|divider|op_9~22\);

\convert_binary|Div3|auto_generated|divider|divider|op_9~17\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div3|auto_generated|divider|divider|op_9~17_sumout\ = SUM(( (!\convert_binary|Div3|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Div3|auto_generated|divider|divider|op_8~21_sumout\)))) # 
-- (\convert_binary|Div3|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Div3|auto_generated|divider|divider|StageOut[50]~12_combout\)) # (\convert_binary|Div3|auto_generated|divider|divider|StageOut[50]~11_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Div3|auto_generated|divider|divider|op_9~22\ ))
-- \convert_binary|Div3|auto_generated|divider|divider|op_9~18\ = CARRY(( (!\convert_binary|Div3|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Div3|auto_generated|divider|divider|op_8~21_sumout\)))) # 
-- (\convert_binary|Div3|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Div3|auto_generated|divider|divider|StageOut[50]~12_combout\)) # (\convert_binary|Div3|auto_generated|divider|divider|StageOut[50]~11_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Div3|auto_generated|divider|divider|op_9~22\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[50]~11_combout\,
	datac => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_8~21_sumout\,
	datad => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[50]~12_combout\,
	cin => \convert_binary|Div3|auto_generated|divider|divider|op_9~22\,
	sumout => \convert_binary|Div3|auto_generated|divider|divider|op_9~17_sumout\,
	cout => \convert_binary|Div3|auto_generated|divider|divider|op_9~18\);

\convert_binary|Div3|auto_generated|divider|divider|op_9~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div3|auto_generated|divider|divider|op_9~13_sumout\ = SUM(( (!\convert_binary|Div3|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Div3|auto_generated|divider|divider|op_8~17_sumout\))) # 
-- (\convert_binary|Div3|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Div3|auto_generated|divider|divider|StageOut[51]~9_combout\)) ) + ( GND ) + ( \convert_binary|Div3|auto_generated|divider|divider|op_9~18\ ))
-- \convert_binary|Div3|auto_generated|divider|divider|op_9~14\ = CARRY(( (!\convert_binary|Div3|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Div3|auto_generated|divider|divider|op_8~17_sumout\))) # 
-- (\convert_binary|Div3|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Div3|auto_generated|divider|divider|StageOut[51]~9_combout\)) ) + ( GND ) + ( \convert_binary|Div3|auto_generated|divider|divider|op_9~18\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datac => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[51]~9_combout\,
	datad => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_8~17_sumout\,
	cin => \convert_binary|Div3|auto_generated|divider|divider|op_9~18\,
	sumout => \convert_binary|Div3|auto_generated|divider|divider|op_9~13_sumout\,
	cout => \convert_binary|Div3|auto_generated|divider|divider|op_9~14\);

\convert_binary|Div3|auto_generated|divider|divider|op_9~9\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div3|auto_generated|divider|divider|op_9~9_sumout\ = SUM(( (!\convert_binary|Div3|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Div3|auto_generated|divider|divider|op_8~9_sumout\)))) # 
-- (\convert_binary|Div3|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Div3|auto_generated|divider|divider|StageOut[52]~2_combout\)) # (\convert_binary|Div3|auto_generated|divider|divider|StageOut[52]~1_combout\))) ) + ( GND ) + ( 
-- \convert_binary|Div3|auto_generated|divider|divider|op_9~14\ ))
-- \convert_binary|Div3|auto_generated|divider|divider|op_9~10\ = CARRY(( (!\convert_binary|Div3|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Div3|auto_generated|divider|divider|op_8~9_sumout\)))) # 
-- (\convert_binary|Div3|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Div3|auto_generated|divider|divider|StageOut[52]~2_combout\)) # (\convert_binary|Div3|auto_generated|divider|divider|StageOut[52]~1_combout\))) ) + ( GND ) + ( 
-- \convert_binary|Div3|auto_generated|divider|divider|op_9~14\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[52]~1_combout\,
	datac => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_8~9_sumout\,
	datad => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[52]~2_combout\,
	cin => \convert_binary|Div3|auto_generated|divider|divider|op_9~14\,
	sumout => \convert_binary|Div3|auto_generated|divider|divider|op_9~9_sumout\,
	cout => \convert_binary|Div3|auto_generated|divider|divider|op_9~10\);

\convert_binary|Div3|auto_generated|divider|divider|op_9~6\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div3|auto_generated|divider|divider|op_9~6_cout\ = CARRY(( (!\convert_binary|Div3|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Div3|auto_generated|divider|divider|op_8~13_sumout\)))) # 
-- (\convert_binary|Div3|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Div3|auto_generated|divider|divider|StageOut[53]~5_combout\)) # (\convert_binary|Div3|auto_generated|divider|divider|StageOut[53]~4_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Div3|auto_generated|divider|divider|op_9~10\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001010110111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[53]~4_combout\,
	datac => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[53]~5_combout\,
	datad => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_8~13_sumout\,
	cin => \convert_binary|Div3|auto_generated|divider|divider|op_9~10\,
	cout => \convert_binary|Div3|auto_generated|divider|divider|op_9~6_cout\);

\convert_binary|Div3|auto_generated|divider|divider|op_9~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div3|auto_generated|divider|divider|op_9~1_sumout\ = SUM(( VCC ) + ( GND ) + ( \convert_binary|Div3|auto_generated|divider|divider|op_9~6_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Div3|auto_generated|divider|divider|op_9~6_cout\,
	sumout => \convert_binary|Div3|auto_generated|divider|divider|op_9~1_sumout\);

\convert_binary|Div3|auto_generated|divider|divider|StageOut[61]~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div3|auto_generated|divider|divider|StageOut[61]~0_combout\ = (!\convert_binary|Div3|auto_generated|divider|divider|op_8~1_sumout\ & \convert_binary|Div3|auto_generated|divider|divider|op_8~9_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_8~9_sumout\,
	combout => \convert_binary|Div3|auto_generated|divider|divider|StageOut[61]~0_combout\);

\convert_binary|Div3|auto_generated|divider|divider|StageOut[61]~3\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div3|auto_generated|divider|divider|StageOut[61]~3_combout\ = (\convert_binary|Div3|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Div3|auto_generated|divider|divider|StageOut[52]~2_combout\) # 
-- (\convert_binary|Div3|auto_generated|divider|divider|StageOut[52]~1_combout\)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001010100010101000101010001010100010101000101010001010100010101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[52]~1_combout\,
	datac => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[52]~2_combout\,
	combout => \convert_binary|Div3|auto_generated|divider|divider|StageOut[61]~3_combout\);

\convert_binary|Div3|auto_generated|divider|divider|StageOut[60]~6\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div3|auto_generated|divider|divider|StageOut[60]~6_combout\ = (!\convert_binary|Div3|auto_generated|divider|divider|op_8~1_sumout\ & \convert_binary|Div3|auto_generated|divider|divider|op_8~17_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_8~17_sumout\,
	combout => \convert_binary|Div3|auto_generated|divider|divider|StageOut[60]~6_combout\);

\convert_binary|Div3|auto_generated|divider|divider|StageOut[60]~10\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div3|auto_generated|divider|divider|StageOut[60]~10_combout\ = (\convert_binary|Div3|auto_generated|divider|divider|op_8~1_sumout\ & \convert_binary|Div3|auto_generated|divider|divider|StageOut[51]~9_combout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[51]~9_combout\,
	combout => \convert_binary|Div3|auto_generated|divider|divider|StageOut[60]~10_combout\);

\convert_binary|Div3|auto_generated|divider|divider|StageOut[59]~13\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div3|auto_generated|divider|divider|StageOut[59]~13_combout\ = (!\convert_binary|Div3|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Div3|auto_generated|divider|divider|op_8~21_sumout\)))) # 
-- (\convert_binary|Div3|auto_generated|divider|divider|op_8~1_sumout\ & (((\convert_binary|Div3|auto_generated|divider|divider|StageOut[50]~12_combout\)) # (\convert_binary|Div3|auto_generated|divider|divider|StageOut[50]~11_combout\)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001101101011111000110110101111100011011010111110001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[50]~11_combout\,
	datac => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_8~21_sumout\,
	datad => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[50]~12_combout\,
	combout => \convert_binary|Div3|auto_generated|divider|divider|StageOut[59]~13_combout\);

\convert_binary|Div3|auto_generated|divider|divider|StageOut[58]~14\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div3|auto_generated|divider|divider|StageOut[58]~14_combout\ = (!\convert_binary|Div3|auto_generated|divider|divider|op_8~1_sumout\ & \convert_binary|Div3|auto_generated|divider|divider|op_8~25_sumout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010001000100010001000100010001000100010001000100010001000100010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_8~25_sumout\,
	combout => \convert_binary|Div3|auto_generated|divider|divider|StageOut[58]~14_combout\);

\convert_binary|Div3|auto_generated|divider|divider|StageOut[58]~18\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div3|auto_generated|divider|divider|StageOut[58]~18_combout\ = (\convert_binary|Div3|auto_generated|divider|divider|op_8~1_sumout\ & \convert_binary|Div3|auto_generated|divider|divider|StageOut[49]~17_combout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001000100010001000100010001000100010001000100010001000100010001",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[49]~17_combout\,
	combout => \convert_binary|Div3|auto_generated|divider|divider|StageOut[58]~18_combout\);

\convert_binary|Div3|auto_generated|divider|divider|StageOut[57]~20\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div3|auto_generated|divider|divider|StageOut[57]~20_combout\ = (!\convert_binary|Div3|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Div3|auto_generated|divider|divider|op_8~29_sumout\))) # 
-- (\convert_binary|Div3|auto_generated|divider|divider|op_8~1_sumout\ & (\convert_binary|Div3|auto_generated|divider|divider|StageOut[48]~19_combout\))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001101100011011000110110001101100011011000110110001101100011011",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datab => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[48]~19_combout\,
	datac => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_8~29_sumout\,
	combout => \convert_binary|Div3|auto_generated|divider|divider|StageOut[57]~20_combout\);

\convert_binary|Div3|auto_generated|divider|divider|StageOut[56]~21\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div3|auto_generated|divider|divider|StageOut[56]~21_combout\ = (!\convert_binary|Div3|auto_generated|divider|divider|op_8~1_sumout\ & ((\convert_binary|Div3|auto_generated|divider|divider|op_8~33_sumout\))) # 
-- (\convert_binary|Div3|auto_generated|divider|divider|op_8~1_sumout\ & (Remainder_input(2)))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0001110100011101000111010001110100011101000111010001110100011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => ALT_INV_Remainder_input(2),
	datab => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	datac => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_8~33_sumout\,
	combout => \convert_binary|Div3|auto_generated|divider|divider|StageOut[56]~21_combout\);

\convert_binary|Div3|auto_generated|divider|divider|op_10~38\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div3|auto_generated|divider|divider|op_10~38_cout\ = CARRY(( VCC ) + ( VCC ) + ( !VCC ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => GND,
	cout => \convert_binary|Div3|auto_generated|divider|divider|op_10~38_cout\);

\convert_binary|Div3|auto_generated|divider|divider|op_10~34\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div3|auto_generated|divider|divider|op_10~34_cout\ = CARRY(( Remainder_input(0) ) + ( VCC ) + ( \convert_binary|Div3|auto_generated|divider|divider|op_10~38_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000000011111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datad => ALT_INV_Remainder_input(0),
	cin => \convert_binary|Div3|auto_generated|divider|divider|op_10~38_cout\,
	cout => \convert_binary|Div3|auto_generated|divider|divider|op_10~34_cout\);

\convert_binary|Div3|auto_generated|divider|divider|op_10~30\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div3|auto_generated|divider|divider|op_10~30_cout\ = CARRY(( (!\convert_binary|Div3|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Div3|auto_generated|divider|divider|op_9~33_sumout\))) # 
-- (\convert_binary|Div3|auto_generated|divider|divider|op_9~1_sumout\ & (Remainder_input(1))) ) + ( VCC ) + ( \convert_binary|Div3|auto_generated|divider|divider|op_10~34_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001000111011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => ALT_INV_Remainder_input(1),
	datab => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datad => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_9~33_sumout\,
	cin => \convert_binary|Div3|auto_generated|divider|divider|op_10~34_cout\,
	cout => \convert_binary|Div3|auto_generated|divider|divider|op_10~30_cout\);

\convert_binary|Div3|auto_generated|divider|divider|op_10~26\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div3|auto_generated|divider|divider|op_10~26_cout\ = CARRY(( (!\convert_binary|Div3|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Div3|auto_generated|divider|divider|op_9~29_sumout\))) # 
-- (\convert_binary|Div3|auto_generated|divider|divider|op_9~1_sumout\ & (\convert_binary|Div3|auto_generated|divider|divider|StageOut[56]~21_combout\)) ) + ( GND ) + ( \convert_binary|Div3|auto_generated|divider|divider|op_10~30_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000001111001111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	datab => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datac => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[56]~21_combout\,
	datad => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_9~29_sumout\,
	cin => \convert_binary|Div3|auto_generated|divider|divider|op_10~30_cout\,
	cout => \convert_binary|Div3|auto_generated|divider|divider|op_10~26_cout\);

\convert_binary|Div3|auto_generated|divider|divider|op_10~22\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div3|auto_generated|divider|divider|op_10~22_cout\ = CARRY(( (!\convert_binary|Div3|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Div3|auto_generated|divider|divider|op_9~25_sumout\))) # 
-- (\convert_binary|Div3|auto_generated|divider|divider|op_9~1_sumout\ & (\convert_binary|Div3|auto_generated|divider|divider|StageOut[57]~20_combout\)) ) + ( VCC ) + ( \convert_binary|Div3|auto_generated|divider|divider|op_10~26_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datac => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[57]~20_combout\,
	datad => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_9~25_sumout\,
	cin => \convert_binary|Div3|auto_generated|divider|divider|op_10~26_cout\,
	cout => \convert_binary|Div3|auto_generated|divider|divider|op_10~22_cout\);

\convert_binary|Div3|auto_generated|divider|divider|op_10~18\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div3|auto_generated|divider|divider|op_10~18_cout\ = CARRY(( (!\convert_binary|Div3|auto_generated|divider|divider|op_9~1_sumout\ & (((\convert_binary|Div3|auto_generated|divider|divider|op_9~21_sumout\)))) # 
-- (\convert_binary|Div3|auto_generated|divider|divider|op_9~1_sumout\ & (((\convert_binary|Div3|auto_generated|divider|divider|StageOut[58]~18_combout\)) # (\convert_binary|Div3|auto_generated|divider|divider|StageOut[58]~14_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Div3|auto_generated|divider|divider|op_10~22_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datab => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[58]~14_combout\,
	datac => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_9~21_sumout\,
	datad => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[58]~18_combout\,
	cin => \convert_binary|Div3|auto_generated|divider|divider|op_10~22_cout\,
	cout => \convert_binary|Div3|auto_generated|divider|divider|op_10~18_cout\);

\convert_binary|Div3|auto_generated|divider|divider|op_10~14\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div3|auto_generated|divider|divider|op_10~14_cout\ = CARRY(( (!\convert_binary|Div3|auto_generated|divider|divider|op_9~1_sumout\ & ((\convert_binary|Div3|auto_generated|divider|divider|op_9~17_sumout\))) # 
-- (\convert_binary|Div3|auto_generated|divider|divider|op_9~1_sumout\ & (\convert_binary|Div3|auto_generated|divider|divider|StageOut[59]~13_combout\)) ) + ( GND ) + ( \convert_binary|Div3|auto_generated|divider|divider|op_10~18_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000000010110101111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datac => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[59]~13_combout\,
	datad => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_9~17_sumout\,
	cin => \convert_binary|Div3|auto_generated|divider|divider|op_10~18_cout\,
	cout => \convert_binary|Div3|auto_generated|divider|divider|op_10~14_cout\);

\convert_binary|Div3|auto_generated|divider|divider|op_10~10\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div3|auto_generated|divider|divider|op_10~10_cout\ = CARRY(( (!\convert_binary|Div3|auto_generated|divider|divider|op_9~1_sumout\ & (((\convert_binary|Div3|auto_generated|divider|divider|op_9~13_sumout\)))) # 
-- (\convert_binary|Div3|auto_generated|divider|divider|op_9~1_sumout\ & (((\convert_binary|Div3|auto_generated|divider|divider|StageOut[60]~10_combout\)) # (\convert_binary|Div3|auto_generated|divider|divider|StageOut[60]~6_combout\))) ) + ( GND ) + ( 
-- \convert_binary|Div3|auto_generated|divider|divider|op_10~14_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datab => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[60]~6_combout\,
	datac => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_9~13_sumout\,
	datad => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[60]~10_combout\,
	cin => \convert_binary|Div3|auto_generated|divider|divider|op_10~14_cout\,
	cout => \convert_binary|Div3|auto_generated|divider|divider|op_10~10_cout\);

\convert_binary|Div3|auto_generated|divider|divider|op_10~6\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div3|auto_generated|divider|divider|op_10~6_cout\ = CARRY(( (!\convert_binary|Div3|auto_generated|divider|divider|op_9~1_sumout\ & (((\convert_binary|Div3|auto_generated|divider|divider|op_9~9_sumout\)))) # 
-- (\convert_binary|Div3|auto_generated|divider|divider|op_9~1_sumout\ & (((\convert_binary|Div3|auto_generated|divider|divider|StageOut[61]~3_combout\)) # (\convert_binary|Div3|auto_generated|divider|divider|StageOut[61]~0_combout\))) ) + ( VCC ) + ( 
-- \convert_binary|Div3|auto_generated|divider|divider|op_10~10_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000000000000000000000000000000000000001101101011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	datab => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[61]~0_combout\,
	datac => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_9~9_sumout\,
	datad => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_StageOut[61]~3_combout\,
	cin => \convert_binary|Div3|auto_generated|divider|divider|op_10~10_cout\,
	cout => \convert_binary|Div3|auto_generated|divider|divider|op_10~6_cout\);

\convert_binary|Div3|auto_generated|divider|divider|op_10~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div3|auto_generated|divider|divider|op_10~1_sumout\ = SUM(( VCC ) + ( GND ) + ( \convert_binary|Div3|auto_generated|divider|divider|op_10~6_cout\ ))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000000000000000111111111111111100000000000000001111111111111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	cin => \convert_binary|Div3|auto_generated|divider|divider|op_10~6_cout\,
	sumout => \convert_binary|Div3|auto_generated|divider|divider|op_10~1_sumout\);

\convert_binary|Div3|auto_generated|divider|divider|op_10~1_wirecell\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div3|auto_generated|divider|divider|op_10~1_wirecell_combout\ = !\convert_binary|Div3|auto_generated|divider|divider|op_10~1_sumout\

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "1010101010101010101010101010101010101010101010101010101010101010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_10~1_sumout\,
	combout => \convert_binary|Div3|auto_generated|divider|divider|op_10~1_wirecell_combout\);

\convert_binary|int_r_3[0]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \convert_binary|Div3|auto_generated|divider|divider|op_10~1_wirecell_combout\,
	clrn => \RST_main~input_o\,
	sclr => \convert_binary|int_r_2[2]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \convert_binary|int_r_3\(0));

\convert_binary|int_r_3~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|int_r_3~0_combout\ = (!\convert_binary|Div3|auto_generated|divider|divider|op_9~1_sumout\) # (\convert_binary|int_r_2[2]~0_combout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "1101110111011101110111011101110111011101110111011101110111011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|ALT_INV_int_r_2[2]~0_combout\,
	datab => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_9~1_sumout\,
	combout => \convert_binary|int_r_3~0_combout\);

\convert_binary|int_r_3[1]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \convert_binary|int_r_3~0_combout\,
	clrn => \RST_main~input_o\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \convert_binary|int_r_3\(1));

\convert_binary|Div3|auto_generated|divider|divider|op_8~1_wirecell\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|Div3|auto_generated|divider|divider|op_8~1_wirecell_combout\ = !\convert_binary|Div3|auto_generated|divider|divider|op_8~1_sumout\

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "1010101010101010101010101010101010101010101010101010101010101010",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_op_8~1_sumout\,
	combout => \convert_binary|Div3|auto_generated|divider|divider|op_8~1_wirecell_combout\);

\convert_binary|int_r_3[2]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \convert_binary|Div3|auto_generated|divider|divider|op_8~1_wirecell_combout\,
	clrn => \RST_main~input_o\,
	sclr => \convert_binary|int_r_2[2]~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \convert_binary|int_r_3\(2));

\convert_binary|int_r_3~1\ : cyclonev_lcell_comb
-- Equation(s):
-- \convert_binary|int_r_3~1_combout\ = (!\convert_binary|Div3|auto_generated|divider|divider|add_sub_6_result_int[7]~1_sumout\) # (\convert_binary|int_r_2[2]~0_combout\)

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "1101110111011101110111011101110111011101110111011101110111011101",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|ALT_INV_int_r_2[2]~0_combout\,
	datab => \convert_binary|Div3|auto_generated|divider|divider|ALT_INV_add_sub_6_result_int[7]~1_sumout\,
	combout => \convert_binary|int_r_3~1_combout\);

\convert_binary|int_r_3[3]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \convert_binary|int_r_3~1_combout\,
	clrn => \RST_main~input_o\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \convert_binary|int_r_3\(3));

\seven_seg_display_6|Mux6~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \seven_seg_display_6|Mux6~0_combout\ = (!\convert_binary|int_r_3\(1) & (!\convert_binary|int_r_3\(3) & (!\convert_binary|int_r_3\(0) $ (!\convert_binary|int_r_3\(2)))))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0100100000000000010010000000000001001000000000000100100000000000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|ALT_INV_int_r_3\(0),
	datab => \convert_binary|ALT_INV_int_r_3\(1),
	datac => \convert_binary|ALT_INV_int_r_3\(2),
	datad => \convert_binary|ALT_INV_int_r_3\(3),
	combout => \seven_seg_display_6|Mux6~0_combout\);

\seven_seg_display_6|seven_seg[0]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \seven_seg_display_6|Mux6~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \seven_seg_display_6|seven_seg\(0));

\seven_seg_display_6|Mux5~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \seven_seg_display_6|Mux5~0_combout\ = (!\convert_binary|int_r_3\(2) & (((\convert_binary|int_r_3\(1) & \convert_binary|int_r_3\(3))))) # (\convert_binary|int_r_3\(2) & ((!\convert_binary|int_r_3\(0) $ (!\convert_binary|int_r_3\(1))) # 
-- (\convert_binary|int_r_3\(3))))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0000011000111111000001100011111100000110001111110000011000111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|ALT_INV_int_r_3\(0),
	datab => \convert_binary|ALT_INV_int_r_3\(1),
	datac => \convert_binary|ALT_INV_int_r_3\(2),
	datad => \convert_binary|ALT_INV_int_r_3\(3),
	combout => \seven_seg_display_6|Mux5~0_combout\);

\seven_seg_display_6|seven_seg[1]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \seven_seg_display_6|Mux5~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \seven_seg_display_6|seven_seg\(1));

\seven_seg_display_6|Mux4~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \seven_seg_display_6|Mux4~0_combout\ = (!\convert_binary|int_r_3\(2) & (\convert_binary|int_r_3\(1) & ((!\convert_binary|int_r_3\(0)) # (\convert_binary|int_r_3\(3))))) # (\convert_binary|int_r_3\(2) & (((\convert_binary|int_r_3\(3)))))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0010000000111111001000000011111100100000001111110010000000111111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|ALT_INV_int_r_3\(0),
	datab => \convert_binary|ALT_INV_int_r_3\(1),
	datac => \convert_binary|ALT_INV_int_r_3\(2),
	datad => \convert_binary|ALT_INV_int_r_3\(3),
	combout => \seven_seg_display_6|Mux4~0_combout\);

\seven_seg_display_6|seven_seg[2]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \seven_seg_display_6|Mux4~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \seven_seg_display_6|seven_seg\(2));

\seven_seg_display_6|Mux3~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \seven_seg_display_6|Mux3~0_combout\ = (!\convert_binary|int_r_3\(3) & ((!\convert_binary|int_r_3\(0) & (!\convert_binary|int_r_3\(1) & \convert_binary|int_r_3\(2))) # (\convert_binary|int_r_3\(0) & (!\convert_binary|int_r_3\(1) $ 
-- (\convert_binary|int_r_3\(2))))))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0100100100000000010010010000000001001001000000000100100100000000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|ALT_INV_int_r_3\(0),
	datab => \convert_binary|ALT_INV_int_r_3\(1),
	datac => \convert_binary|ALT_INV_int_r_3\(2),
	datad => \convert_binary|ALT_INV_int_r_3\(3),
	combout => \seven_seg_display_6|Mux3~0_combout\);

\seven_seg_display_6|seven_seg[3]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \seven_seg_display_6|Mux3~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \seven_seg_display_6|seven_seg\(3));

\seven_seg_display_6|Mux2~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \seven_seg_display_6|Mux2~0_combout\ = (!\convert_binary|int_r_3\(1) & ((!\convert_binary|int_r_3\(2) & (\convert_binary|int_r_3\(0))) # (\convert_binary|int_r_3\(2) & ((!\convert_binary|int_r_3\(3)))))) # (\convert_binary|int_r_3\(1) & 
-- (\convert_binary|int_r_3\(0) & ((!\convert_binary|int_r_3\(3)))))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0101110101000000010111010100000001011101010000000101110101000000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|ALT_INV_int_r_3\(0),
	datab => \convert_binary|ALT_INV_int_r_3\(1),
	datac => \convert_binary|ALT_INV_int_r_3\(2),
	datad => \convert_binary|ALT_INV_int_r_3\(3),
	combout => \seven_seg_display_6|Mux2~0_combout\);

\seven_seg_display_6|seven_seg[4]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \seven_seg_display_6|Mux2~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \seven_seg_display_6|seven_seg\(4));

\seven_seg_display_6|Mux1~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \seven_seg_display_6|Mux1~0_combout\ = (!\convert_binary|int_r_3\(3) & ((!\convert_binary|int_r_3\(0) & (\convert_binary|int_r_3\(1) & !\convert_binary|int_r_3\(2))) # (\convert_binary|int_r_3\(0) & ((!\convert_binary|int_r_3\(2)) # 
-- (\convert_binary|int_r_3\(1))))))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "0111000100000000011100010000000001110001000000000111000100000000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|ALT_INV_int_r_3\(0),
	datab => \convert_binary|ALT_INV_int_r_3\(1),
	datac => \convert_binary|ALT_INV_int_r_3\(2),
	datad => \convert_binary|ALT_INV_int_r_3\(3),
	combout => \seven_seg_display_6|Mux1~0_combout\);

\seven_seg_display_6|seven_seg[5]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \seven_seg_display_6|Mux1~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \seven_seg_display_6|seven_seg\(5));

\seven_seg_display_6|Mux0~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \seven_seg_display_6|Mux0~0_combout\ = (!\convert_binary|int_r_3\(3) & ((!\convert_binary|int_r_3\(1) & ((!\convert_binary|int_r_3\(2)))) # (\convert_binary|int_r_3\(1) & (\convert_binary|int_r_3\(0) & \convert_binary|int_r_3\(2)))))

-- pragma translate_off
GENERIC MAP (
	extended_lut => "off",
	lut_mask => "1100000100000000110000010000000011000001000000001100000100000000",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \convert_binary|ALT_INV_int_r_3\(0),
	datab => \convert_binary|ALT_INV_int_r_3\(1),
	datac => \convert_binary|ALT_INV_int_r_3\(2),
	datad => \convert_binary|ALT_INV_int_r_3\(3),
	combout => \seven_seg_display_6|Mux0~0_combout\);

\seven_seg_display_6|seven_seg[6]\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \seven_seg_display_6|Mux0~0_combout\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \seven_seg_display_6|seven_seg\(6));

\DONE_main~0\ : cyclonev_lcell_comb
-- Equation(s):
-- \DONE_main~0_combout\ = ( !\Operation[0]~input_o\ & ( (!\state~q\ & (((!\START_main~input_o\ & ((\DONE_main~reg0_q\)))))) # (\state~q\ & ((((\DONE_main~reg0_q\) # (\division_function|DONE~q\))) # (\Operation[1]~input_o\))) ) ) # ( \Operation[0]~input_o\ & 
-- ( (!\state~q\ & (((!\START_main~input_o\ & ((\DONE_main~reg0_q\)))))) # (\state~q\ & ((((\multiplication_function|DONE~q\))) # (\Operation[1]~input_o\))) ) )

-- pragma translate_off
GENERIC MAP (
	extended_lut => "on",
	lut_mask => "0000000001011111000000000101111111001100111111111100110001011111",
	shared_arith => "off")
-- pragma translate_on
PORT MAP (
	dataa => \ALT_INV_Operation[1]~input_o\,
	datab => \ALT_INV_START_main~input_o\,
	datac => \multiplication_function|ALT_INV_DONE~q\,
	datad => \ALT_INV_state~q\,
	datae => \ALT_INV_Operation[0]~input_o\,
	dataf => \ALT_INV_DONE_main~reg0_q\,
	datag => \division_function|ALT_INV_DONE~q\,
	combout => \DONE_main~0_combout\);

\DONE_main~reg0\ : dffeas
-- pragma translate_off
GENERIC MAP (
	is_wysiwyg => "true",
	power_up => "low")
-- pragma translate_on
PORT MAP (
	clk => \CLK_main~input_o\,
	d => \DONE_main~0_combout\,
	ena => \RST_main~input_o\,
	devclrn => ww_devclrn,
	devpor => ww_devpor,
	q => \DONE_main~reg0_q\);

ww_Result(0) <= \Result[0]~output_o\;

ww_Result(1) <= \Result[1]~output_o\;

ww_Result(2) <= \Result[2]~output_o\;

ww_Result(3) <= \Result[3]~output_o\;

ww_Result(4) <= \Result[4]~output_o\;

ww_Result(5) <= \Result[5]~output_o\;

ww_Result(6) <= \Result[6]~output_o\;

ww_Result(7) <= \Result[7]~output_o\;

ww_Result(8) <= \Result[8]~output_o\;

ww_Result(9) <= \Result[9]~output_o\;

ww_Remainder(0) <= \Remainder[0]~output_o\;

ww_Remainder(1) <= \Remainder[1]~output_o\;

ww_Remainder(2) <= \Remainder[2]~output_o\;

ww_Remainder(3) <= \Remainder[3]~output_o\;

ww_Remainder(4) <= \Remainder[4]~output_o\;

ww_Remainder(5) <= \Remainder[5]~output_o\;

ww_Remainder(6) <= \Remainder[6]~output_o\;

ww_Remainder(7) <= \Remainder[7]~output_o\;

ww_Remainder(8) <= \Remainder[8]~output_o\;

ww_Remainder(9) <= \Remainder[9]~output_o\;

ww_sevenseg_digit_0(0) <= \sevenseg_digit_0[0]~output_o\;

ww_sevenseg_digit_0(1) <= \sevenseg_digit_0[1]~output_o\;

ww_sevenseg_digit_0(2) <= \sevenseg_digit_0[2]~output_o\;

ww_sevenseg_digit_0(3) <= \sevenseg_digit_0[3]~output_o\;

ww_sevenseg_digit_0(4) <= \sevenseg_digit_0[4]~output_o\;

ww_sevenseg_digit_0(5) <= \sevenseg_digit_0[5]~output_o\;

ww_sevenseg_digit_0(6) <= \sevenseg_digit_0[6]~output_o\;

ww_sevenseg_digit_1(0) <= \sevenseg_digit_1[0]~output_o\;

ww_sevenseg_digit_1(1) <= \sevenseg_digit_1[1]~output_o\;

ww_sevenseg_digit_1(2) <= \sevenseg_digit_1[2]~output_o\;

ww_sevenseg_digit_1(3) <= \sevenseg_digit_1[3]~output_o\;

ww_sevenseg_digit_1(4) <= \sevenseg_digit_1[4]~output_o\;

ww_sevenseg_digit_1(5) <= \sevenseg_digit_1[5]~output_o\;

ww_sevenseg_digit_1(6) <= \sevenseg_digit_1[6]~output_o\;

ww_sevenseg_digit_2(0) <= \sevenseg_digit_2[0]~output_o\;

ww_sevenseg_digit_2(1) <= \sevenseg_digit_2[1]~output_o\;

ww_sevenseg_digit_2(2) <= \sevenseg_digit_2[2]~output_o\;

ww_sevenseg_digit_2(3) <= \sevenseg_digit_2[3]~output_o\;

ww_sevenseg_digit_2(4) <= \sevenseg_digit_2[4]~output_o\;

ww_sevenseg_digit_2(5) <= \sevenseg_digit_2[5]~output_o\;

ww_sevenseg_digit_2(6) <= \sevenseg_digit_2[6]~output_o\;

ww_sevenseg_digit_3(0) <= \sevenseg_digit_3[0]~output_o\;

ww_sevenseg_digit_3(1) <= \sevenseg_digit_3[1]~output_o\;

ww_sevenseg_digit_3(2) <= \sevenseg_digit_3[2]~output_o\;

ww_sevenseg_digit_3(3) <= \sevenseg_digit_3[3]~output_o\;

ww_sevenseg_digit_3(4) <= \sevenseg_digit_3[4]~output_o\;

ww_sevenseg_digit_3(5) <= \sevenseg_digit_3[5]~output_o\;

ww_sevenseg_digit_3(6) <= \sevenseg_digit_3[6]~output_o\;

ww_sevenseg_digit_4(0) <= \sevenseg_digit_4[0]~output_o\;

ww_sevenseg_digit_4(1) <= \sevenseg_digit_4[1]~output_o\;

ww_sevenseg_digit_4(2) <= \sevenseg_digit_4[2]~output_o\;

ww_sevenseg_digit_4(3) <= \sevenseg_digit_4[3]~output_o\;

ww_sevenseg_digit_4(4) <= \sevenseg_digit_4[4]~output_o\;

ww_sevenseg_digit_4(5) <= \sevenseg_digit_4[5]~output_o\;

ww_sevenseg_digit_4(6) <= \sevenseg_digit_4[6]~output_o\;

ww_sevenseg_digit_5(0) <= \sevenseg_digit_5[0]~output_o\;

ww_sevenseg_digit_5(1) <= \sevenseg_digit_5[1]~output_o\;

ww_sevenseg_digit_5(2) <= \sevenseg_digit_5[2]~output_o\;

ww_sevenseg_digit_5(3) <= \sevenseg_digit_5[3]~output_o\;

ww_sevenseg_digit_5(4) <= \sevenseg_digit_5[4]~output_o\;

ww_sevenseg_digit_5(5) <= \sevenseg_digit_5[5]~output_o\;

ww_sevenseg_digit_5(6) <= \sevenseg_digit_5[6]~output_o\;

ww_COUT <= \COUT~output_o\;

ww_DONE_main <= \DONE_main~output_o\;
END structure;


